
Nasa_space_apps_piezo_dust_removal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa08  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800aca8  0800aca8  0000bca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af30  0800af30  0000bf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af38  0800af38  0000bf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800af3c  0800af3c  0000bf3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800af40  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800afa4  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800b004  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005218  24000124  0800b064  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400533c  0800b064  0000c33c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a3b2  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048b7  00000000  00000000  00036504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  0003adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001745  00000000  00000000  0003cba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000055bd  00000000  00000000  0003e2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024aef  00000000  00000000  000438a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176e07  00000000  00000000  00068391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001df198  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008548  00000000  00000000  001df1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001e7724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ac90 	.word	0x0800ac90

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800ac90 	.word	0x0800ac90

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 feb6 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f82c 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f9b0 	bl	8000940 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e0:	f000 f8e4 	bl	80007ac <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 f92e 	bl	8000844 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e8:	f000 f978 	bl	80008dc <MX_USB_OTG_FS_PCD_Init>
  MX_DAC1_Init();
 80005ec:	f000 f8a2 	bl	8000734 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f0:	f006 feea 	bl	80073c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f4:	4a09      	ldr	r2, [pc, #36]	@ (800061c <main+0x4c>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4809      	ldr	r0, [pc, #36]	@ (8000620 <main+0x50>)
 80005fa:	f006 ff2f 	bl	800745c <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <main+0x54>)
 8000602:	6013      	str	r3, [r2, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(StartBlinkTask, NULL, &blinkTask_attributes);
 8000604:	4a08      	ldr	r2, [pc, #32]	@ (8000628 <main+0x58>)
 8000606:	2100      	movs	r1, #0
 8000608:	4808      	ldr	r0, [pc, #32]	@ (800062c <main+0x5c>)
 800060a:	f006 ff27 	bl	800745c <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a07      	ldr	r2, [pc, #28]	@ (8000630 <main+0x60>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f006 fefc 	bl	8007410 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0x48>
 800061c:	0800acd8 	.word	0x0800acd8
 8000620:	08000af9 	.word	0x08000af9
 8000624:	240007b4 	.word	0x240007b4
 8000628:	0800acfc 	.word	0x0800acfc
 800062c:	08000c45 	.word	0x08000c45
 8000630:	240007b8 	.word	0x240007b8

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063e:	224c      	movs	r2, #76	@ 0x4c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f009 fc70 	bl	8009f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f009 fc6a 	bl	8009f28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000654:	2002      	movs	r0, #2
 8000656:	f002 f923 	bl	80028a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4b33      	ldr	r3, [pc, #204]	@ (800072c <SystemClock_Config+0xf8>)
 8000660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000662:	4a32      	ldr	r2, [pc, #200]	@ (800072c <SystemClock_Config+0xf8>)
 8000664:	f023 0301 	bic.w	r3, r3, #1
 8000668:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800066a:	4b30      	ldr	r3, [pc, #192]	@ (800072c <SystemClock_Config+0xf8>)
 800066c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	603b      	str	r3, [r7, #0]
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <SystemClock_Config+0xfc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800067c:	4a2c      	ldr	r2, [pc, #176]	@ (8000730 <SystemClock_Config+0xfc>)
 800067e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000682:	6193      	str	r3, [r2, #24]
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <SystemClock_Config+0xfc>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000690:	bf00      	nop
 8000692:	4b27      	ldr	r3, [pc, #156]	@ (8000730 <SystemClock_Config+0xfc>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800069a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800069e:	d1f8      	bne.n	8000692 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006a0:	2303      	movs	r3, #3
 80006a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ae:	2340      	movs	r3, #64	@ 0x40
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	2302      	movs	r3, #2
 80006b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ba:	2301      	movs	r3, #1
 80006bc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006be:	2318      	movs	r3, #24
 80006c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ce:	230c      	movs	r3, #12
 80006d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 f928 	bl	8002934 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006ea:	f000 fad5 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	233f      	movs	r3, #63	@ 0x3f
 80006f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2101      	movs	r1, #1
 8000712:	4618      	mov	r0, r3
 8000714:	f002 fd68 	bl	80031e8 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800071e:	f000 fabb 	bl	8000c98 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3770      	adds	r7, #112	@ 0x70
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	58000400 	.word	0x58000400
 8000730:	58024800 	.word	0x58024800

08000734 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2224      	movs	r2, #36	@ 0x24
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f009 fbf1 	bl	8009f28 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000746:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_DAC1_Init+0x70>)
 8000748:	4a17      	ldr	r2, [pc, #92]	@ (80007a8 <MX_DAC1_Init+0x74>)
 800074a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800074c:	4815      	ldr	r0, [pc, #84]	@ (80007a4 <MX_DAC1_Init+0x70>)
 800074e:	f000 ff79 	bl	8001644 <HAL_DAC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000758:	f000 fa9e 	bl	8000c98 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000768:	2301      	movs	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	4619      	mov	r1, r3
 8000776:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <MX_DAC1_Init+0x70>)
 8000778:	f001 f808 	bl	800178c <HAL_DAC_ConfigChannel>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000782:	f000 fa89 	bl	8000c98 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2210      	movs	r2, #16
 800078a:	4619      	mov	r1, r3
 800078c:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_DAC1_Init+0x70>)
 800078e:	f000 fffd 	bl	800178c <HAL_DAC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000798:	f000 fa7e 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	3728      	adds	r7, #40	@ 0x28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	24000178 	.word	0x24000178
 80007a8:	40007400 	.word	0x40007400

080007ac <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <MX_ETH_Init+0x80>)
 80007b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000830 <MX_ETH_Init+0x84>)
 80007b4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80007b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_ETH_Init+0x88>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_ETH_Init+0x88>)
 80007be:	2280      	movs	r2, #128	@ 0x80
 80007c0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_ETH_Init+0x88>)
 80007c4:	22e1      	movs	r2, #225	@ 0xe1
 80007c6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_ETH_Init+0x88>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_ETH_Init+0x88>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_ETH_Init+0x88>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80007da:	4b14      	ldr	r3, [pc, #80]	@ (800082c <MX_ETH_Init+0x80>)
 80007dc:	4a15      	ldr	r2, [pc, #84]	@ (8000834 <MX_ETH_Init+0x88>)
 80007de:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <MX_ETH_Init+0x80>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_ETH_Init+0x80>)
 80007e8:	4a13      	ldr	r2, [pc, #76]	@ (8000838 <MX_ETH_Init+0x8c>)
 80007ea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <MX_ETH_Init+0x80>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	@ (800083c <MX_ETH_Init+0x90>)
 80007f0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_ETH_Init+0x80>)
 80007f4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007f8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007fa:	480c      	ldr	r0, [pc, #48]	@ (800082c <MX_ETH_Init+0x80>)
 80007fc:	f001 f908 	bl	8001a10 <HAL_ETH_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000806:	f000 fa47 	bl	8000c98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800080a:	2238      	movs	r2, #56	@ 0x38
 800080c:	2100      	movs	r1, #0
 800080e:	480c      	ldr	r0, [pc, #48]	@ (8000840 <MX_ETH_Init+0x94>)
 8000810:	f009 fb8a 	bl	8009f28 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <MX_ETH_Init+0x94>)
 8000816:	2221      	movs	r2, #33	@ 0x21
 8000818:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <MX_ETH_Init+0x94>)
 800081c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000820:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000822:	4b07      	ldr	r3, [pc, #28]	@ (8000840 <MX_ETH_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2400018c 	.word	0x2400018c
 8000830:	40028000 	.word	0x40028000
 8000834:	240007bc 	.word	0x240007bc
 8000838:	240000c4 	.word	0x240000c4
 800083c:	24000064 	.word	0x24000064
 8000840:	24000140 	.word	0x24000140

08000844 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000848:	4b22      	ldr	r3, [pc, #136]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 800084a:	4a23      	ldr	r2, [pc, #140]	@ (80008d8 <MX_USART3_UART_Init+0x94>)
 800084c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800084e:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b1d      	ldr	r3, [pc, #116]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800088c:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 800088e:	f005 f973 	bl	8005b78 <HAL_UART_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000898:	f000 f9fe 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089c:	2100      	movs	r1, #0
 800089e:	480d      	ldr	r0, [pc, #52]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 80008a0:	f006 f97b 	bl	8006b9a <HAL_UARTEx_SetTxFifoThreshold>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008aa:	f000 f9f5 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 80008b2:	f006 f9b0 	bl	8006c16 <HAL_UARTEx_SetRxFifoThreshold>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008bc:	f000 f9ec 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_USART3_UART_Init+0x90>)
 80008c2:	f006 f931 	bl	8006b28 <HAL_UARTEx_DisableFifoMode>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008cc:	f000 f9e4 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2400023c 	.word	0x2400023c
 80008d8:	40004800 	.word	0x40004800

080008dc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e2:	4a16      	ldr	r2, [pc, #88]	@ (800093c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e8:	2209      	movs	r2, #9
 80008ea:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fa:	2202      	movs	r2, #2
 80008fc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000900:	2201      	movs	r2, #1
 8000902:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000906:	2200      	movs	r2, #0
 8000908:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090c:	2200      	movs	r2, #0
 800090e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000912:	2201      	movs	r2, #1
 8000914:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000916:	4b08      	ldr	r3, [pc, #32]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000918:	2201      	movs	r2, #1
 800091a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091e:	2200      	movs	r2, #0
 8000920:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000924:	f001 fe8b 	bl	800263e <HAL_PCD_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800092e:	f000 f9b3 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240002d0 	.word	0x240002d0
 800093c:	40080000 	.word	0x40080000

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	@ 0x30
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b62      	ldr	r3, [pc, #392]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	4a60      	ldr	r2, [pc, #384]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000966:	4b5e      	ldr	r3, [pc, #376]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000974:	4b5a      	ldr	r3, [pc, #360]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	4a59      	ldr	r2, [pc, #356]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000984:	4b56      	ldr	r3, [pc, #344]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	4b53      	ldr	r3, [pc, #332]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	4a51      	ldr	r2, [pc, #324]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 800099a:	f043 0301 	orr.w	r3, r3, #1
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a2:	4b4f      	ldr	r3, [pc, #316]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b6:	4a4a      	ldr	r2, [pc, #296]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c0:	4b47      	ldr	r3, [pc, #284]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ce:	4b44      	ldr	r3, [pc, #272]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d4:	4a42      	ldr	r2, [pc, #264]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009d6:	f043 0308 	orr.w	r3, r3, #8
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009de:	4b40      	ldr	r3, [pc, #256]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009ec:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f2:	4a3b      	ldr	r2, [pc, #236]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009fc:	4b38      	ldr	r3, [pc, #224]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0a:	4b35      	ldr	r3, [pc, #212]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a10:	4a33      	ldr	r2, [pc, #204]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ae0 <MX_GPIO_Init+0x1a0>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a20:	f003 0310 	and.w	r3, r3, #16
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a2e:	482d      	ldr	r0, [pc, #180]	@ (8000ae4 <MX_GPIO_Init+0x1a4>)
 8000a30:	f001 fdd2 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3a:	482b      	ldr	r0, [pc, #172]	@ (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000a3c:	f001 fdcc 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2102      	movs	r1, #2
 8000a44:	4829      	ldr	r0, [pc, #164]	@ (8000aec <MX_GPIO_Init+0x1ac>)
 8000a46:	f001 fdc7 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 031c 	add.w	r3, r7, #28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4824      	ldr	r0, [pc, #144]	@ (8000af0 <MX_GPIO_Init+0x1b0>)
 8000a60:	f001 fc0a 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a64:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4819      	ldr	r0, [pc, #100]	@ (8000ae4 <MX_GPIO_Init+0x1a4>)
 8000a7e:	f001 fbfb 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 031c 	add.w	r3, r7, #28
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4813      	ldr	r0, [pc, #76]	@ (8000ae8 <MX_GPIO_Init+0x1a8>)
 8000a9c:	f001 fbec 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480f      	ldr	r0, [pc, #60]	@ (8000af4 <MX_GPIO_Init+0x1b4>)
 8000ab6:	f001 fbdf 	bl	8002278 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4806      	ldr	r0, [pc, #24]	@ (8000aec <MX_GPIO_Init+0x1ac>)
 8000ad2:	f001 fbd1 	bl	8002278 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3730      	adds	r7, #48	@ 0x30
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	58024400 	.word	0x58024400
 8000ae4:	58020400 	.word	0x58020400
 8000ae8:	58020c00 	.word	0x58020c00
 8000aec:	58021000 	.word	0x58021000
 8000af0:	58020800 	.word	0x58020800
 8000af4:	58021800 	.word	0x58021800

08000af8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	ed2d 8b02 	vpush	{d8}
 8000afe:	b0ec      	sub	sp, #432	@ 0x1b0
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000b06:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8000b0a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */


  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x0000);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	484b      	ldr	r0, [pc, #300]	@ (8000c40 <StartDefaultTask+0x148>)
 8000b14:	f000 fe0f 	bl	8001736 <HAL_DAC_SetValue>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4849      	ldr	r0, [pc, #292]	@ (8000c40 <StartDefaultTask+0x148>)
 8000b1c:	f000 fdb4 	bl	8001688 <HAL_DAC_Start>

  uint16_t buffer[NBR_OF_SAMPLES];
  uint16_t sin_amp = 0x0FFF;
 8000b20:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000b24:	f8a7 31a6 	strh.w	r3, [r7, #422]	@ 0x1a6

  uint32_t i = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

  for( i = 0; i < NBR_OF_SAMPLES; i++){
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8000b34:	e043      	b.n	8000bbe <StartDefaultTask+0xc6>
	  buffer[i] = ((sin_amp + 1)/2) * sin((4 * M_PI * i)/NBR_OF_SAMPLES + 1) + (sin_amp + 1)/2;
 8000b36:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	da00      	bge.n	8000b42 <StartDefaultTask+0x4a>
 8000b40:	3301      	adds	r3, #1
 8000b42:	105b      	asrs	r3, r3, #1
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8000b4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000b50:	ee07 3a90 	vmov	s15, r3
 8000b54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b58:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8000c30 <StartDefaultTask+0x138>
 8000b5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b60:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8000c38 <StartDefaultTask+0x140>
 8000b64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b68:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8000b6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b70:	eeb0 0b47 	vmov.f64	d0, d7
 8000b74:	f009 fac0 	bl	800a0f8 <sin>
 8000b78:	eeb0 7b40 	vmov.f64	d7, d0
 8000b7c:	ee28 6b07 	vmul.f64	d6, d8, d7
 8000b80:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	@ 0x1a6
 8000b84:	3301      	adds	r3, #1
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	da00      	bge.n	8000b8c <StartDefaultTask+0x94>
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	105b      	asrs	r3, r3, #1
 8000b8e:	ee07 3a90 	vmov	s15, r3
 8000b92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b9a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b9e:	ee17 3a90 	vmov	r3, s15
 8000ba2:	b299      	uxth	r1, r3
 8000ba4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000ba8:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8000bac:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8000bb0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for( i = 0; i < NBR_OF_SAMPLES; i++){
 8000bb4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000bb8:	3301      	adds	r3, #1
 8000bba:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8000bbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000bc2:	2bc7      	cmp	r3, #199	@ 0xc7
 8000bc4:	d9b7      	bls.n	8000b36 <StartDefaultTask+0x3e>
  }

  uint32_t time = HAL_GetTick();
 8000bc6:	f000 fc0d 	bl	80013e4 <HAL_GetTick>
 8000bca:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8
  uint32_t max_time = 1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

  HAL_StatusTypeDef Dac_status;

  i = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

  /* Infinite loop */
  for(;;)
  {
	  if((HAL_GetTick() - time) >= max_time)
 8000bda:	f000 fc03 	bl	80013e4 <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d8f5      	bhi.n	8000bda <StartDefaultTask+0xe2>
	  {
		  time = HAL_GetTick();
 8000bee:	f000 fbf9 	bl	80013e4 <HAL_GetTick>
 8000bf2:	f8c7 01a8 	str.w	r0, [r7, #424]	@ 0x1a8


		  Dac_status = HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, buffer[i]);
 8000bf6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8000bfa:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8000bfe:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8000c02:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	480d      	ldr	r0, [pc, #52]	@ (8000c40 <StartDefaultTask+0x148>)
 8000c0c:	f000 fd93 	bl	8001736 <HAL_DAC_SetValue>
 8000c10:	4603      	mov	r3, r0
 8000c12:	f887 319f 	strb.w	r3, [r7, #415]	@ 0x19f

		  i++;
 8000c16:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

		  if(i >= 100)
 8000c20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8000c24:	2b63      	cmp	r3, #99	@ 0x63
 8000c26:	d9d8      	bls.n	8000bda <StartDefaultTask+0xe2>
		  {
			  i = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
	  if((HAL_GetTick() - time) >= max_time)
 8000c2e:	e7d4      	b.n	8000bda <StartDefaultTask+0xe2>
 8000c30:	54442d18 	.word	0x54442d18
 8000c34:	402921fb 	.word	0x402921fb
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	40690000 	.word	0x40690000
 8000c40:	24000178 	.word	0x24000178

08000c44 <StartBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void *argument)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c52:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <StartBlinkTask+0x2c>)
 8000c54:	f001 fcc0 	bl	80025d8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000U);
 8000c58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c5c:	f006 fc90 	bl	8007580 <osDelay>
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000c60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <StartBlinkTask+0x2c>)
 8000c66:	f001 fcd0 	bl	800260a <HAL_GPIO_TogglePin>
    osDelay(1000U);
 8000c6a:	bf00      	nop
 8000c6c:	e7f4      	b.n	8000c58 <StartBlinkTask+0x14>
 8000c6e:	bf00      	nop
 8000c70:	58020400 	.word	0x58020400

08000c74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d101      	bne.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c86:	f000 fb99 	bl	80013bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40014800 	.word	0x40014800

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <HAL_MspInit+0x38>)
 8000cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <HAL_MspInit+0x38>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <HAL_MspInit+0x38>)
 8000cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	210f      	movs	r1, #15
 8000ccc:	f06f 0001 	mvn.w	r0, #1
 8000cd0:	f000 fc90 	bl	80015f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	58024400 	.word	0x58024400

08000ce0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a18      	ldr	r2, [pc, #96]	@ (8000d60 <HAL_DAC_MspInit+0x80>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d129      	bne.n	8000d56 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000d02:	4b18      	ldr	r3, [pc, #96]	@ (8000d64 <HAL_DAC_MspInit+0x84>)
 8000d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d08:	4a16      	ldr	r2, [pc, #88]	@ (8000d64 <HAL_DAC_MspInit+0x84>)
 8000d0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000d0e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d12:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <HAL_DAC_MspInit+0x84>)
 8000d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <HAL_DAC_MspInit+0x84>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	4a0f      	ldr	r2, [pc, #60]	@ (8000d64 <HAL_DAC_MspInit+0x84>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_DAC_MspInit+0x84>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d3e:	2330      	movs	r3, #48	@ 0x30
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d42:	2303      	movs	r3, #3
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <HAL_DAC_MspInit+0x88>)
 8000d52:	f001 fa91 	bl	8002278 <HAL_GPIO_Init>

  /* USER CODE END DAC1_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3728      	adds	r7, #40	@ 0x28
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40007400 	.word	0x40007400
 8000d64:	58024400 	.word	0x58024400
 8000d68:	58020000 	.word	0x58020000

08000d6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	@ 0x38
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a59      	ldr	r2, [pc, #356]	@ (8000ef0 <HAL_ETH_MspInit+0x184>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	f040 80ab 	bne.w	8000ee6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d90:	4b58      	ldr	r3, [pc, #352]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000d92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d96:	4a57      	ldr	r2, [pc, #348]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d9c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000da0:	4b54      	ldr	r3, [pc, #336]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000da2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000daa:	623b      	str	r3, [r7, #32]
 8000dac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dae:	4b51      	ldr	r3, [pc, #324]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db4:	4a4f      	ldr	r2, [pc, #316]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dcc:	4b49      	ldr	r3, [pc, #292]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000dce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd2:	4a48      	ldr	r2, [pc, #288]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dd8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ddc:	4b45      	ldr	r3, [pc, #276]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000dde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dea:	4b42      	ldr	r3, [pc, #264]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	4a40      	ldr	r2, [pc, #256]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0e:	4a39      	ldr	r2, [pc, #228]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e18:	4b36      	ldr	r3, [pc, #216]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b33      	ldr	r3, [pc, #204]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2c:	4a31      	ldr	r2, [pc, #196]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e36:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e54:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <HAL_ETH_MspInit+0x188>)
 8000e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e62:	2332      	movs	r3, #50	@ 0x32
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e72:	230b      	movs	r3, #11
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	481e      	ldr	r0, [pc, #120]	@ (8000ef8 <HAL_ETH_MspInit+0x18c>)
 8000e7e:	f001 f9fb 	bl	8002278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e82:	2386      	movs	r3, #134	@ 0x86
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e92:	230b      	movs	r3, #11
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4817      	ldr	r0, [pc, #92]	@ (8000efc <HAL_ETH_MspInit+0x190>)
 8000e9e:	f001 f9eb 	bl	8002278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb4:	230b      	movs	r3, #11
 8000eb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4810      	ldr	r0, [pc, #64]	@ (8000f00 <HAL_ETH_MspInit+0x194>)
 8000ec0:	f001 f9da 	bl	8002278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ec4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed6:	230b      	movs	r3, #11
 8000ed8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4808      	ldr	r0, [pc, #32]	@ (8000f04 <HAL_ETH_MspInit+0x198>)
 8000ee2:	f001 f9c9 	bl	8002278 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3738      	adds	r7, #56	@ 0x38
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40028000 	.word	0x40028000
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	58020800 	.word	0x58020800
 8000efc:	58020000 	.word	0x58020000
 8000f00:	58020400 	.word	0x58020400
 8000f04:	58021800 	.word	0x58021800

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0ba      	sub	sp, #232	@ 0xe8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	22c0      	movs	r2, #192	@ 0xc0
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f008 fffd 	bl	8009f28 <memset>
  if(huart->Instance==USART3)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a27      	ldr	r2, [pc, #156]	@ (8000fd0 <HAL_UART_MspInit+0xc8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d146      	bne.n	8000fc6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f38:	f04f 0202 	mov.w	r2, #2
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fd18 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f5a:	f7ff fe9d 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <HAL_UART_MspInit+0xcc>)
 8000f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f64:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd4 <HAL_UART_MspInit+0xcc>)
 8000f66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_UART_MspInit+0xcc>)
 8000f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <HAL_UART_MspInit+0xcc>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	4a14      	ldr	r2, [pc, #80]	@ (8000fd4 <HAL_UART_MspInit+0xcc>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <HAL_UART_MspInit+0xcc>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <HAL_UART_MspInit+0xd0>)
 8000fc2:	f001 f959 	bl	8002278 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000fc6:	bf00      	nop
 8000fc8:	37e8      	adds	r7, #232	@ 0xe8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40004800 	.word	0x40004800
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58020c00 	.word	0x58020c00

08000fdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ba      	sub	sp, #232	@ 0xe8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	22c0      	movs	r2, #192	@ 0xc0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f008 ff93 	bl	8009f28 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a30      	ldr	r2, [pc, #192]	@ (80010c8 <HAL_PCD_MspInit+0xec>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d159      	bne.n	80010c0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800100c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001018:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800101c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001020:	f107 0310 	add.w	r3, r7, #16
 8001024:	4618      	mov	r0, r3
 8001026:	f002 fcad 	bl	8003984 <HAL_RCCEx_PeriphCLKConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001030:	f7ff fe32 	bl	8000c98 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001034:	f001 fc6e 	bl	8002914 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <HAL_PCD_MspInit+0xf0>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103e:	4a23      	ldr	r2, [pc, #140]	@ (80010cc <HAL_PCD_MspInit+0xf0>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001048:	4b20      	ldr	r3, [pc, #128]	@ (80010cc <HAL_PCD_MspInit+0xf0>)
 800104a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001056:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800105a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001070:	230a      	movs	r3, #10
 8001072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800107a:	4619      	mov	r1, r3
 800107c:	4814      	ldr	r0, [pc, #80]	@ (80010d0 <HAL_PCD_MspInit+0xf4>)
 800107e:	f001 f8fb 	bl	8002278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <HAL_PCD_MspInit+0xf4>)
 800109e:	f001 f8eb 	bl	8002278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010a2:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_PCD_MspInit+0xf0>)
 80010a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010a8:	4a08      	ldr	r2, [pc, #32]	@ (80010cc <HAL_PCD_MspInit+0xf0>)
 80010aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010b2:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <HAL_PCD_MspInit+0xf0>)
 80010b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80010c0:	bf00      	nop
 80010c2:	37e8      	adds	r7, #232	@ 0xe8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40080000 	.word	0x40080000
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58020000 	.word	0x58020000

080010d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08e      	sub	sp, #56	@ 0x38
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	d842      	bhi.n	8001168 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	2076      	movs	r0, #118	@ 0x76
 80010e8:	f000 fa84 	bl	80015f4 <HAL_NVIC_SetPriority>

     /* Enable the TIM17 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80010ec:	2076      	movs	r0, #118	@ 0x76
 80010ee:	f000 fa9b 	bl	8001628 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80010f2:	4a23      	ldr	r2, [pc, #140]	@ (8001180 <HAL_InitTick+0xac>)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <HAL_InitTick+0xb0>)
 80010fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010fe:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <HAL_InitTick+0xb0>)
 8001100:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001104:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <HAL_InitTick+0xb0>)
 800110a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800110e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001116:	f107 020c 	add.w	r2, r7, #12
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f002 fbed 	bl	8003900 <HAL_RCC_GetClockConfig>
  /* Compute TIM17 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001126:	f002 fbd5 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 800112a:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800112c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800112e:	4a16      	ldr	r2, [pc, #88]	@ (8001188 <HAL_InitTick+0xb4>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	0c9b      	lsrs	r3, r3, #18
 8001136:	3b01      	subs	r3, #1
 8001138:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800113a:	4b14      	ldr	r3, [pc, #80]	@ (800118c <HAL_InitTick+0xb8>)
 800113c:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <HAL_InitTick+0xbc>)
 800113e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0xb8>)
 8001142:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001146:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001148:	4a10      	ldr	r2, [pc, #64]	@ (800118c <HAL_InitTick+0xb8>)
 800114a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800114c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800114e:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_InitTick+0xb8>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <HAL_InitTick+0xb8>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800115a:	480c      	ldr	r0, [pc, #48]	@ (800118c <HAL_InitTick+0xb8>)
 800115c:	f004 fa3e 	bl	80055dc <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d107      	bne.n	8001176 <HAL_InitTick+0xa2>
 8001166:	e001      	b.n	800116c <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e005      	b.n	8001178 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800116c:	4807      	ldr	r0, [pc, #28]	@ (800118c <HAL_InitTick+0xb8>)
 800116e:	f004 fa97 	bl	80056a0 <HAL_TIM_Base_Start_IT>
 8001172:	4603      	mov	r3, r0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3738      	adds	r7, #56	@ 0x38
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	24000008 	.word	0x24000008
 8001184:	58024400 	.word	0x58024400
 8001188:	431bde83 	.word	0x431bde83
 800118c:	240007c4 	.word	0x240007c4
 8001190:	40014800 	.word	0x40014800

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001198:	bf00      	nop
 800119a:	e7fd      	b.n	8001198 <NMI_Handler+0x4>

0800119c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <MemManage_Handler+0x4>

080011ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <UsageFault_Handler+0x4>

080011bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
	...

080011cc <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <TIM17_IRQHandler+0x10>)
 80011d2:	f004 fadd 	bl	8005790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	240007c4 	.word	0x240007c4

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e4:	4b37      	ldr	r3, [pc, #220]	@ (80012c4 <SystemInit+0xe4>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ea:	4a36      	ldr	r2, [pc, #216]	@ (80012c4 <SystemInit+0xe4>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <SystemInit+0xe8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 030f 	and.w	r3, r3, #15
 80011fc:	2b06      	cmp	r3, #6
 80011fe:	d807      	bhi.n	8001210 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001200:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <SystemInit+0xe8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f023 030f 	bic.w	r3, r3, #15
 8001208:	4a2f      	ldr	r2, [pc, #188]	@ (80012c8 <SystemInit+0xe8>)
 800120a:	f043 0307 	orr.w	r3, r3, #7
 800120e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001210:	4b2e      	ldr	r3, [pc, #184]	@ (80012cc <SystemInit+0xec>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a2d      	ldr	r2, [pc, #180]	@ (80012cc <SystemInit+0xec>)
 8001216:	f043 0301 	orr.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800121c:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <SystemInit+0xec>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001222:	4b2a      	ldr	r3, [pc, #168]	@ (80012cc <SystemInit+0xec>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4929      	ldr	r1, [pc, #164]	@ (80012cc <SystemInit+0xec>)
 8001228:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <SystemInit+0xf0>)
 800122a:	4013      	ands	r3, r2
 800122c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800122e:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <SystemInit+0xe8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0308 	and.w	r3, r3, #8
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800123a:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <SystemInit+0xe8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f023 030f 	bic.w	r3, r3, #15
 8001242:	4a21      	ldr	r2, [pc, #132]	@ (80012c8 <SystemInit+0xe8>)
 8001244:	f043 0307 	orr.w	r3, r3, #7
 8001248:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <SystemInit+0xec>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001250:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <SystemInit+0xec>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001256:	4b1d      	ldr	r3, [pc, #116]	@ (80012cc <SystemInit+0xec>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800125c:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <SystemInit+0xec>)
 800125e:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <SystemInit+0xf4>)
 8001260:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001262:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <SystemInit+0xec>)
 8001264:	4a1c      	ldr	r2, [pc, #112]	@ (80012d8 <SystemInit+0xf8>)
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001268:	4b18      	ldr	r3, [pc, #96]	@ (80012cc <SystemInit+0xec>)
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <SystemInit+0xfc>)
 800126c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800126e:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <SystemInit+0xec>)
 8001270:	2200      	movs	r2, #0
 8001272:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001274:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <SystemInit+0xec>)
 8001276:	4a19      	ldr	r2, [pc, #100]	@ (80012dc <SystemInit+0xfc>)
 8001278:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <SystemInit+0xec>)
 800127c:	2200      	movs	r2, #0
 800127e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <SystemInit+0xec>)
 8001282:	4a16      	ldr	r2, [pc, #88]	@ (80012dc <SystemInit+0xfc>)
 8001284:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <SystemInit+0xec>)
 8001288:	2200      	movs	r2, #0
 800128a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <SystemInit+0xec>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <SystemInit+0xec>)
 8001292:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001296:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <SystemInit+0xec>)
 800129a:	2200      	movs	r2, #0
 800129c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800129e:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <SystemInit+0x100>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b10      	ldr	r3, [pc, #64]	@ (80012e4 <SystemInit+0x104>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012aa:	d202      	bcs.n	80012b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <SystemInit+0x108>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	@ (80012ec <SystemInit+0x10c>)
 80012b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	52002000 	.word	0x52002000
 80012cc:	58024400 	.word	0x58024400
 80012d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80012d4:	02020200 	.word	0x02020200
 80012d8:	01ff0000 	.word	0x01ff0000
 80012dc:	01010280 	.word	0x01010280
 80012e0:	5c001000 	.word	0x5c001000
 80012e4:	ffff0000 	.word	0xffff0000
 80012e8:	51008108 	.word	0x51008108
 80012ec:	52004000 	.word	0x52004000

080012f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001328 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012f4:	f7ff ff74 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131e:	f008 fe61 	bl	8009fe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff f955 	bl	80005d0 <main>
  bx  lr
 8001326:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001328:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800132c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001330:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001334:	0800af40 	.word	0x0800af40
  ldr r2, =_sbss
 8001338:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 800133c:	2400533c 	.word	0x2400533c

08001340 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC3_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800134a:	2003      	movs	r0, #3
 800134c:	f000 f947 	bl	80015de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001350:	f002 f900 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_Init+0x68>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	4913      	ldr	r1, [pc, #76]	@ (80013b0 <HAL_Init+0x6c>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	f003 031f 	and.w	r3, r3, #31
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_Init+0x68>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	4a0e      	ldr	r2, [pc, #56]	@ (80013b0 <HAL_Init+0x6c>)
 8001378:	5cd3      	ldrb	r3, [r2, r3]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	4a0b      	ldr	r2, [pc, #44]	@ (80013b4 <HAL_Init+0x70>)
 8001386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001388:	4a0b      	ldr	r2, [pc, #44]	@ (80013b8 <HAL_Init+0x74>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800138e:	200f      	movs	r0, #15
 8001390:	f7ff fea0 	bl	80010d4 <HAL_InitTick>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e002      	b.n	80013a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800139e:	f7ff fc81 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58024400 	.word	0x58024400
 80013b0:	0800ad20 	.word	0x0800ad20
 80013b4:	24000004 	.word	0x24000004
 80013b8:	24000000 	.word	0x24000000

080013bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	@ (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2400000c 	.word	0x2400000c
 80013e0:	24000810 	.word	0x24000810

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	24000810 	.word	0x24000810

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d005      	beq.n	8001422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <HAL_Delay+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001422:	bf00      	nop
 8001424:	f7ff ffde 	bl	80013e4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f7      	bhi.n	8001424 <HAL_Delay+0x28>
  {
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	2400000c 	.word	0x2400000c

08001444 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001448:	4b03      	ldr	r3, [pc, #12]	@ (8001458 <HAL_GetREVID+0x14>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	0c1b      	lsrs	r3, r3, #16
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	5c001000 	.word	0x5c001000

0800145c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001464:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800146c:	4904      	ldr	r1, [pc, #16]	@ (8001480 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	58000400 	.word	0x58000400

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b2:	4a04      	ldr	r2, [pc, #16]	@ (80014c4 <__NVIC_SetPriorityGrouping+0x40>)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	60d3      	str	r3, [r2, #12]
}
 80014b8:	bf00      	nop
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00
 80014c8:	05fa0000 	.word	0x05fa0000

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	@ (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	@ (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	@ (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	@ 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff4c 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001602:	f7ff ff63 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001606:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	68b9      	ldr	r1, [r7, #8]
 800160c:	6978      	ldr	r0, [r7, #20]
 800160e:	f7ff ffb3 	bl	8001578 <NVIC_EncodePriority>
 8001612:	4602      	mov	r2, r0
 8001614:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff82 	bl	8001524 <__NVIC_SetPriority>
}
 8001620:	bf00      	nop
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff56 	bl	80014e8 <__NVIC_EnableIRQ>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e014      	b.n	8001680 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	791b      	ldrb	r3, [r3, #4]
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d105      	bne.n	800166c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fb3a 	bl	8000ce0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2202      	movs	r2, #2
 8001670:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e046      	b.n	800172a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	795b      	ldrb	r3, [r3, #5]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_DAC_Start+0x20>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e040      	b.n	800172a <HAL_DAC_Start+0xa2>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2202      	movs	r2, #2
 80016b2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6819      	ldr	r1, [r3, #0]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	2201      	movs	r2, #1
 80016c2:	409a      	lsls	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10f      	bne.n	80016f2 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d11d      	bne.n	800171c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	e014      	b.n	800171c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2102      	movs	r1, #2
 8001704:	fa01 f303 	lsl.w	r3, r1, r3
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f042 0202 	orr.w	r2, r2, #2
 800171a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001736:	b480      	push	{r7}
 8001738:	b087      	sub	sp, #28
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e015      	b.n	800177e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d105      	bne.n	800176a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4413      	add	r3, r2
 8001764:	3308      	adds	r3, #8
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e004      	b.n	8001774 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	3314      	adds	r3, #20
 8001772:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	461a      	mov	r2, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	371c      	adds	r7, #28
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_DAC_ConfigChannel+0x1e>
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e12a      	b.n	8001a04 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	795b      	ldrb	r3, [r3, #5]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_DAC_ConfigChannel+0x2e>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e124      	b.n	8001a04 <HAL_DAC_ConfigChannel+0x278>
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2201      	movs	r2, #1
 80017be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2202      	movs	r2, #2
 80017c4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d17a      	bne.n	80018c4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80017ce:	f7ff fe09 	bl	80013e4 <HAL_GetTick>
 80017d2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d13d      	bne.n	8001856 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017da:	e018      	b.n	800180e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80017dc:	f7ff fe02 	bl	80013e4 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d911      	bls.n	800180e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f0:	4b86      	ldr	r3, [pc, #536]	@ (8001a0c <HAL_DAC_ConfigChannel+0x280>)
 80017f2:	4013      	ands	r3, r2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00a      	beq.n	800180e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f043 0208 	orr.w	r2, r3, #8
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2203      	movs	r2, #3
 8001808:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e0fa      	b.n	8001a04 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001814:	4b7d      	ldr	r3, [pc, #500]	@ (8001a0c <HAL_DAC_ConfigChannel+0x280>)
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1df      	bne.n	80017dc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	68ba      	ldr	r2, [r7, #8]
 8001822:	6992      	ldr	r2, [r2, #24]
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40
 8001826:	e020      	b.n	800186a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001828:	f7ff fddc 	bl	80013e4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d90f      	bls.n	8001856 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800183c:	2b00      	cmp	r3, #0
 800183e:	da0a      	bge.n	8001856 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	f043 0208 	orr.w	r2, r3, #8
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2203      	movs	r2, #3
 8001850:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0d6      	b.n	8001a04 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800185c:	2b00      	cmp	r3, #0
 800185e:	dbe3      	blt.n	8001828 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	6992      	ldr	r2, [r2, #24]
 8001868:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800187a:	fa01 f303 	lsl.w	r3, r1, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	ea02 0103 	and.w	r1, r2, r3
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	69da      	ldr	r2, [r3, #28]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	409a      	lsls	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	430a      	orrs	r2, r1
 8001896:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	21ff      	movs	r1, #255	@ 0xff
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	ea02 0103 	and.w	r1, r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	409a      	lsls	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d11d      	bne.n	8001908 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	221f      	movs	r2, #31
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f003 0310 	and.w	r3, r3, #16
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800190e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2207      	movs	r2, #7
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d102      	bne.n	8001932 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001930:	e00f      	b.n	8001952 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d102      	bne.n	8001940 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800193a:	2301      	movs	r3, #1
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
 800193e:	e008      	b.n	8001952 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d102      	bne.n	800194e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8001948:	2301      	movs	r3, #1
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
 800194c:	e001      	b.n	8001952 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	4313      	orrs	r3, r2
 800195c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800195e:	4313      	orrs	r3, r2
 8001960:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f003 0310 	and.w	r3, r3, #16
 8001988:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43da      	mvns	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	400a      	ands	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6819      	ldr	r1, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f003 0310 	and.w	r3, r3, #16
 80019e4:	22c0      	movs	r2, #192	@ 0xc0
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	400a      	ands	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2201      	movs	r2, #1
 80019f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001a00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3728      	adds	r7, #40	@ 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20008000 	.word	0x20008000

08001a10 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0e3      	b.n	8001bea <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d106      	bne.n	8001a3a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2223      	movs	r2, #35	@ 0x23
 8001a30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff f999 	bl	8000d6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	4b6e      	ldr	r3, [pc, #440]	@ (8001bf4 <HAL_ETH_Init+0x1e4>)
 8001a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a40:	4a6c      	ldr	r2, [pc, #432]	@ (8001bf4 <HAL_ETH_Init+0x1e4>)
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf4 <HAL_ETH_Init+0x1e4>)
 8001a4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7a1b      	ldrb	r3, [r3, #8]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d103      	bne.n	8001a68 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f7ff fcfb 	bl	800145c <HAL_SYSCFG_ETHInterfaceSelect>
 8001a66:	e003      	b.n	8001a70 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001a68:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001a6c:	f7ff fcf6 	bl	800145c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001a70:	4b61      	ldr	r3, [pc, #388]	@ (8001bf8 <HAL_ETH_Init+0x1e8>)
 8001a72:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a8a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a8c:	f7ff fcaa 	bl	80013e4 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001a92:	e011      	b.n	8001ab8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a94:	f7ff fca6 	bl	80013e4 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001aa2:	d909      	bls.n	8001ab8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	22e0      	movs	r2, #224	@ 0xe0
 8001ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e098      	b.n	8001bea <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1e4      	bne.n	8001a94 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f89e 	bl	8001c0c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ad0:	f001 feba 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a49      	ldr	r2, [pc, #292]	@ (8001bfc <HAL_ETH_Init+0x1ec>)
 8001ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8001adc:	0c9a      	lsrs	r2, r3, #18
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3a01      	subs	r2, #1
 8001ae4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fa81 	bl	8001ff0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001afa:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6812      	ldr	r2, [r2, #0]
 8001b02:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001b06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b0a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	22e0      	movs	r2, #224	@ 0xe0
 8001b26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e05d      	b.n	8001bea <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b36:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b3a:	4b31      	ldr	r3, [pc, #196]	@ (8001c00 <HAL_ETH_Init+0x1f0>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6952      	ldr	r2, [r2, #20]
 8001b42:	0051      	lsls	r1, r2, #1
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	430b      	orrs	r3, r1
 8001b4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b4e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f000 fae9 	bl	800212a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 fb2f 	bl	80021bc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	3305      	adds	r3, #5
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	021a      	lsls	r2, r3, #8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	3303      	adds	r3, #3
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	061a      	lsls	r2, r3, #24
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	041b      	lsls	r3, r3, #16
 8001b90:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	3301      	adds	r3, #1
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001b9c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001baa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bac:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_ETH_Init+0x1f4>)
 8001bbe:	430b      	orrs	r3, r1
 8001bc0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_ETH_Init+0x1f8>)
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2210      	movs	r2, #16
 8001be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	58000400 	.word	0x58000400
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	ffff8001 	.word	0xffff8001
 8001c04:	0c020060 	.word	0x0c020060
 8001c08:	0c20c000 	.word	0x0c20c000

08001c0c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c24:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c26:	f001 fe0f 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8001c2a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001c98 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d804      	bhi.n	8001c3e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e022      	b.n	8001c84 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	4a16      	ldr	r2, [pc, #88]	@ (8001c9c <HAL_ETH_SetMDIOClockRange+0x90>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d204      	bcs.n	8001c50 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	e019      	b.n	8001c84 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4a13      	ldr	r2, [pc, #76]	@ (8001ca0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d915      	bls.n	8001c84 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d804      	bhi.n	8001c6a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e00c      	b.n	8001c84 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d804      	bhi.n	8001c7c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e003      	b.n	8001c84 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001c82:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	02160ebf 	.word	0x02160ebf
 8001c9c:	03938700 	.word	0x03938700
 8001ca0:	05f5e0ff 	.word	0x05f5e0ff
 8001ca4:	08f0d17f 	.word	0x08f0d17f
 8001ca8:	0ee6b27f 	.word	0x0ee6b27f

08001cac <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001cbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	791b      	ldrb	r3, [r3, #4]
 8001cc4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001cc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	7b1b      	ldrb	r3, [r3, #12]
 8001ccc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	7b5b      	ldrb	r3, [r3, #13]
 8001cd4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	7b9b      	ldrb	r3, [r3, #14]
 8001cdc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001cde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	7bdb      	ldrb	r3, [r3, #15]
 8001ce4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001ce6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	7c12      	ldrb	r2, [r2, #16]
 8001cec:	2a00      	cmp	r2, #0
 8001cee:	d102      	bne.n	8001cf6 <ETH_SetMACConfig+0x4a>
 8001cf0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001cf4:	e000      	b.n	8001cf8 <ETH_SetMACConfig+0x4c>
 8001cf6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001cf8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	7c52      	ldrb	r2, [r2, #17]
 8001cfe:	2a00      	cmp	r2, #0
 8001d00:	d102      	bne.n	8001d08 <ETH_SetMACConfig+0x5c>
 8001d02:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d06:	e000      	b.n	8001d0a <ETH_SetMACConfig+0x5e>
 8001d08:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	7c9b      	ldrb	r3, [r3, #18]
 8001d10:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d12:	431a      	orrs	r2, r3
               macconf->Speed |
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d18:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001d1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	7f1b      	ldrb	r3, [r3, #28]
 8001d24:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001d26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	7f5b      	ldrb	r3, [r3, #29]
 8001d2c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d2e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	7f92      	ldrb	r2, [r2, #30]
 8001d34:	2a00      	cmp	r2, #0
 8001d36:	d102      	bne.n	8001d3e <ETH_SetMACConfig+0x92>
 8001d38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d3c:	e000      	b.n	8001d40 <ETH_SetMACConfig+0x94>
 8001d3e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7fdb      	ldrb	r3, [r3, #31]
 8001d46:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d50:	2a00      	cmp	r2, #0
 8001d52:	d102      	bne.n	8001d5a <ETH_SetMACConfig+0xae>
 8001d54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d58:	e000      	b.n	8001d5c <ETH_SetMACConfig+0xb0>
 8001d5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d5c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d6a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001d6c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b56      	ldr	r3, [pc, #344]	@ (8001ed8 <ETH_SetMACConfig+0x22c>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	68f9      	ldr	r1, [r7, #12]
 8001d86:	430b      	orrs	r3, r1
 8001d88:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d8e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d96:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001d98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001da0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001da2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001daa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001dac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001db4:	2a00      	cmp	r2, #0
 8001db6:	d102      	bne.n	8001dbe <ETH_SetMACConfig+0x112>
 8001db8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dbc:	e000      	b.n	8001dc0 <ETH_SetMACConfig+0x114>
 8001dbe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001dc0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4b42      	ldr	r3, [pc, #264]	@ (8001edc <ETH_SetMACConfig+0x230>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	68f9      	ldr	r1, [r7, #12]
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001de4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001dea:	4313      	orrs	r3, r2
 8001dec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee0 <ETH_SetMACConfig+0x234>)
 8001df6:	4013      	ands	r3, r2
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	430b      	orrs	r3, r1
 8001e00:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e08:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e16:	2a00      	cmp	r2, #0
 8001e18:	d101      	bne.n	8001e1e <ETH_SetMACConfig+0x172>
 8001e1a:	2280      	movs	r2, #128	@ 0x80
 8001e1c:	e000      	b.n	8001e20 <ETH_SetMACConfig+0x174>
 8001e1e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001e20:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e26:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e32:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001e36:	4013      	ands	r3, r2
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6812      	ldr	r2, [r2, #0]
 8001e3c:	68f9      	ldr	r1, [r7, #12]
 8001e3e:	430b      	orrs	r3, r1
 8001e40:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001e48:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001e50:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	f023 0103 	bic.w	r1, r3, #3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001e76:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	430a      	orrs	r2, r1
 8001e84:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	d101      	bne.n	8001e9a <ETH_SetMACConfig+0x1ee>
 8001e96:	2240      	movs	r2, #64	@ 0x40
 8001e98:	e000      	b.n	8001e9c <ETH_SetMACConfig+0x1f0>
 8001e9a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e9c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001ea4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ea6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001eae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ebc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	00048083 	.word	0x00048083
 8001edc:	c0f88000 	.word	0xc0f88000
 8001ee0:	fffffef0 	.word	0xfffffef0

08001ee4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <ETH_SetDMAConfig+0xf8>)
 8001efa:	4013      	ands	r3, r2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	6811      	ldr	r1, [r2, #0]
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f0a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	791b      	ldrb	r3, [r3, #4]
 8001f10:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	7b1b      	ldrb	r3, [r3, #12]
 8001f1c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe0 <ETH_SetDMAConfig+0xfc>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	68f9      	ldr	r1, [r7, #12]
 8001f36:	430b      	orrs	r3, r1
 8001f38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f3c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	7b5b      	ldrb	r3, [r3, #13]
 8001f42:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f54:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <ETH_SetDMAConfig+0x100>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	68f9      	ldr	r1, [r7, #12]
 8001f62:	430b      	orrs	r3, r1
 8001f64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f68:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	7d1b      	ldrb	r3, [r3, #20]
 8001f74:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	7f5b      	ldrb	r3, [r3, #29]
 8001f7c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001f8e:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <ETH_SetDMAConfig+0x104>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	68f9      	ldr	r1, [r7, #12]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f9e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	7f1b      	ldrb	r3, [r3, #28]
 8001fa6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <ETH_SetDMAConfig+0x108>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	68f9      	ldr	r1, [r7, #12]
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fcc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	ffff87fd 	.word	0xffff87fd
 8001fe0:	ffff2ffe 	.word	0xffff2ffe
 8001fe4:	fffec000 	.word	0xfffec000
 8001fe8:	ffc0efef 	.word	0xffc0efef
 8001fec:	7fc0ffff 	.word	0x7fc0ffff

08001ff0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0a4      	sub	sp, #144	@ 0x90
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ffe:	2300      	movs	r3, #0
 8002000:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800200e:	2301      	movs	r3, #1
 8002010:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002014:	2301      	movs	r3, #1
 8002016:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002026:	2301      	movs	r3, #1
 8002028:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800202c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002030:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002038:	2300      	movs	r3, #0
 800203a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002042:	2300      	movs	r3, #0
 8002044:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002048:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800204c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002054:	2300      	movs	r3, #0
 8002056:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002058:	2301      	movs	r3, #1
 800205a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800206a:	2300      	movs	r3, #0
 800206c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800206e:	2300      	movs	r3, #0
 8002070:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002072:	2300      	movs	r3, #0
 8002074:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002082:	2301      	movs	r3, #1
 8002084:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002088:	2320      	movs	r3, #32
 800208a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800209a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020a4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80020ac:	2302      	movs	r3, #2
 80020ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020b8:	2300      	movs	r3, #0
 80020ba:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80020be:	2300      	movs	r3, #0
 80020c0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80020ca:	2300      	movs	r3, #0
 80020cc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80020d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020d8:	4619      	mov	r1, r3
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff fde6 	bl	8001cac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80020e0:	2301      	movs	r3, #1
 80020e2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80020e4:	2301      	movs	r3, #1
 80020e6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80020fa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002100:	2300      	movs	r3, #0
 8002102:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002104:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002108:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002110:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002114:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002116:	f107 0308 	add.w	r3, r7, #8
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f7ff fee1 	bl	8001ee4 <ETH_SetDMAConfig>
}
 8002122:	bf00      	nop
 8002124:	3790      	adds	r7, #144	@ 0x90
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e01d      	b.n	8002174 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68d9      	ldr	r1, [r3, #12]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2200      	movs	r2, #0
 8002154:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2200      	movs	r2, #0
 800215a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2200      	movs	r2, #0
 8002160:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	3206      	adds	r2, #6
 800216a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3301      	adds	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d9de      	bls.n	8002138 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002188:	461a      	mov	r2, r3
 800218a:	2303      	movs	r3, #3
 800218c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800219c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021ac:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	e023      	b.n	8002212 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6919      	ldr	r1, [r3, #16]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	440b      	add	r3, r1
 80021da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	3212      	adds	r2, #18
 8002208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d9d8      	bls.n	80021ca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800223e:	461a      	mov	r2, r3
 8002240:	2303      	movs	r3, #3
 8002242:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002252:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002266:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800226a:	bf00      	nop
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	@ 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002286:	4b89      	ldr	r3, [pc, #548]	@ (80024ac <HAL_GPIO_Init+0x234>)
 8002288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800228a:	e194      	b.n	80025b6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	2101      	movs	r1, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8186 	beq.w	80025b0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d005      	beq.n	80022bc <HAL_GPIO_Init+0x44>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f003 0303 	and.w	r3, r3, #3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d130      	bne.n	800231e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022f2:	2201      	movs	r2, #1
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 0201 	and.w	r2, r3, #1
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b03      	cmp	r3, #3
 8002328:	d017      	beq.n	800235a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d123      	bne.n	80023ae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	691a      	ldr	r2, [r3, #16]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	08da      	lsrs	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3208      	adds	r2, #8
 80023a8:	69b9      	ldr	r1, [r7, #24]
 80023aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	2203      	movs	r2, #3
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	4013      	ands	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0203 	and.w	r2, r3, #3
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80e0 	beq.w	80025b0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f0:	4b2f      	ldr	r3, [pc, #188]	@ (80024b0 <HAL_GPIO_Init+0x238>)
 80023f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023f6:	4a2e      	ldr	r2, [pc, #184]	@ (80024b0 <HAL_GPIO_Init+0x238>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002400:	4b2b      	ldr	r3, [pc, #172]	@ (80024b0 <HAL_GPIO_Init+0x238>)
 8002402:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240e:	4a29      	ldr	r2, [pc, #164]	@ (80024b4 <HAL_GPIO_Init+0x23c>)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	089b      	lsrs	r3, r3, #2
 8002414:	3302      	adds	r3, #2
 8002416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	220f      	movs	r2, #15
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a20      	ldr	r2, [pc, #128]	@ (80024b8 <HAL_GPIO_Init+0x240>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d052      	beq.n	80024e0 <HAL_GPIO_Init+0x268>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <HAL_GPIO_Init+0x244>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d031      	beq.n	80024a6 <HAL_GPIO_Init+0x22e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <HAL_GPIO_Init+0x248>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d02b      	beq.n	80024a2 <HAL_GPIO_Init+0x22a>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1d      	ldr	r2, [pc, #116]	@ (80024c4 <HAL_GPIO_Init+0x24c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d025      	beq.n	800249e <HAL_GPIO_Init+0x226>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1c      	ldr	r2, [pc, #112]	@ (80024c8 <HAL_GPIO_Init+0x250>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01f      	beq.n	800249a <HAL_GPIO_Init+0x222>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1b      	ldr	r2, [pc, #108]	@ (80024cc <HAL_GPIO_Init+0x254>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0x21e>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1a      	ldr	r2, [pc, #104]	@ (80024d0 <HAL_GPIO_Init+0x258>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x21a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a19      	ldr	r2, [pc, #100]	@ (80024d4 <HAL_GPIO_Init+0x25c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x216>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a18      	ldr	r2, [pc, #96]	@ (80024d8 <HAL_GPIO_Init+0x260>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x212>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a17      	ldr	r2, [pc, #92]	@ (80024dc <HAL_GPIO_Init+0x264>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x20e>
 8002482:	2309      	movs	r3, #9
 8002484:	e02d      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 8002486:	230a      	movs	r3, #10
 8002488:	e02b      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 800248a:	2308      	movs	r3, #8
 800248c:	e029      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 800248e:	2307      	movs	r3, #7
 8002490:	e027      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 8002492:	2306      	movs	r3, #6
 8002494:	e025      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 8002496:	2305      	movs	r3, #5
 8002498:	e023      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 800249a:	2304      	movs	r3, #4
 800249c:	e021      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 800249e:	2303      	movs	r3, #3
 80024a0:	e01f      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e01d      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e01b      	b.n	80024e2 <HAL_GPIO_Init+0x26a>
 80024aa:	bf00      	nop
 80024ac:	58000080 	.word	0x58000080
 80024b0:	58024400 	.word	0x58024400
 80024b4:	58000400 	.word	0x58000400
 80024b8:	58020000 	.word	0x58020000
 80024bc:	58020400 	.word	0x58020400
 80024c0:	58020800 	.word	0x58020800
 80024c4:	58020c00 	.word	0x58020c00
 80024c8:	58021000 	.word	0x58021000
 80024cc:	58021400 	.word	0x58021400
 80024d0:	58021800 	.word	0x58021800
 80024d4:	58021c00 	.word	0x58021c00
 80024d8:	58022000 	.word	0x58022000
 80024dc:	58022400 	.word	0x58022400
 80024e0:	2300      	movs	r3, #0
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	f002 0203 	and.w	r2, r2, #3
 80024e8:	0092      	lsls	r2, r2, #2
 80024ea:	4093      	lsls	r3, r2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f2:	4938      	ldr	r1, [pc, #224]	@ (80025d4 <HAL_GPIO_Init+0x35c>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800252e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002554:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	43db      	mvns	r3, r3
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	4013      	ands	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	3301      	adds	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f47f ae63 	bne.w	800228c <HAL_GPIO_Init+0x14>
  }
}
 80025c6:	bf00      	nop
 80025c8:	bf00      	nop
 80025ca:	3724      	adds	r7, #36	@ 0x24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	58000400 	.word	0x58000400

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025e8:	787b      	ldrb	r3, [r7, #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800261c:	887a      	ldrh	r2, [r7, #2]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4013      	ands	r3, r2
 8002622:	041a      	lsls	r2, r3, #16
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43d9      	mvns	r1, r3
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	400b      	ands	r3, r1
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af02      	add	r7, sp, #8
 8002644:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e0fe      	b.n	800284e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7fe fcb9 	bl	8000fdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f004 fbcc 	bl	8006e14 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7c1a      	ldrb	r2, [r3, #16]
 8002684:	f88d 2000 	strb.w	r2, [sp]
 8002688:	3304      	adds	r3, #4
 800268a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800268c:	f004 fb50 	bl	8006d30 <USB_CoreInit>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e0d5      	b.n	800284e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f004 fbc4 	bl	8006e36 <USB_SetCurrentMode>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0c6      	b.n	800284e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e04a      	b.n	800275c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3315      	adds	r3, #21
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4413      	add	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	3314      	adds	r3, #20
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026ee:	7bfa      	ldrb	r2, [r7, #15]
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	b298      	uxth	r0, r3
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	332e      	adds	r3, #46	@ 0x2e
 8002702:	4602      	mov	r2, r0
 8002704:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	6879      	ldr	r1, [r7, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	440b      	add	r3, r1
 8002714:	3318      	adds	r3, #24
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	331c      	adds	r3, #28
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800272e:	7bfa      	ldrb	r2, [r7, #15]
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	3320      	adds	r3, #32
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	440b      	add	r3, r1
 8002750:	3324      	adds	r3, #36	@ 0x24
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3301      	adds	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	791b      	ldrb	r3, [r3, #4]
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	429a      	cmp	r2, r3
 8002764:	d3af      	bcc.n	80026c6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e044      	b.n	80027f6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	6879      	ldr	r1, [r7, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	440b      	add	r3, r1
 8002790:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4413      	add	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027ae:	7bfa      	ldrb	r2, [r7, #15]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	3301      	adds	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	791b      	ldrb	r3, [r3, #4]
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d3b5      	bcc.n	800276c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7c1a      	ldrb	r2, [r3, #16]
 8002808:	f88d 2000 	strb.w	r2, [sp]
 800280c:	3304      	adds	r3, #4
 800280e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002810:	f004 fb5e 	bl	8006ed0 <USB_DevInit>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d005      	beq.n	8002826 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e013      	b.n	800284e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7b1b      	ldrb	r3, [r3, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d102      	bne.n	8002842 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f80b 	bl	8002858 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f004 fd19 	bl	800727e <USB_DevDisconnect>

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002886:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_PCDEx_ActivateLPM+0x44>)
 8002888:	4313      	orrs	r3, r2
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	10000003 	.word	0x10000003

080028a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028a8:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b04      	cmp	r3, #4
 80028b2:	d00a      	beq.n	80028ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028b4:	4b16      	ldr	r3, [pc, #88]	@ (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d001      	beq.n	80028c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e01f      	b.n	8002906 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e01d      	b.n	8002906 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80028ca:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f023 0207 	bic.w	r2, r3, #7
 80028d2:	490f      	ldr	r1, [pc, #60]	@ (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80028da:	f7fe fd83 	bl	80013e4 <HAL_GetTick>
 80028de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028e0:	e009      	b.n	80028f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028e2:	f7fe fd7f 	bl	80013e4 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028f0:	d901      	bls.n	80028f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e007      	b.n	8002906 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_PWREx_ConfigSupply+0x70>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002902:	d1ee      	bne.n	80028e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	58024800 	.word	0x58024800

08002914 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002918:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a04      	ldr	r2, [pc, #16]	@ (8002930 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	58024800 	.word	0x58024800

08002934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08c      	sub	sp, #48	@ 0x30
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d102      	bne.n	8002948 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	f000 bc48 	b.w	80031d8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8088 	beq.w	8002a66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002956:	4b99      	ldr	r3, [pc, #612]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002960:	4b96      	ldr	r3, [pc, #600]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002968:	2b10      	cmp	r3, #16
 800296a:	d007      	beq.n	800297c <HAL_RCC_OscConfig+0x48>
 800296c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800296e:	2b18      	cmp	r3, #24
 8002970:	d111      	bne.n	8002996 <HAL_RCC_OscConfig+0x62>
 8002972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d10c      	bne.n	8002996 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297c:	4b8f      	ldr	r3, [pc, #572]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d06d      	beq.n	8002a64 <HAL_RCC_OscConfig+0x130>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d169      	bne.n	8002a64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f000 bc21 	b.w	80031d8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x7a>
 80029a0:	4b86      	ldr	r3, [pc, #536]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a85      	ldr	r2, [pc, #532]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e02e      	b.n	8002a0c <HAL_RCC_OscConfig+0xd8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x9c>
 80029b6:	4b81      	ldr	r3, [pc, #516]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a80      	ldr	r2, [pc, #512]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b7e      	ldr	r3, [pc, #504]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a7d      	ldr	r2, [pc, #500]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e01d      	b.n	8002a0c <HAL_RCC_OscConfig+0xd8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0xc0>
 80029da:	4b78      	ldr	r3, [pc, #480]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a77      	ldr	r2, [pc, #476]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e4:	6013      	str	r3, [r2, #0]
 80029e6:	4b75      	ldr	r3, [pc, #468]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a74      	ldr	r2, [pc, #464]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029f0:	6013      	str	r3, [r2, #0]
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0xd8>
 80029f4:	4b71      	ldr	r3, [pc, #452]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a70      	ldr	r2, [pc, #448]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 80029fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029fe:	6013      	str	r3, [r2, #0]
 8002a00:	4b6e      	ldr	r3, [pc, #440]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a6d      	ldr	r2, [pc, #436]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d013      	beq.n	8002a3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a14:	f7fe fce6 	bl	80013e4 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fce2 	bl	80013e4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e3d4      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a2e:	4b63      	ldr	r3, [pc, #396]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0xe8>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3c:	f7fe fcd2 	bl	80013e4 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a44:	f7fe fcce 	bl	80013e4 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b64      	cmp	r3, #100	@ 0x64
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e3c0      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a56:	4b59      	ldr	r3, [pc, #356]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x110>
 8002a62:	e000      	b.n	8002a66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 80ca 	beq.w	8002c08 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a74:	4b51      	ldr	r3, [pc, #324]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a7c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a82:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_RCC_OscConfig+0x166>
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	2b18      	cmp	r3, #24
 8002a8e:	d156      	bne.n	8002b3e <HAL_RCC_OscConfig+0x20a>
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d151      	bne.n	8002b3e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a9a:	4b48      	ldr	r3, [pc, #288]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e392      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ab2:	4b42      	ldr	r3, [pc, #264]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 0219 	bic.w	r2, r3, #25
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	493f      	ldr	r1, [pc, #252]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fc8e 	bl	80013e4 <HAL_GetTick>
 8002ac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002acc:	f7fe fc8a 	bl	80013e4 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e37c      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ade:	4b37      	ldr	r3, [pc, #220]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aea:	f7fe fcab 	bl	8001444 <HAL_GetREVID>
 8002aee:	4603      	mov	r3, r0
 8002af0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d817      	bhi.n	8002b28 <HAL_RCC_OscConfig+0x1f4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	2b40      	cmp	r3, #64	@ 0x40
 8002afe:	d108      	bne.n	8002b12 <HAL_RCC_OscConfig+0x1de>
 8002b00:	4b2e      	ldr	r3, [pc, #184]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b08:	4a2c      	ldr	r2, [pc, #176]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b10:	e07a      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b12:	4b2a      	ldr	r3, [pc, #168]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	031b      	lsls	r3, r3, #12
 8002b20:	4926      	ldr	r1, [pc, #152]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b26:	e06f      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b28:	4b24      	ldr	r3, [pc, #144]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	061b      	lsls	r3, r3, #24
 8002b36:	4921      	ldr	r1, [pc, #132]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b3c:	e064      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d047      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b46:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 0219 	bic.w	r2, r3, #25
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	491a      	ldr	r1, [pc, #104]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fc44 	bl	80013e4 <HAL_GetTick>
 8002b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b60:	f7fe fc40 	bl	80013e4 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e332      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b72:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7e:	f7fe fc61 	bl	8001444 <HAL_GetREVID>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d819      	bhi.n	8002bc0 <HAL_RCC_OscConfig+0x28c>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b40      	cmp	r3, #64	@ 0x40
 8002b92:	d108      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x272>
 8002b94:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002b9c:	4a07      	ldr	r2, [pc, #28]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba2:	6053      	str	r3, [r2, #4]
 8002ba4:	e030      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
 8002ba6:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	031b      	lsls	r3, r3, #12
 8002bb4:	4901      	ldr	r1, [pc, #4]	@ (8002bbc <HAL_RCC_OscConfig+0x288>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
 8002bba:	e025      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	4b9a      	ldr	r3, [pc, #616]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	4997      	ldr	r1, [pc, #604]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	e018      	b.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bd6:	4b95      	ldr	r3, [pc, #596]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a94      	ldr	r2, [pc, #592]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe fbff 	bl	80013e4 <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe fbfb 	bl	80013e4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e2ed      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bfc:	4b8b      	ldr	r3, [pc, #556]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a9 	beq.w	8002d68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c16:	4b85      	ldr	r3, [pc, #532]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c1e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c20:	4b82      	ldr	r3, [pc, #520]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c24:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d007      	beq.n	8002c3c <HAL_RCC_OscConfig+0x308>
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b18      	cmp	r3, #24
 8002c30:	d13a      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x374>
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d135      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c3c:	4b7b      	ldr	r3, [pc, #492]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_OscConfig+0x320>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	2b80      	cmp	r3, #128	@ 0x80
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e2c1      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c54:	f7fe fbf6 	bl	8001444 <HAL_GetREVID>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d817      	bhi.n	8002c92 <HAL_RCC_OscConfig+0x35e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_OscConfig+0x348>
 8002c6a:	4b70      	ldr	r3, [pc, #448]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002c72:	4a6e      	ldr	r2, [pc, #440]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002c78:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c7a:	e075      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c7c:	4b6b      	ldr	r3, [pc, #428]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	069b      	lsls	r3, r3, #26
 8002c8a:	4968      	ldr	r1, [pc, #416]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c90:	e06a      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c92:	4b66      	ldr	r3, [pc, #408]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a1b      	ldr	r3, [r3, #32]
 8002c9e:	061b      	lsls	r3, r3, #24
 8002ca0:	4962      	ldr	r1, [pc, #392]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ca6:	e05f      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d042      	beq.n	8002d36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cb0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a5d      	ldr	r2, [pc, #372]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fb92 	bl	80013e4 <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002cc4:	f7fe fb8e 	bl	80013e4 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e280      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cd6:	4b55      	ldr	r3, [pc, #340]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d0f0      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ce2:	f7fe fbaf 	bl	8001444 <HAL_GetREVID>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d817      	bhi.n	8002d20 <HAL_RCC_OscConfig+0x3ec>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d108      	bne.n	8002d0a <HAL_RCC_OscConfig+0x3d6>
 8002cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d00:	4a4a      	ldr	r2, [pc, #296]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d06:	6053      	str	r3, [r2, #4]
 8002d08:	e02e      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
 8002d0a:	4b48      	ldr	r3, [pc, #288]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	069b      	lsls	r3, r3, #26
 8002d18:	4944      	ldr	r1, [pc, #272]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
 8002d1e:	e023      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
 8002d20:	4b42      	ldr	r3, [pc, #264]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	493f      	ldr	r1, [pc, #252]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
 8002d34:	e018      	b.n	8002d68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d36:	4b3d      	ldr	r3, [pc, #244]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fe fb4f 	bl	80013e4 <HAL_GetTick>
 8002d46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d4a:	f7fe fb4b 	bl	80013e4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e23d      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d5c:	4b33      	ldr	r3, [pc, #204]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d036      	beq.n	8002de2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d019      	beq.n	8002db0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d80:	4a2a      	ldr	r2, [pc, #168]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d88:	f7fe fb2c 	bl	80013e4 <HAL_GetTick>
 8002d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe fb28 	bl	80013e4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e21a      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002da2:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x45c>
 8002dae:	e018      	b.n	8002de2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002db0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002db2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002db4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002db6:	f023 0301 	bic.w	r3, r3, #1
 8002dba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe fb12 	bl	80013e4 <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe fb0e 	bl	80013e4 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e200      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dd6:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f0      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d039      	beq.n	8002e62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d01c      	beq.n	8002e30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002df6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002e00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e02:	f7fe faef 	bl	80013e4 <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e0a:	f7fe faeb 	bl	80013e4 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1dd      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e1c:	4b03      	ldr	r3, [pc, #12]	@ (8002e2c <HAL_RCC_OscConfig+0x4f8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x4d6>
 8002e28:	e01b      	b.n	8002e62 <HAL_RCC_OscConfig+0x52e>
 8002e2a:	bf00      	nop
 8002e2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e30:	4b9b      	ldr	r3, [pc, #620]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a9a      	ldr	r2, [pc, #616]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fad2 	bl	80013e4 <HAL_GetTick>
 8002e40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e44:	f7fe face 	bl	80013e4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1c0      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e56:	4b92      	ldr	r3, [pc, #584]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0304 	and.w	r3, r3, #4
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8081 	beq.w	8002f72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e70:	4b8c      	ldr	r3, [pc, #560]	@ (80030a4 <HAL_RCC_OscConfig+0x770>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a8b      	ldr	r2, [pc, #556]	@ (80030a4 <HAL_RCC_OscConfig+0x770>)
 8002e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e7c:	f7fe fab2 	bl	80013e4 <HAL_GetTick>
 8002e80:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e84:	f7fe faae 	bl	80013e4 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b64      	cmp	r3, #100	@ 0x64
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e1a0      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e96:	4b83      	ldr	r3, [pc, #524]	@ (80030a4 <HAL_RCC_OscConfig+0x770>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d106      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x584>
 8002eaa:	4b7d      	ldr	r3, [pc, #500]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eae:	4a7c      	ldr	r2, [pc, #496]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb6:	e02d      	b.n	8002f14 <HAL_RCC_OscConfig+0x5e0>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x5a6>
 8002ec0:	4b77      	ldr	r3, [pc, #476]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec4:	4a76      	ldr	r2, [pc, #472]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ec6:	f023 0301 	bic.w	r3, r3, #1
 8002eca:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ecc:	4b74      	ldr	r3, [pc, #464]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed0:	4a73      	ldr	r2, [pc, #460]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	f023 0304 	bic.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed8:	e01c      	b.n	8002f14 <HAL_RCC_OscConfig+0x5e0>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	2b05      	cmp	r3, #5
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCC_OscConfig+0x5c8>
 8002ee2:	4b6f      	ldr	r3, [pc, #444]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee6:	4a6e      	ldr	r2, [pc, #440]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ee8:	f043 0304 	orr.w	r3, r3, #4
 8002eec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eee:	4b6c      	ldr	r3, [pc, #432]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	4a6b      	ldr	r2, [pc, #428]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efa:	e00b      	b.n	8002f14 <HAL_RCC_OscConfig+0x5e0>
 8002efc:	4b68      	ldr	r3, [pc, #416]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f00:	4a67      	ldr	r2, [pc, #412]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f08:	4b65      	ldr	r3, [pc, #404]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f0c:	4a64      	ldr	r2, [pc, #400]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f0e:	f023 0304 	bic.w	r3, r3, #4
 8002f12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1c:	f7fe fa62 	bl	80013e4 <HAL_GetTick>
 8002f20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f22:	e00a      	b.n	8002f3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f24:	f7fe fa5e 	bl	80013e4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d901      	bls.n	8002f3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e14e      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f3a:	4b59      	ldr	r3, [pc, #356]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d0ee      	beq.n	8002f24 <HAL_RCC_OscConfig+0x5f0>
 8002f46:	e014      	b.n	8002f72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f48:	f7fe fa4c 	bl	80013e4 <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fe fa48 	bl	80013e4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e138      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f66:	4b4e      	ldr	r3, [pc, #312]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1ee      	bne.n	8002f50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f000 812d 	beq.w	80031d6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f7c:	4b48      	ldr	r3, [pc, #288]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f84:	2b18      	cmp	r3, #24
 8002f86:	f000 80bd 	beq.w	8003104 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	f040 809e 	bne.w	80030d0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f94:	4b42      	ldr	r3, [pc, #264]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a41      	ldr	r2, [pc, #260]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002f9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa0:	f7fe fa20 	bl	80013e4 <HAL_GetTick>
 8002fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa8:	f7fe fa1c 	bl	80013e4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e10e      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002fba:	4b39      	ldr	r3, [pc, #228]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc6:	4b36      	ldr	r3, [pc, #216]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002fc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fca:	4b37      	ldr	r3, [pc, #220]	@ (80030a8 <HAL_RCC_OscConfig+0x774>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	4931      	ldr	r1, [pc, #196]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	628b      	str	r3, [r1, #40]	@ 0x28
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	025b      	lsls	r3, r3, #9
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003008:	3b01      	subs	r3, #1
 800300a:	061b      	lsls	r3, r3, #24
 800300c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003010:	4923      	ldr	r1, [pc, #140]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003012:	4313      	orrs	r3, r2
 8003014:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003016:	4b22      	ldr	r3, [pc, #136]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301a:	4a21      	ldr	r2, [pc, #132]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003022:	4b1f      	ldr	r3, [pc, #124]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003026:	4b21      	ldr	r3, [pc, #132]	@ (80030ac <HAL_RCC_OscConfig+0x778>)
 8003028:	4013      	ands	r3, r2
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800302e:	00d2      	lsls	r2, r2, #3
 8003030:	491b      	ldr	r1, [pc, #108]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003032:	4313      	orrs	r3, r2
 8003034:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003036:	4b1a      	ldr	r3, [pc, #104]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	f023 020c 	bic.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	4917      	ldr	r1, [pc, #92]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003044:	4313      	orrs	r3, r2
 8003046:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003048:	4b15      	ldr	r3, [pc, #84]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	f023 0202 	bic.w	r2, r3, #2
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003054:	4912      	ldr	r1, [pc, #72]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003056:	4313      	orrs	r3, r2
 8003058:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800305a:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	4a10      	ldr	r2, [pc, #64]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003064:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003066:	4b0e      	ldr	r3, [pc, #56]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	4a0d      	ldr	r2, [pc, #52]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800306c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003070:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003072:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	4a0a      	ldr	r2, [pc, #40]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800307c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800307e:	4b08      	ldr	r3, [pc, #32]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003082:	4a07      	ldr	r2, [pc, #28]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800308a:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a04      	ldr	r2, [pc, #16]	@ (80030a0 <HAL_RCC_OscConfig+0x76c>)
 8003090:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fe f9a5 	bl	80013e4 <HAL_GetTick>
 800309a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800309c:	e011      	b.n	80030c2 <HAL_RCC_OscConfig+0x78e>
 800309e:	bf00      	nop
 80030a0:	58024400 	.word	0x58024400
 80030a4:	58024800 	.word	0x58024800
 80030a8:	fffffc0c 	.word	0xfffffc0c
 80030ac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe f998 	bl	80013e4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e08a      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030c2:	4b47      	ldr	r3, [pc, #284]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x77c>
 80030ce:	e082      	b.n	80031d6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d0:	4b43      	ldr	r3, [pc, #268]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a42      	ldr	r2, [pc, #264]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 80030d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe f982 	bl	80013e4 <HAL_GetTick>
 80030e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fe f97e 	bl	80013e4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e070      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030f6:	4b3a      	ldr	r3, [pc, #232]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x7b0>
 8003102:	e068      	b.n	80031d6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003104:	4b36      	ldr	r3, [pc, #216]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 8003106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003108:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800310a:	4b35      	ldr	r3, [pc, #212]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003114:	2b01      	cmp	r3, #1
 8003116:	d031      	beq.n	800317c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f003 0203 	and.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d12a      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d122      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003140:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003142:	429a      	cmp	r2, r3
 8003144:	d11a      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	0a5b      	lsrs	r3, r3, #9
 800314a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003152:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d111      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	0c1b      	lsrs	r3, r3, #16
 800315c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003164:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d108      	bne.n	800317c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	0e1b      	lsrs	r3, r3, #24
 800316e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003176:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e02b      	b.n	80031d8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003180:	4b17      	ldr	r3, [pc, #92]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 8003182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003184:	08db      	lsrs	r3, r3, #3
 8003186:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800318a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	429a      	cmp	r2, r3
 8003194:	d01f      	beq.n	80031d6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003196:	4b12      	ldr	r3, [pc, #72]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 8003198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319a:	4a11      	ldr	r2, [pc, #68]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 800319c:	f023 0301 	bic.w	r3, r3, #1
 80031a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a2:	f7fe f91f 	bl	80013e4 <HAL_GetTick>
 80031a6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80031a8:	bf00      	nop
 80031aa:	f7fe f91b 	bl	80013e4 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d0f9      	beq.n	80031aa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 80031b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ba:	4b0a      	ldr	r3, [pc, #40]	@ (80031e4 <HAL_RCC_OscConfig+0x8b0>)
 80031bc:	4013      	ands	r3, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80031c2:	00d2      	lsls	r2, r2, #3
 80031c4:	4906      	ldr	r1, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80031ca:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 80031cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ce:	4a04      	ldr	r2, [pc, #16]	@ (80031e0 <HAL_RCC_OscConfig+0x8ac>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3730      	adds	r7, #48	@ 0x30
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	58024400 	.word	0x58024400
 80031e4:	ffff0007 	.word	0xffff0007

080031e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e19c      	b.n	8003536 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031fc:	4b8a      	ldr	r3, [pc, #552]	@ (8003428 <HAL_RCC_ClockConfig+0x240>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 030f 	and.w	r3, r3, #15
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	429a      	cmp	r2, r3
 8003208:	d910      	bls.n	800322c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320a:	4b87      	ldr	r3, [pc, #540]	@ (8003428 <HAL_RCC_ClockConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f023 020f 	bic.w	r2, r3, #15
 8003212:	4985      	ldr	r1, [pc, #532]	@ (8003428 <HAL_RCC_ClockConfig+0x240>)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321a:	4b83      	ldr	r3, [pc, #524]	@ (8003428 <HAL_RCC_ClockConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d001      	beq.n	800322c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e184      	b.n	8003536 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d010      	beq.n	800325a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	4b7b      	ldr	r3, [pc, #492]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003244:	429a      	cmp	r2, r3
 8003246:	d908      	bls.n	800325a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003248:	4b78      	ldr	r3, [pc, #480]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	4975      	ldr	r1, [pc, #468]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 8003256:	4313      	orrs	r3, r2
 8003258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d010      	beq.n	8003288 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	4b70      	ldr	r3, [pc, #448]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800326c:	69db      	ldr	r3, [r3, #28]
 800326e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003272:	429a      	cmp	r2, r3
 8003274:	d908      	bls.n	8003288 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003276:	4b6d      	ldr	r3, [pc, #436]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	496a      	ldr	r1, [pc, #424]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 8003284:	4313      	orrs	r3, r2
 8003286:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b00      	cmp	r3, #0
 8003292:	d010      	beq.n	80032b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	4b64      	ldr	r3, [pc, #400]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d908      	bls.n	80032b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032a4:	4b61      	ldr	r3, [pc, #388]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	495e      	ldr	r1, [pc, #376]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d010      	beq.n	80032e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	4b59      	ldr	r3, [pc, #356]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d908      	bls.n	80032e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80032d2:	4b56      	ldr	r3, [pc, #344]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	4953      	ldr	r1, [pc, #332]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	4b4d      	ldr	r3, [pc, #308]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d908      	bls.n	8003312 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b4a      	ldr	r3, [pc, #296]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f023 020f 	bic.w	r2, r3, #15
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4947      	ldr	r1, [pc, #284]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800330e:	4313      	orrs	r3, r2
 8003310:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d055      	beq.n	80033ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800331e:	4b43      	ldr	r3, [pc, #268]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	4940      	ldr	r1, [pc, #256]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800332c:	4313      	orrs	r3, r2
 800332e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b02      	cmp	r3, #2
 8003336:	d107      	bne.n	8003348 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003338:	4b3c      	ldr	r3, [pc, #240]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d121      	bne.n	8003388 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0f6      	b.n	8003536 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d107      	bne.n	8003360 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003350:	4b36      	ldr	r3, [pc, #216]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d115      	bne.n	8003388 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0ea      	b.n	8003536 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003368:	4b30      	ldr	r3, [pc, #192]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0de      	b.n	8003536 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003378:	4b2c      	ldr	r3, [pc, #176]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0d6      	b.n	8003536 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003388:	4b28      	ldr	r3, [pc, #160]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f023 0207 	bic.w	r2, r3, #7
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4925      	ldr	r1, [pc, #148]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 8003396:	4313      	orrs	r3, r2
 8003398:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339a:	f7fe f823 	bl	80013e4 <HAL_GetTick>
 800339e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a2:	f7fe f81f 	bl	80013e4 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0be      	b.n	8003536 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b8:	4b1c      	ldr	r3, [pc, #112]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d1eb      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d010      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	4b14      	ldr	r3, [pc, #80]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d208      	bcs.n	80033f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e6:	4b11      	ldr	r3, [pc, #68]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f023 020f 	bic.w	r2, r3, #15
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	490e      	ldr	r1, [pc, #56]	@ (800342c <HAL_RCC_ClockConfig+0x244>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003428 <HAL_RCC_ClockConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d214      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <HAL_RCC_ClockConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 020f 	bic.w	r2, r3, #15
 800340e:	4906      	ldr	r1, [pc, #24]	@ (8003428 <HAL_RCC_ClockConfig+0x240>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <HAL_RCC_ClockConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e086      	b.n	8003536 <HAL_RCC_ClockConfig+0x34e>
 8003428:	52002000 	.word	0x52002000
 800342c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d010      	beq.n	800345e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	4b3f      	ldr	r3, [pc, #252]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003448:	429a      	cmp	r2, r3
 800344a:	d208      	bcs.n	800345e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800344c:	4b3c      	ldr	r3, [pc, #240]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	4939      	ldr	r1, [pc, #228]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 800345a:	4313      	orrs	r3, r2
 800345c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d010      	beq.n	800348c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	4b34      	ldr	r3, [pc, #208]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003476:	429a      	cmp	r2, r3
 8003478:	d208      	bcs.n	800348c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800347a:	4b31      	ldr	r3, [pc, #196]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	492e      	ldr	r1, [pc, #184]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 8003488:	4313      	orrs	r3, r2
 800348a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d010      	beq.n	80034ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d208      	bcs.n	80034ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034a8:	4b25      	ldr	r3, [pc, #148]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	4922      	ldr	r1, [pc, #136]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0320 	and.w	r3, r3, #32
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d010      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69da      	ldr	r2, [r3, #28]
 80034ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d208      	bcs.n	80034e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4917      	ldr	r1, [pc, #92]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80034e8:	f000 f834 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b14      	ldr	r3, [pc, #80]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	0a1b      	lsrs	r3, r3, #8
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	4912      	ldr	r1, [pc, #72]	@ (8003544 <HAL_RCC_ClockConfig+0x35c>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003506:	4b0e      	ldr	r3, [pc, #56]	@ (8003540 <HAL_RCC_ClockConfig+0x358>)
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	4a0d      	ldr	r2, [pc, #52]	@ (8003544 <HAL_RCC_ClockConfig+0x35c>)
 8003510:	5cd3      	ldrb	r3, [r2, r3]
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	4a0a      	ldr	r2, [pc, #40]	@ (8003548 <HAL_RCC_ClockConfig+0x360>)
 800351e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003520:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <HAL_RCC_ClockConfig+0x364>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003526:	4b0a      	ldr	r3, [pc, #40]	@ (8003550 <HAL_RCC_ClockConfig+0x368>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fdd2 	bl	80010d4 <HAL_InitTick>
 8003530:	4603      	mov	r3, r0
 8003532:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3718      	adds	r7, #24
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	58024400 	.word	0x58024400
 8003544:	0800ad20 	.word	0x0800ad20
 8003548:	24000004 	.word	0x24000004
 800354c:	24000000 	.word	0x24000000
 8003550:	24000008 	.word	0x24000008

08003554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	@ 0x24
 8003558:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800355a:	4bb3      	ldr	r3, [pc, #716]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003562:	2b18      	cmp	r3, #24
 8003564:	f200 8155 	bhi.w	8003812 <HAL_RCC_GetSysClockFreq+0x2be>
 8003568:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <HAL_RCC_GetSysClockFreq+0x1c>)
 800356a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356e:	bf00      	nop
 8003570:	080035d5 	.word	0x080035d5
 8003574:	08003813 	.word	0x08003813
 8003578:	08003813 	.word	0x08003813
 800357c:	08003813 	.word	0x08003813
 8003580:	08003813 	.word	0x08003813
 8003584:	08003813 	.word	0x08003813
 8003588:	08003813 	.word	0x08003813
 800358c:	08003813 	.word	0x08003813
 8003590:	080035fb 	.word	0x080035fb
 8003594:	08003813 	.word	0x08003813
 8003598:	08003813 	.word	0x08003813
 800359c:	08003813 	.word	0x08003813
 80035a0:	08003813 	.word	0x08003813
 80035a4:	08003813 	.word	0x08003813
 80035a8:	08003813 	.word	0x08003813
 80035ac:	08003813 	.word	0x08003813
 80035b0:	08003601 	.word	0x08003601
 80035b4:	08003813 	.word	0x08003813
 80035b8:	08003813 	.word	0x08003813
 80035bc:	08003813 	.word	0x08003813
 80035c0:	08003813 	.word	0x08003813
 80035c4:	08003813 	.word	0x08003813
 80035c8:	08003813 	.word	0x08003813
 80035cc:	08003813 	.word	0x08003813
 80035d0:	08003607 	.word	0x08003607
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035d4:	4b94      	ldr	r3, [pc, #592]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d009      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035e0:	4b91      	ldr	r3, [pc, #580]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	4a90      	ldr	r2, [pc, #576]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
 80035f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80035f2:	e111      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80035f4:	4b8d      	ldr	r3, [pc, #564]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80035f6:	61bb      	str	r3, [r7, #24]
      break;
 80035f8:	e10e      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80035fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035fc:	61bb      	str	r3, [r7, #24]
      break;
 80035fe:	e10b      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003600:	4b8c      	ldr	r3, [pc, #560]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003602:	61bb      	str	r3, [r7, #24]
      break;
 8003604:	e108      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003606:	4b88      	ldr	r3, [pc, #544]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003610:	4b85      	ldr	r3, [pc, #532]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800361a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800361c:	4b82      	ldr	r3, [pc, #520]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003626:	4b80      	ldr	r3, [pc, #512]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800362a:	08db      	lsrs	r3, r3, #3
 800362c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	fb02 f303 	mul.w	r3, r2, r3
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800363e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80e1 	beq.w	800380c <HAL_RCC_GetSysClockFreq+0x2b8>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b02      	cmp	r3, #2
 800364e:	f000 8083 	beq.w	8003758 <HAL_RCC_GetSysClockFreq+0x204>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b02      	cmp	r3, #2
 8003656:	f200 80a1 	bhi.w	800379c <HAL_RCC_GetSysClockFreq+0x248>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x114>
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d056      	beq.n	8003714 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003666:	e099      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003668:	4b6f      	ldr	r3, [pc, #444]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d02d      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003674:	4b6c      	ldr	r3, [pc, #432]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	08db      	lsrs	r3, r3, #3
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	4a6b      	ldr	r2, [pc, #428]	@ (800382c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	ee07 3a90 	vmov	s15, r3
 800368c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	ee07 3a90 	vmov	s15, r3
 8003696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369e:	4b62      	ldr	r3, [pc, #392]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80036b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003838 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80036ce:	e087      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	ee07 3a90 	vmov	s15, r3
 80036d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800383c <HAL_RCC_GetSysClockFreq+0x2e8>
 80036de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e2:	4b51      	ldr	r3, [pc, #324]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ea:	ee07 3a90 	vmov	s15, r3
 80036ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80036f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003838 <HAL_RCC_GetSysClockFreq+0x2e4>
 80036fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003712:	e065      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003840 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003726:	4b40      	ldr	r3, [pc, #256]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003736:	ed97 6a02 	vldr	s12, [r7, #8]
 800373a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003838 <HAL_RCC_GetSysClockFreq+0x2e4>
 800373e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003752:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003756:	e043      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003762:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003844 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376a:	4b2f      	ldr	r3, [pc, #188]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377a:	ed97 6a02 	vldr	s12, [r7, #8]
 800377e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003838 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800378e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800379a:	e021      	b.n	80037e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003840 <HAL_RCC_GetSysClockFreq+0x2ec>
 80037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	ed97 6a02 	vldr	s12, [r7, #8]
 80037c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003838 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80037e0:	4b11      	ldr	r3, [pc, #68]	@ (8003828 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e4:	0a5b      	lsrs	r3, r3, #9
 80037e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037ea:	3301      	adds	r3, #1
 80037ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	ee07 3a90 	vmov	s15, r3
 80037f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80037fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003800:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003804:	ee17 3a90 	vmov	r3, s15
 8003808:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800380a:	e005      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	61bb      	str	r3, [r7, #24]
      break;
 8003810:	e002      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003812:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003814:	61bb      	str	r3, [r7, #24]
      break;
 8003816:	bf00      	nop
  }

  return sysclockfreq;
 8003818:	69bb      	ldr	r3, [r7, #24]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3724      	adds	r7, #36	@ 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	58024400 	.word	0x58024400
 800382c:	03d09000 	.word	0x03d09000
 8003830:	003d0900 	.word	0x003d0900
 8003834:	007a1200 	.word	0x007a1200
 8003838:	46000000 	.word	0x46000000
 800383c:	4c742400 	.word	0x4c742400
 8003840:	4a742400 	.word	0x4a742400
 8003844:	4af42400 	.word	0x4af42400

08003848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800384e:	f7ff fe81 	bl	8003554 <HAL_RCC_GetSysClockFreq>
 8003852:	4602      	mov	r2, r0
 8003854:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <HAL_RCC_GetHCLKFreq+0x50>)
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	490f      	ldr	r1, [pc, #60]	@ (800389c <HAL_RCC_GetHCLKFreq+0x54>)
 8003860:	5ccb      	ldrb	r3, [r1, r3]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800386c:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <HAL_RCC_GetHCLKFreq+0x50>)
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	4a09      	ldr	r2, [pc, #36]	@ (800389c <HAL_RCC_GetHCLKFreq+0x54>)
 8003876:	5cd3      	ldrb	r3, [r2, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a07      	ldr	r2, [pc, #28]	@ (80038a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003884:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003886:	4a07      	ldr	r2, [pc, #28]	@ (80038a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800388c:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	58024400 	.word	0x58024400
 800389c:	0800ad20 	.word	0x0800ad20
 80038a0:	24000004 	.word	0x24000004
 80038a4:	24000000 	.word	0x24000000

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80038ac:	f7ff ffcc 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4904      	ldr	r1, [pc, #16]	@ (80038d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	58024400 	.word	0x58024400
 80038d0:	0800ad20 	.word	0x0800ad20

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80038d8:	f7ff ffb6 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4904      	ldr	r1, [pc, #16]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	58024400 	.word	0x58024400
 80038fc:	0800ad20 	.word	0x0800ad20

08003900 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	223f      	movs	r2, #63	@ 0x3f
 800390e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003910:	4b1a      	ldr	r3, [pc, #104]	@ (800397c <HAL_RCC_GetClockConfig+0x7c>)
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	f003 0207 	and.w	r2, r3, #7
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800391c:	4b17      	ldr	r3, [pc, #92]	@ (800397c <HAL_RCC_GetClockConfig+0x7c>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <HAL_RCC_GetClockConfig+0x7c>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f003 020f 	and.w	r2, r3, #15
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003934:	4b11      	ldr	r3, [pc, #68]	@ (800397c <HAL_RCC_GetClockConfig+0x7c>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003940:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <HAL_RCC_GetClockConfig+0x7c>)
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800394c:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <HAL_RCC_GetClockConfig+0x7c>)
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003958:	4b08      	ldr	r3, [pc, #32]	@ (800397c <HAL_RCC_GetClockConfig+0x7c>)
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003964:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <HAL_RCC_GetClockConfig+0x80>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 020f 	and.w	r2, r3, #15
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	601a      	str	r2, [r3, #0]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	58024400 	.word	0x58024400
 8003980:	52002000 	.word	0x52002000

08003984 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003988:	b0ca      	sub	sp, #296	@ 0x128
 800398a:	af00      	add	r7, sp, #0
 800398c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003990:	2300      	movs	r3, #0
 8003992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003996:	2300      	movs	r3, #0
 8003998:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80039a8:	2500      	movs	r5, #0
 80039aa:	ea54 0305 	orrs.w	r3, r4, r5
 80039ae:	d049      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039ba:	d02f      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80039bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80039c0:	d828      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039c6:	d01a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80039cc:	d822      	bhi.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039d6:	d007      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039d8:	e01c      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039da:	4bb8      	ldr	r3, [pc, #736]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	4ab7      	ldr	r2, [pc, #732]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039e6:	e01a      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ec:	3308      	adds	r3, #8
 80039ee:	2102      	movs	r1, #2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 fc8f 	bl	8005314 <RCCEx_PLL2_Config>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039fc:	e00f      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	3328      	adds	r3, #40	@ 0x28
 8003a04:	2102      	movs	r1, #2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 fd36 	bl	8005478 <RCCEx_PLL3_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003a12:	e004      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10a      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a26:	4ba5      	ldr	r3, [pc, #660]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a34:	4aa1      	ldr	r2, [pc, #644]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a36:	430b      	orrs	r3, r1
 8003a38:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a3a:	e003      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a50:	f04f 0900 	mov.w	r9, #0
 8003a54:	ea58 0309 	orrs.w	r3, r8, r9
 8003a58:	d047      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a60:	2b04      	cmp	r3, #4
 8003a62:	d82a      	bhi.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a64:	a201      	add	r2, pc, #4	@ (adr r2, 8003a6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a81 	.word	0x08003a81
 8003a70:	08003a8f 	.word	0x08003a8f
 8003a74:	08003aa5 	.word	0x08003aa5
 8003a78:	08003ac3 	.word	0x08003ac3
 8003a7c:	08003ac3 	.word	0x08003ac3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a80:	4b8e      	ldr	r3, [pc, #568]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	4a8d      	ldr	r2, [pc, #564]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a8c:	e01a      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a92:	3308      	adds	r3, #8
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 fc3c 	bl	8005314 <RCCEx_PLL2_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003aa2:	e00f      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa8:	3328      	adds	r3, #40	@ 0x28
 8003aaa:	2100      	movs	r1, #0
 8003aac:	4618      	mov	r0, r3
 8003aae:	f001 fce3 	bl	8005478 <RCCEx_PLL3_Config>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ab8:	e004      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003acc:	4b7b      	ldr	r3, [pc, #492]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad0:	f023 0107 	bic.w	r1, r3, #7
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	4a78      	ldr	r2, [pc, #480]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ae0:	e003      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ae6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003af6:	f04f 0b00 	mov.w	fp, #0
 8003afa:	ea5a 030b 	orrs.w	r3, sl, fp
 8003afe:	d04c      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b0a:	d030      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b10:	d829      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b14:	d02d      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b16:	2bc0      	cmp	r3, #192	@ 0xc0
 8003b18:	d825      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b1a:	2b80      	cmp	r3, #128	@ 0x80
 8003b1c:	d018      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003b1e:	2b80      	cmp	r3, #128	@ 0x80
 8003b20:	d821      	bhi.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003b26:	2b40      	cmp	r3, #64	@ 0x40
 8003b28:	d007      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003b2a:	e01c      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b2c:	4b63      	ldr	r3, [pc, #396]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b30:	4a62      	ldr	r2, [pc, #392]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b38:	e01c      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b3e:	3308      	adds	r3, #8
 8003b40:	2100      	movs	r1, #0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f001 fbe6 	bl	8005314 <RCCEx_PLL2_Config>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b4e:	e011      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b54:	3328      	adds	r3, #40	@ 0x28
 8003b56:	2100      	movs	r1, #0
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 fc8d 	bl	8005478 <RCCEx_PLL3_Config>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b64:	e006      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10a      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b7c:	4b4f      	ldr	r3, [pc, #316]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b80:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8a:	4a4c      	ldr	r2, [pc, #304]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b90:	e003      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003ba6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003baa:	2300      	movs	r3, #0
 8003bac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003bb0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	d053      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003bc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bc6:	d035      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003bc8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003bcc:	d82e      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bd2:	d031      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003bd4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003bd8:	d828      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bde:	d01a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003be0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be4:	d822      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bee:	d007      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003bf0:	e01c      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf2:	4b32      	ldr	r3, [pc, #200]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf6:	4a31      	ldr	r2, [pc, #196]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bfe:	e01c      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c04:	3308      	adds	r3, #8
 8003c06:	2100      	movs	r1, #0
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 fb83 	bl	8005314 <RCCEx_PLL2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003c14:	e011      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1a:	3328      	adds	r3, #40	@ 0x28
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 fc2a 	bl	8005478 <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c2a:	e006      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c34:	bf00      	nop
 8003c36:	e000      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c42:	4b1e      	ldr	r3, [pc, #120]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c46:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c52:	4a1a      	ldr	r2, [pc, #104]	@ (8003cbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c58:	e003      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c78:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	d056      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c8a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c8e:	d038      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c94:	d831      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c9a:	d034      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ca0:	d82b      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ca2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ca6:	d01d      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ca8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003cac:	d825      	bhi.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d006      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003cb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003cb8:	e01f      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003cba:	bf00      	nop
 8003cbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc0:	4ba2      	ldr	r3, [pc, #648]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	4aa1      	ldr	r2, [pc, #644]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e01c      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fb1c 	bl	8005314 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ce2:	e011      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	3328      	adds	r3, #40	@ 0x28
 8003cea:	2100      	movs	r1, #0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fbc3 	bl	8005478 <RCCEx_PLL3_Config>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cf8:	e006      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d00:	e002      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003d06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003d10:	4b8e      	ldr	r3, [pc, #568]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d14:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003d20:	4a8a      	ldr	r2, [pc, #552]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d22:	430b      	orrs	r3, r1
 8003d24:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d26:	e003      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d38:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d03a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d56:	2b30      	cmp	r3, #48	@ 0x30
 8003d58:	d01f      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d5a:	2b30      	cmp	r3, #48	@ 0x30
 8003d5c:	d819      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	d00c      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d62:	2b20      	cmp	r3, #32
 8003d64:	d815      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d019      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d111      	bne.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d6e:	4b77      	ldr	r3, [pc, #476]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d72:	4a76      	ldr	r2, [pc, #472]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d7a:	e011      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d80:	3308      	adds	r3, #8
 8003d82:	2102      	movs	r1, #2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 fac5 	bl	8005314 <RCCEx_PLL2_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d90:	e006      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d98:	e002      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003da8:	4b68      	ldr	r3, [pc, #416]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003db6:	4a65      	ldr	r2, [pc, #404]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dbc:	e003      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003dd2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d051      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003df0:	d035      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003df6:	d82e      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003df8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dfc:	d031      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003dfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003e02:	d828      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e08:	d01a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003e0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e0e:	d822      	bhi.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e18:	d007      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003e1a:	e01c      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e20:	4a4a      	ldr	r2, [pc, #296]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e28:	e01c      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	3308      	adds	r3, #8
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f001 fa6e 	bl	8005314 <RCCEx_PLL2_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e3e:	e011      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e44:	3328      	adds	r3, #40	@ 0x28
 8003e46:	2100      	movs	r1, #0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f001 fb15 	bl	8005478 <RCCEx_PLL3_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e54:	e006      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e5c:	e002      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10a      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e6c:	4b37      	ldr	r3, [pc, #220]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e70:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e7a:	4a34      	ldr	r2, [pc, #208]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003ea0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	d056      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003eb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eb4:	d033      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003eb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eba:	d82c      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ebc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ec0:	d02f      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003ec2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ec6:	d826      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ec8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ecc:	d02b      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003ece:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ed2:	d820      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ed8:	d012      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003eda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ede:	d81a      	bhi.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d022      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee8:	d115      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eee:	3308      	adds	r3, #8
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 fa0e 	bl	8005314 <RCCEx_PLL2_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003efe:	e015      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f04:	3328      	adds	r3, #40	@ 0x28
 8003f06:	2101      	movs	r1, #1
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 fab5 	bl	8005478 <RCCEx_PLL3_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003f14:	e00a      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f1c:	e006      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f1e:	bf00      	nop
 8003f20:	e004      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f22:	bf00      	nop
 8003f24:	e002      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f26:	bf00      	nop
 8003f28:	e000      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10d      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003f34:	4b05      	ldr	r3, [pc, #20]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f38:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f42:	4a02      	ldr	r2, [pc, #8]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f4a:	bf00      	nop
 8003f4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4313      	orrs	r3, r2
 8003f76:	d055      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f84:	d033      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f8a:	d82c      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f90:	d02f      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f96:	d826      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f9c:	d02b      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003fa2:	d820      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fa8:	d012      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fae:	d81a      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d022      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003fb8:	d115      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f001 f9a6 	bl	8005314 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fce:	e015      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	3328      	adds	r3, #40	@ 0x28
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 fa4d 	bl	8005478 <RCCEx_PLL3_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e00a      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fec:	e006      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fee:	bf00      	nop
 8003ff0:	e004      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10b      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004004:	4ba3      	ldr	r3, [pc, #652]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004008:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004014:	4a9f      	ldr	r2, [pc, #636]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004016:	430b      	orrs	r3, r1
 8004018:	6593      	str	r3, [r2, #88]	@ 0x58
 800401a:	e003      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004020:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004034:	2300      	movs	r3, #0
 8004036:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800403a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800403e:	460b      	mov	r3, r1
 8004040:	4313      	orrs	r3, r2
 8004042:	d037      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800404e:	d00e      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004054:	d816      	bhi.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004056:	2b00      	cmp	r3, #0
 8004058:	d018      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800405a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800405e:	d111      	bne.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004060:	4b8c      	ldr	r3, [pc, #560]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	4a8b      	ldr	r2, [pc, #556]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800406a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800406c:	e00f      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	3308      	adds	r3, #8
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f001 f94c 	bl	8005314 <RCCEx_PLL2_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004082:	e004      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800408a:	e000      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800408c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10a      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004096:	4b7f      	ldr	r3, [pc, #508]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a4:	4a7b      	ldr	r2, [pc, #492]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040a6:	430b      	orrs	r3, r1
 80040a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80040aa:	e003      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80040c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80040ca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d039      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d81c      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80040de:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	08004121 	.word	0x08004121
 80040e8:	080040f5 	.word	0x080040f5
 80040ec:	08004103 	.word	0x08004103
 80040f0:	08004121 	.word	0x08004121
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f4:	4b67      	ldr	r3, [pc, #412]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	4a66      	ldr	r2, [pc, #408]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004100:	e00f      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	3308      	adds	r3, #8
 8004108:	2102      	movs	r1, #2
 800410a:	4618      	mov	r0, r3
 800410c:	f001 f902 	bl	8005314 <RCCEx_PLL2_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004116:	e004      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800412a:	4b5a      	ldr	r3, [pc, #360]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800412e:	f023 0103 	bic.w	r1, r3, #3
 8004132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004138:	4a56      	ldr	r2, [pc, #344]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800413a:	430b      	orrs	r3, r1
 800413c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800413e:	e003      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004154:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004158:	2300      	movs	r3, #0
 800415a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800415e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004162:	460b      	mov	r3, r1
 8004164:	4313      	orrs	r3, r2
 8004166:	f000 809f 	beq.w	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800416a:	4b4b      	ldr	r3, [pc, #300]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a4a      	ldr	r2, [pc, #296]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004174:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004176:	f7fd f935 	bl	80013e4 <HAL_GetTick>
 800417a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800417e:	e00b      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004180:	f7fd f930 	bl	80013e4 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b64      	cmp	r3, #100	@ 0x64
 800418e:	d903      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004196:	e005      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004198:	4b3f      	ldr	r3, [pc, #252]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ed      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80041a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d179      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80041ac:	4b39      	ldr	r3, [pc, #228]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041b8:	4053      	eors	r3, r2
 80041ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d015      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041c2:	4b34      	ldr	r3, [pc, #208]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041ce:	4b31      	ldr	r3, [pc, #196]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d2:	4a30      	ldr	r2, [pc, #192]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041da:	4b2e      	ldr	r3, [pc, #184]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041de:	4a2d      	ldr	r2, [pc, #180]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041e4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041e6:	4a2b      	ldr	r2, [pc, #172]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041ec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fa:	d118      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd f8f2 	bl	80013e4 <HAL_GetTick>
 8004200:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004204:	e00d      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fd f8ed 	bl	80013e4 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004210:	1ad2      	subs	r2, r2, r3
 8004212:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004216:	429a      	cmp	r2, r3
 8004218:	d903      	bls.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004220:	e005      	b.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004222:	4b1c      	ldr	r3, [pc, #112]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0eb      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800422e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004232:	2b00      	cmp	r3, #0
 8004234:	d129      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800423e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004246:	d10e      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004248:	4b12      	ldr	r3, [pc, #72]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004258:	091a      	lsrs	r2, r3, #4
 800425a:	4b10      	ldr	r3, [pc, #64]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800425c:	4013      	ands	r3, r2
 800425e:	4a0d      	ldr	r2, [pc, #52]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6113      	str	r3, [r2, #16]
 8004264:	e005      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004266:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4a0a      	ldr	r2, [pc, #40]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800426c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004270:	6113      	str	r3, [r2, #16]
 8004272:	4b08      	ldr	r3, [pc, #32]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004274:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800427e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004282:	4a04      	ldr	r2, [pc, #16]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004284:	430b      	orrs	r3, r1
 8004286:	6713      	str	r3, [r2, #112]	@ 0x70
 8004288:	e00e      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800428a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004292:	e009      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004294:	58024400 	.word	0x58024400
 8004298:	58024800 	.word	0x58024800
 800429c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b0:	f002 0301 	and.w	r3, r2, #1
 80042b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042be:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f000 8089 	beq.w	80043dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042d0:	2b28      	cmp	r3, #40	@ 0x28
 80042d2:	d86b      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80042d4:	a201      	add	r2, pc, #4	@ (adr r2, 80042dc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	080043b5 	.word	0x080043b5
 80042e0:	080043ad 	.word	0x080043ad
 80042e4:	080043ad 	.word	0x080043ad
 80042e8:	080043ad 	.word	0x080043ad
 80042ec:	080043ad 	.word	0x080043ad
 80042f0:	080043ad 	.word	0x080043ad
 80042f4:	080043ad 	.word	0x080043ad
 80042f8:	080043ad 	.word	0x080043ad
 80042fc:	08004381 	.word	0x08004381
 8004300:	080043ad 	.word	0x080043ad
 8004304:	080043ad 	.word	0x080043ad
 8004308:	080043ad 	.word	0x080043ad
 800430c:	080043ad 	.word	0x080043ad
 8004310:	080043ad 	.word	0x080043ad
 8004314:	080043ad 	.word	0x080043ad
 8004318:	080043ad 	.word	0x080043ad
 800431c:	08004397 	.word	0x08004397
 8004320:	080043ad 	.word	0x080043ad
 8004324:	080043ad 	.word	0x080043ad
 8004328:	080043ad 	.word	0x080043ad
 800432c:	080043ad 	.word	0x080043ad
 8004330:	080043ad 	.word	0x080043ad
 8004334:	080043ad 	.word	0x080043ad
 8004338:	080043ad 	.word	0x080043ad
 800433c:	080043b5 	.word	0x080043b5
 8004340:	080043ad 	.word	0x080043ad
 8004344:	080043ad 	.word	0x080043ad
 8004348:	080043ad 	.word	0x080043ad
 800434c:	080043ad 	.word	0x080043ad
 8004350:	080043ad 	.word	0x080043ad
 8004354:	080043ad 	.word	0x080043ad
 8004358:	080043ad 	.word	0x080043ad
 800435c:	080043b5 	.word	0x080043b5
 8004360:	080043ad 	.word	0x080043ad
 8004364:	080043ad 	.word	0x080043ad
 8004368:	080043ad 	.word	0x080043ad
 800436c:	080043ad 	.word	0x080043ad
 8004370:	080043ad 	.word	0x080043ad
 8004374:	080043ad 	.word	0x080043ad
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043b5 	.word	0x080043b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004384:	3308      	adds	r3, #8
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f000 ffc3 	bl	8005314 <RCCEx_PLL2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004394:	e00f      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	3328      	adds	r3, #40	@ 0x28
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 f86a 	bl	8005478 <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80043b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80043be:	4bbf      	ldr	r3, [pc, #764]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043cc:	4abb      	ldr	r2, [pc, #748]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80043ce:	430b      	orrs	r3, r1
 80043d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80043d2:	e003      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e4:	f002 0302 	and.w	r3, r2, #2
 80043e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043ec:	2300      	movs	r3, #0
 80043ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043f6:	460b      	mov	r3, r1
 80043f8:	4313      	orrs	r3, r2
 80043fa:	d041      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004402:	2b05      	cmp	r3, #5
 8004404:	d824      	bhi.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004406:	a201      	add	r2, pc, #4	@ (adr r2, 800440c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004459 	.word	0x08004459
 8004410:	08004425 	.word	0x08004425
 8004414:	0800443b 	.word	0x0800443b
 8004418:	08004459 	.word	0x08004459
 800441c:	08004459 	.word	0x08004459
 8004420:	08004459 	.word	0x08004459
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	3308      	adds	r3, #8
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f000 ff71 	bl	8005314 <RCCEx_PLL2_Config>
 8004432:	4603      	mov	r3, r0
 8004434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	3328      	adds	r3, #40	@ 0x28
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f818 	bl	8005478 <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800444e:	e004      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004456:	e000      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800445a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10a      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004462:	4b96      	ldr	r3, [pc, #600]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004466:	f023 0107 	bic.w	r1, r3, #7
 800446a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004470:	4a92      	ldr	r2, [pc, #584]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004472:	430b      	orrs	r3, r1
 8004474:	6553      	str	r3, [r2, #84]	@ 0x54
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800447c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	f002 0304 	and.w	r3, r2, #4
 800448c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004490:	2300      	movs	r3, #0
 8004492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004496:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800449a:	460b      	mov	r3, r1
 800449c:	4313      	orrs	r3, r2
 800449e:	d044      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	d825      	bhi.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80044ac:	a201      	add	r2, pc, #4	@ (adr r2, 80044b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	08004501 	.word	0x08004501
 80044b8:	080044cd 	.word	0x080044cd
 80044bc:	080044e3 	.word	0x080044e3
 80044c0:	08004501 	.word	0x08004501
 80044c4:	08004501 	.word	0x08004501
 80044c8:	08004501 	.word	0x08004501
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d0:	3308      	adds	r3, #8
 80044d2:	2101      	movs	r1, #1
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 ff1d 	bl	8005314 <RCCEx_PLL2_Config>
 80044da:	4603      	mov	r3, r0
 80044dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044e0:	e00f      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e6:	3328      	adds	r3, #40	@ 0x28
 80044e8:	2101      	movs	r1, #1
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 ffc4 	bl	8005478 <RCCEx_PLL3_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044f6:	e004      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800450a:	4b6c      	ldr	r3, [pc, #432]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	f023 0107 	bic.w	r1, r3, #7
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800451a:	4a68      	ldr	r2, [pc, #416]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800451c:	430b      	orrs	r3, r1
 800451e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004520:	e003      	b.n	800452a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004532:	f002 0320 	and.w	r3, r2, #32
 8004536:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800453a:	2300      	movs	r3, #0
 800453c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004540:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d055      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004552:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004556:	d033      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004558:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800455c:	d82c      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004562:	d02f      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004568:	d826      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800456a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800456e:	d02b      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004570:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004574:	d820      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800457a:	d012      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800457c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004580:	d81a      	bhi.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d022      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800458a:	d115      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004590:	3308      	adds	r3, #8
 8004592:	2100      	movs	r1, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f000 febd 	bl	8005314 <RCCEx_PLL2_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045a0:	e015      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	3328      	adds	r3, #40	@ 0x28
 80045a8:	2102      	movs	r1, #2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 ff64 	bl	8005478 <RCCEx_PLL3_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80045b6:	e00a      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045be:	e006      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045c0:	bf00      	nop
 80045c2:	e004      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045c4:	bf00      	nop
 80045c6:	e002      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045c8:	bf00      	nop
 80045ca:	e000      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80045cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045d6:	4b39      	ldr	r3, [pc, #228]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045e6:	4a35      	ldr	r2, [pc, #212]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80045ec:	e003      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004602:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004606:	2300      	movs	r3, #0
 8004608:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800460c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004610:	460b      	mov	r3, r1
 8004612:	4313      	orrs	r3, r2
 8004614:	d058      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800461e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004622:	d033      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004624:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004628:	d82c      	bhi.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800462a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800462e:	d02f      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004634:	d826      	bhi.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004636:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800463a:	d02b      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800463c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004640:	d820      	bhi.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004642:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004646:	d012      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800464c:	d81a      	bhi.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d022      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004656:	d115      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465c:	3308      	adds	r3, #8
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fe57 	bl	8005314 <RCCEx_PLL2_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800466c:	e015      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	3328      	adds	r3, #40	@ 0x28
 8004674:	2102      	movs	r1, #2
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fefe 	bl	8005478 <RCCEx_PLL3_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004682:	e00a      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800468a:	e006      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800468c:	bf00      	nop
 800468e:	e004      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004690:	bf00      	nop
 8004692:	e002      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004694:	bf00      	nop
 8004696:	e000      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10e      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046a2:	4b06      	ldr	r3, [pc, #24]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80046b2:	4a02      	ldr	r2, [pc, #8]	@ (80046bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046b8:	e006      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80046ba:	bf00      	nop
 80046bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80046d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046e2:	460b      	mov	r3, r1
 80046e4:	4313      	orrs	r3, r2
 80046e6:	d055      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046f4:	d033      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046fa:	d82c      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004700:	d02f      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004702:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004706:	d826      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004708:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800470c:	d02b      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800470e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004712:	d820      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004714:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004718:	d012      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800471a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800471e:	d81a      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d022      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004724:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004728:	d115      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472e:	3308      	adds	r3, #8
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fdee 	bl	8005314 <RCCEx_PLL2_Config>
 8004738:	4603      	mov	r3, r0
 800473a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800473e:	e015      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004744:	3328      	adds	r3, #40	@ 0x28
 8004746:	2102      	movs	r1, #2
 8004748:	4618      	mov	r0, r3
 800474a:	f000 fe95 	bl	8005478 <RCCEx_PLL3_Config>
 800474e:	4603      	mov	r3, r0
 8004750:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004754:	e00a      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800475c:	e006      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800475e:	bf00      	nop
 8004760:	e004      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004762:	bf00      	nop
 8004764:	e002      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004766:	bf00      	nop
 8004768:	e000      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800476a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004774:	4ba1      	ldr	r3, [pc, #644]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004778:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004784:	4a9d      	ldr	r2, [pc, #628]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004786:	430b      	orrs	r3, r1
 8004788:	6593      	str	r3, [r2, #88]	@ 0x58
 800478a:	e003      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f002 0308 	and.w	r3, r2, #8
 80047a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047a4:	2300      	movs	r3, #0
 80047a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80047aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80047ae:	460b      	mov	r3, r1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	d01e      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c0:	d10c      	bne.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	3328      	adds	r3, #40	@ 0x28
 80047c8:	2102      	movs	r1, #2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fe54 	bl	8005478 <RCCEx_PLL3_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d002      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047dc:	4b87      	ldr	r3, [pc, #540]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ec:	4a83      	ldr	r2, [pc, #524]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047ee:	430b      	orrs	r3, r1
 80047f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fa:	f002 0310 	and.w	r3, r2, #16
 80047fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004802:	2300      	movs	r3, #0
 8004804:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004808:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d01e      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004816:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800481a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800481e:	d10c      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004824:	3328      	adds	r3, #40	@ 0x28
 8004826:	2102      	movs	r1, #2
 8004828:	4618      	mov	r0, r3
 800482a:	f000 fe25 	bl	8005478 <RCCEx_PLL3_Config>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800483a:	4b70      	ldr	r3, [pc, #448]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004846:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800484a:	4a6c      	ldr	r2, [pc, #432]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800484c:	430b      	orrs	r3, r1
 800484e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004858:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800485c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004860:	2300      	movs	r3, #0
 8004862:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004866:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800486a:	460b      	mov	r3, r1
 800486c:	4313      	orrs	r3, r2
 800486e:	d03e      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004874:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800487c:	d022      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800487e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004882:	d81b      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800488c:	d00b      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800488e:	e015      	b.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004894:	3308      	adds	r3, #8
 8004896:	2100      	movs	r1, #0
 8004898:	4618      	mov	r0, r3
 800489a:	f000 fd3b 	bl	8005314 <RCCEx_PLL2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048a4:	e00f      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	3328      	adds	r3, #40	@ 0x28
 80048ac:	2102      	movs	r1, #2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fde2 	bl	8005478 <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80048ba:	e004      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80048c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048ce:	4b4b      	ldr	r3, [pc, #300]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048de:	4a47      	ldr	r2, [pc, #284]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80048e4:	e003      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048fc:	2300      	movs	r3, #0
 80048fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004900:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004904:	460b      	mov	r3, r1
 8004906:	4313      	orrs	r3, r2
 8004908:	d03b      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800490a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004912:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004916:	d01f      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004918:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800491c:	d818      	bhi.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800491e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004922:	d003      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004924:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004928:	d007      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800492a:	e011      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800492c:	4b33      	ldr	r3, [pc, #204]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	4a32      	ldr	r2, [pc, #200]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004936:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004938:	e00f      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800493a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493e:	3328      	adds	r3, #40	@ 0x28
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fd98 	bl	8005478 <RCCEx_PLL3_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800494e:	e004      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004956:	e000      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004958:	bf00      	nop
    }

    if (ret == HAL_OK)
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10b      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004962:	4b26      	ldr	r3, [pc, #152]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004966:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800496a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004972:	4a22      	ldr	r2, [pc, #136]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004974:	430b      	orrs	r3, r1
 8004976:	6553      	str	r3, [r2, #84]	@ 0x54
 8004978:	e003      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800497e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800498e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004990:	2300      	movs	r3, #0
 8004992:	677b      	str	r3, [r7, #116]	@ 0x74
 8004994:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d034      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800499e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80049a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049ac:	d007      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80049ae:	e011      	b.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049b0:	4b12      	ldr	r3, [pc, #72]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b4:	4a11      	ldr	r2, [pc, #68]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049bc:	e00e      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	3308      	adds	r3, #8
 80049c4:	2102      	movs	r1, #2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fca4 	bl	8005314 <RCCEx_PLL2_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80049d2:	e003      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10d      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f2:	4a02      	ldr	r2, [pc, #8]	@ (80049fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049f4:	430b      	orrs	r3, r1
 80049f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049f8:	e006      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049fa:	bf00      	nop
 80049fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004a14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a16:	2300      	movs	r3, #0
 8004a18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4313      	orrs	r3, r2
 8004a22:	d00c      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a28:	3328      	adds	r3, #40	@ 0x28
 8004a2a:	2102      	movs	r1, #2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fd23 	bl	8005478 <RCCEx_PLL3_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d038      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a66:	d018      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a6c:	d811      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a72:	d014      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a78:	d80b      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d011      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a82:	d106      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a84:	4bc3      	ldr	r3, [pc, #780]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a88:	4ac2      	ldr	r2, [pc, #776]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a90:	e008      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a98:	e004      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e002      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e000      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004aac:	4bb9      	ldr	r3, [pc, #740]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abc:	4ab5      	ldr	r2, [pc, #724]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ac2:	e003      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004ad8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ada:	2300      	movs	r3, #0
 8004adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ade:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	d009      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ae8:	4baa      	ldr	r3, [pc, #680]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af6:	4aa7      	ldr	r2, [pc, #668]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004b08:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004b12:	460b      	mov	r3, r1
 8004b14:	4313      	orrs	r3, r2
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004b18:	4b9e      	ldr	r3, [pc, #632]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004b28:	4a9a      	ldr	r2, [pc, #616]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b36:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b40:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b44:	460b      	mov	r3, r1
 8004b46:	4313      	orrs	r3, r2
 8004b48:	d009      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b4a:	4b92      	ldr	r3, [pc, #584]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b4e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b58:	4a8e      	ldr	r2, [pc, #568]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5a:	430b      	orrs	r3, r1
 8004b5c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b66:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b70:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b74:	460b      	mov	r3, r1
 8004b76:	4313      	orrs	r3, r2
 8004b78:	d00e      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b7a:	4b86      	ldr	r3, [pc, #536]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	4a85      	ldr	r2, [pc, #532]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b80:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b84:	6113      	str	r3, [r2, #16]
 8004b86:	4b83      	ldr	r3, [pc, #524]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b88:	6919      	ldr	r1, [r3, #16]
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b92:	4a80      	ldr	r2, [pc, #512]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004baa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004bae:	460b      	mov	r3, r1
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004bb4:	4b77      	ldr	r3, [pc, #476]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc2:	4a74      	ldr	r2, [pc, #464]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bc4:	430b      	orrs	r3, r1
 8004bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004bd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004bde:	460b      	mov	r3, r1
 8004be0:	4313      	orrs	r3, r2
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004be4:	4b6b      	ldr	r3, [pc, #428]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bf4:	4a67      	ldr	r2, [pc, #412]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c02:	2100      	movs	r1, #0
 8004c04:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004c10:	460b      	mov	r3, r1
 8004c12:	4313      	orrs	r3, r2
 8004c14:	d011      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fb78 	bl	8005314 <RCCEx_PLL2_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	2100      	movs	r1, #0
 8004c44:	6239      	str	r1, [r7, #32]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c50:	460b      	mov	r3, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d011      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fb58 	bl	8005314 <RCCEx_PLL2_Config>
 8004c64:	4603      	mov	r3, r0
 8004c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	2100      	movs	r1, #0
 8004c84:	61b9      	str	r1, [r7, #24]
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	61fb      	str	r3, [r7, #28]
 8004c8c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c90:	460b      	mov	r3, r1
 8004c92:	4313      	orrs	r3, r2
 8004c94:	d011      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9a:	3308      	adds	r3, #8
 8004c9c:	2102      	movs	r1, #2
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f000 fb38 	bl	8005314 <RCCEx_PLL2_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	6139      	str	r1, [r7, #16]
 8004cc6:	f003 0308 	and.w	r3, r3, #8
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	d011      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cda:	3328      	adds	r3, #40	@ 0x28
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fbca 	bl	8005478 <RCCEx_PLL3_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d02:	2100      	movs	r1, #0
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	f003 0310 	and.w	r3, r3, #16
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004d10:	460b      	mov	r3, r1
 8004d12:	4313      	orrs	r3, r2
 8004d14:	d011      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1a:	3328      	adds	r3, #40	@ 0x28
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 fbaa 	bl	8005478 <RCCEx_PLL3_Config>
 8004d24:	4603      	mov	r3, r0
 8004d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	2100      	movs	r1, #0
 8004d44:	6039      	str	r1, [r7, #0]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d50:	460b      	mov	r3, r1
 8004d52:	4313      	orrs	r3, r2
 8004d54:	d011      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5a:	3328      	adds	r3, #40	@ 0x28
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 fb8a 	bl	8005478 <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004d7a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	e000      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d94:	58024400 	.word	0x58024400

08004d98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d9c:	f7fe fd54 	bl	8003848 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	091b      	lsrs	r3, r3, #4
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4904      	ldr	r1, [pc, #16]	@ (8004dc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	58024400 	.word	0x58024400
 8004dc0:	0800ad20 	.word	0x0800ad20

08004dc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b089      	sub	sp, #36	@ 0x24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004dcc:	4ba1      	ldr	r3, [pc, #644]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	f003 0303 	and.w	r3, r3, #3
 8004dd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004dd6:	4b9f      	ldr	r3, [pc, #636]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	0b1b      	lsrs	r3, r3, #12
 8004ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004de0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004de2:	4b9c      	ldr	r3, [pc, #624]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004dee:	4b99      	ldr	r3, [pc, #612]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 8111 	beq.w	8005034 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	f000 8083 	beq.w	8004f20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	f200 80a1 	bhi.w	8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d056      	beq.n	8004edc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004e2e:	e099      	b.n	8004f64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e30:	4b88      	ldr	r3, [pc, #544]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d02d      	beq.n	8004e98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e3c:	4b85      	ldr	r3, [pc, #532]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	08db      	lsrs	r3, r3, #3
 8004e42:	f003 0303 	and.w	r3, r3, #3
 8004e46:	4a84      	ldr	r2, [pc, #528]	@ (8005058 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004e48:	fa22 f303 	lsr.w	r3, r2, r3
 8004e4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	ee07 3a90 	vmov	s15, r3
 8004e54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	ee07 3a90 	vmov	s15, r3
 8004e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e66:	4b7b      	ldr	r3, [pc, #492]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e76:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e96:	e087      	b.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	ee07 3a90 	vmov	s15, r3
 8004e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005060 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eaa:	4b6a      	ldr	r3, [pc, #424]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ebe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eda:	e065      	b.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	ee07 3a90 	vmov	s15, r3
 8004ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eee:	4b59      	ldr	r3, [pc, #356]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f1e:	e043      	b.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	ee07 3a90 	vmov	s15, r3
 8004f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005068 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f32:	4b48      	ldr	r3, [pc, #288]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f3a:	ee07 3a90 	vmov	s15, r3
 8004f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f62:	e021      	b.n	8004fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005064 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f76:	4b37      	ldr	r3, [pc, #220]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f7e:	ee07 3a90 	vmov	s15, r3
 8004f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800505c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fa6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fac:	0a5b      	lsrs	r3, r3, #9
 8004fae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fb2:	ee07 3a90 	vmov	s15, r3
 8004fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fce:	ee17 2a90 	vmov	r2, s15
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fda:	0c1b      	lsrs	r3, r3, #16
 8004fdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fe0:	ee07 3a90 	vmov	s15, r3
 8004fe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004fec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ff0:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ff8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ffc:	ee17 2a90 	vmov	r2, s15
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005004:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	0e1b      	lsrs	r3, r3, #24
 800500a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800501a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800501e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800502a:	ee17 2a90 	vmov	r2, s15
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005032:	e008      	b.n	8005046 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
}
 8005046:	bf00      	nop
 8005048:	3724      	adds	r7, #36	@ 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	58024400 	.word	0x58024400
 8005058:	03d09000 	.word	0x03d09000
 800505c:	46000000 	.word	0x46000000
 8005060:	4c742400 	.word	0x4c742400
 8005064:	4a742400 	.word	0x4a742400
 8005068:	4af42400 	.word	0x4af42400

0800506c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	@ 0x24
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005074:	4ba1      	ldr	r3, [pc, #644]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800507e:	4b9f      	ldr	r3, [pc, #636]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	0d1b      	lsrs	r3, r3, #20
 8005084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005088:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800508a:	4b9c      	ldr	r3, [pc, #624]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	0a1b      	lsrs	r3, r3, #8
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005096:	4b99      	ldr	r3, [pc, #612]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509a:	08db      	lsrs	r3, r3, #3
 800509c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	fb02 f303 	mul.w	r3, r2, r3
 80050a6:	ee07 3a90 	vmov	s15, r3
 80050aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8111 	beq.w	80052dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	2b02      	cmp	r3, #2
 80050be:	f000 8083 	beq.w	80051c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	f200 80a1 	bhi.w	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d056      	beq.n	8005184 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80050d6:	e099      	b.n	800520c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d8:	4b88      	ldr	r3, [pc, #544]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d02d      	beq.n	8005140 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050e4:	4b85      	ldr	r3, [pc, #532]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	08db      	lsrs	r3, r3, #3
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	4a84      	ldr	r2, [pc, #528]	@ (8005300 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
 80050f4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	ee07 3a90 	vmov	s15, r3
 80050fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510e:	4b7b      	ldr	r3, [pc, #492]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800511e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005122:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800512e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800513e:	e087      	b.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005308 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005152:	4b6a      	ldr	r3, [pc, #424]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005162:	ed97 6a03 	vldr	s12, [r7, #12]
 8005166:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005182:	e065      	b.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800530c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005196:	4b59      	ldr	r3, [pc, #356]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80051aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051c6:	e043      	b.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005310 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80051d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051da:	4b48      	ldr	r3, [pc, #288]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80051ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520a:	e021      	b.n	8005250 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800530c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800521a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800521e:	4b37      	ldr	r3, [pc, #220]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800522e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005232:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800523a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800523e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800524a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800524e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005250:	4b2a      	ldr	r3, [pc, #168]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	0a5b      	lsrs	r3, r3, #9
 8005256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005266:	ee37 7a87 	vadd.f32	s14, s15, s14
 800526a:	edd7 6a07 	vldr	s13, [r7, #28]
 800526e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005272:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005276:	ee17 2a90 	vmov	r2, s15
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800527e:	4b1f      	ldr	r3, [pc, #124]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	0c1b      	lsrs	r3, r3, #16
 8005284:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005288:	ee07 3a90 	vmov	s15, r3
 800528c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005290:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005294:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005298:	edd7 6a07 	vldr	s13, [r7, #28]
 800529c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a4:	ee17 2a90 	vmov	r2, s15
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80052ac:	4b13      	ldr	r3, [pc, #76]	@ (80052fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b0:	0e1b      	lsrs	r3, r3, #24
 80052b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052b6:	ee07 3a90 	vmov	s15, r3
 80052ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80052ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d2:	ee17 2a90 	vmov	r2, s15
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80052da:	e008      	b.n	80052ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	609a      	str	r2, [r3, #8]
}
 80052ee:	bf00      	nop
 80052f0:	3724      	adds	r7, #36	@ 0x24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	58024400 	.word	0x58024400
 8005300:	03d09000 	.word	0x03d09000
 8005304:	46000000 	.word	0x46000000
 8005308:	4c742400 	.word	0x4c742400
 800530c:	4a742400 	.word	0x4a742400
 8005310:	4af42400 	.word	0x4af42400

08005314 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005322:	4b53      	ldr	r3, [pc, #332]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b03      	cmp	r3, #3
 800532c:	d101      	bne.n	8005332 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e099      	b.n	8005466 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005332:	4b4f      	ldr	r3, [pc, #316]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4e      	ldr	r2, [pc, #312]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005338:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800533c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533e:	f7fc f851 	bl	80013e4 <HAL_GetTick>
 8005342:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005344:	e008      	b.n	8005358 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005346:	f7fc f84d 	bl	80013e4 <HAL_GetTick>
 800534a:	4602      	mov	r2, r0
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	2b02      	cmp	r3, #2
 8005352:	d901      	bls.n	8005358 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e086      	b.n	8005466 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005358:	4b45      	ldr	r3, [pc, #276]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f0      	bne.n	8005346 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005364:	4b42      	ldr	r3, [pc, #264]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	031b      	lsls	r3, r3, #12
 8005372:	493f      	ldr	r1, [pc, #252]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005374:	4313      	orrs	r3, r2
 8005376:	628b      	str	r3, [r1, #40]	@ 0x28
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	3b01      	subs	r3, #1
 800537e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	3b01      	subs	r3, #1
 8005388:	025b      	lsls	r3, r3, #9
 800538a:	b29b      	uxth	r3, r3
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	3b01      	subs	r3, #1
 8005394:	041b      	lsls	r3, r3, #16
 8005396:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	3b01      	subs	r3, #1
 80053a2:	061b      	lsls	r3, r3, #24
 80053a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80053a8:	4931      	ldr	r1, [pc, #196]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80053ae:	4b30      	ldr	r3, [pc, #192]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	492d      	ldr	r1, [pc, #180]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80053c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	f023 0220 	bic.w	r2, r3, #32
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	4928      	ldr	r1, [pc, #160]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80053d2:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	4a26      	ldr	r2, [pc, #152]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053d8:	f023 0310 	bic.w	r3, r3, #16
 80053dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80053de:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053e2:	4b24      	ldr	r3, [pc, #144]	@ (8005474 <RCCEx_PLL2_Config+0x160>)
 80053e4:	4013      	ands	r3, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	69d2      	ldr	r2, [r2, #28]
 80053ea:	00d2      	lsls	r2, r2, #3
 80053ec:	4920      	ldr	r1, [pc, #128]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 80053f8:	f043 0310 	orr.w	r3, r3, #16
 80053fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005404:	4b1a      	ldr	r3, [pc, #104]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005408:	4a19      	ldr	r2, [pc, #100]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800540a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800540e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005410:	e00f      	b.n	8005432 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d106      	bne.n	8005426 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005418:	4b15      	ldr	r3, [pc, #84]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	4a14      	ldr	r2, [pc, #80]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800541e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005422:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005424:	e005      	b.n	8005432 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005426:	4b12      	ldr	r3, [pc, #72]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542a:	4a11      	ldr	r2, [pc, #68]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800542c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005430:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005432:	4b0f      	ldr	r3, [pc, #60]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a0e      	ldr	r2, [pc, #56]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 8005438:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800543c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543e:	f7fb ffd1 	bl	80013e4 <HAL_GetTick>
 8005442:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005444:	e008      	b.n	8005458 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005446:	f7fb ffcd 	bl	80013e4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e006      	b.n	8005466 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005458:	4b05      	ldr	r3, [pc, #20]	@ (8005470 <RCCEx_PLL2_Config+0x15c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0f0      	beq.n	8005446 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005464:	7bfb      	ldrb	r3, [r7, #15]
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400
 8005474:	ffff0007 	.word	0xffff0007

08005478 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005486:	4b53      	ldr	r3, [pc, #332]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	2b03      	cmp	r3, #3
 8005490:	d101      	bne.n	8005496 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e099      	b.n	80055ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005496:	4b4f      	ldr	r3, [pc, #316]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a4e      	ldr	r2, [pc, #312]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800549c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a2:	f7fb ff9f 	bl	80013e4 <HAL_GetTick>
 80054a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054a8:	e008      	b.n	80054bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80054aa:	f7fb ff9b 	bl	80013e4 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e086      	b.n	80055ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80054bc:	4b45      	ldr	r3, [pc, #276]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80054c8:	4b42      	ldr	r3, [pc, #264]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	051b      	lsls	r3, r3, #20
 80054d6:	493f      	ldr	r1, [pc, #252]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	628b      	str	r3, [r1, #40]	@ 0x28
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	3b01      	subs	r3, #1
 80054ec:	025b      	lsls	r3, r3, #9
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	3b01      	subs	r3, #1
 80054f8:	041b      	lsls	r3, r3, #16
 80054fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	3b01      	subs	r3, #1
 8005506:	061b      	lsls	r3, r3, #24
 8005508:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800550c:	4931      	ldr	r1, [pc, #196]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800550e:	4313      	orrs	r3, r2
 8005510:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005512:	4b30      	ldr	r3, [pc, #192]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005516:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	492d      	ldr	r1, [pc, #180]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005520:	4313      	orrs	r3, r2
 8005522:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005524:	4b2b      	ldr	r3, [pc, #172]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005528:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	4928      	ldr	r1, [pc, #160]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005532:	4313      	orrs	r3, r2
 8005534:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005536:	4b27      	ldr	r3, [pc, #156]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800553a:	4a26      	ldr	r2, [pc, #152]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800553c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005540:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005542:	4b24      	ldr	r3, [pc, #144]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005546:	4b24      	ldr	r3, [pc, #144]	@ (80055d8 <RCCEx_PLL3_Config+0x160>)
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	69d2      	ldr	r2, [r2, #28]
 800554e:	00d2      	lsls	r2, r2, #3
 8005550:	4920      	ldr	r1, [pc, #128]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005552:	4313      	orrs	r3, r2
 8005554:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005556:	4b1f      	ldr	r3, [pc, #124]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	4a1e      	ldr	r2, [pc, #120]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800555c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005568:	4b1a      	ldr	r3, [pc, #104]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800556a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800556c:	4a19      	ldr	r2, [pc, #100]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800556e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005572:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005574:	e00f      	b.n	8005596 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d106      	bne.n	800558a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800557c:	4b15      	ldr	r3, [pc, #84]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	4a14      	ldr	r2, [pc, #80]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005582:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005586:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005588:	e005      	b.n	8005596 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800558a:	4b12      	ldr	r3, [pc, #72]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800558c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558e:	4a11      	ldr	r2, [pc, #68]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005590:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005594:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005596:	4b0f      	ldr	r3, [pc, #60]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a0e      	ldr	r2, [pc, #56]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 800559c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a2:	f7fb ff1f 	bl	80013e4 <HAL_GetTick>
 80055a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055a8:	e008      	b.n	80055bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80055aa:	f7fb ff1b 	bl	80013e4 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e006      	b.n	80055ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80055bc:	4b05      	ldr	r3, [pc, #20]	@ (80055d4 <RCCEx_PLL3_Config+0x15c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0f0      	beq.n	80055aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	58024400 	.word	0x58024400
 80055d8:	ffff0007 	.word	0xffff0007

080055dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e049      	b.n	8005682 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f841 	bl	800568a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f000 f9e8 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005692:	bf00      	nop
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d001      	beq.n	80056b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e054      	b.n	8005762 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a26      	ldr	r2, [pc, #152]	@ (8005770 <HAL_TIM_Base_Start_IT+0xd0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d022      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x80>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e2:	d01d      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x80>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a22      	ldr	r2, [pc, #136]	@ (8005774 <HAL_TIM_Base_Start_IT+0xd4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d018      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x80>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a21      	ldr	r2, [pc, #132]	@ (8005778 <HAL_TIM_Base_Start_IT+0xd8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d013      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x80>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1f      	ldr	r2, [pc, #124]	@ (800577c <HAL_TIM_Base_Start_IT+0xdc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00e      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x80>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1e      	ldr	r2, [pc, #120]	@ (8005780 <HAL_TIM_Base_Start_IT+0xe0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x80>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1c      	ldr	r2, [pc, #112]	@ (8005784 <HAL_TIM_Base_Start_IT+0xe4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <HAL_TIM_Base_Start_IT+0x80>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1b      	ldr	r2, [pc, #108]	@ (8005788 <HAL_TIM_Base_Start_IT+0xe8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d115      	bne.n	800574c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	4b19      	ldr	r3, [pc, #100]	@ (800578c <HAL_TIM_Base_Start_IT+0xec>)
 8005728:	4013      	ands	r3, r2
 800572a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2b06      	cmp	r3, #6
 8005730:	d015      	beq.n	800575e <HAL_TIM_Base_Start_IT+0xbe>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005738:	d011      	beq.n	800575e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	e008      	b.n	800575e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e000      	b.n	8005760 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3714      	adds	r7, #20
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40000400 	.word	0x40000400
 8005778:	40000800 	.word	0x40000800
 800577c:	40000c00 	.word	0x40000c00
 8005780:	40010400 	.word	0x40010400
 8005784:	40001800 	.word	0x40001800
 8005788:	40014000 	.word	0x40014000
 800578c:	00010007 	.word	0x00010007

08005790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d020      	beq.n	80057f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01b      	beq.n	80057f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0202 	mvn.w	r2, #2
 80057c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d003      	beq.n	80057e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f8e9 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 80057e0:	e005      	b.n	80057ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8db 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f8ec 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0304 	and.w	r3, r3, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d020      	beq.n	8005840 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f003 0304 	and.w	r3, r3, #4
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01b      	beq.n	8005840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f06f 0204 	mvn.w	r2, #4
 8005810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2202      	movs	r2, #2
 8005816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699b      	ldr	r3, [r3, #24]
 800581e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8c3 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 800582c:	e005      	b.n	800583a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8b5 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f8c6 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b00      	cmp	r3, #0
 8005848:	d020      	beq.n	800588c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0308 	and.w	r3, r3, #8
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01b      	beq.n	800588c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0208 	mvn.w	r2, #8
 800585c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2204      	movs	r2, #4
 8005862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f89d 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 f88f 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f8a0 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	d020      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01b      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0210 	mvn.w	r2, #16
 80058a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2208      	movs	r2, #8
 80058ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f877 	bl	80059b2 <HAL_TIM_IC_CaptureCallback>
 80058c4:	e005      	b.n	80058d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f869 	bl	800599e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f87a 	bl	80059c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	f003 0301 	and.w	r3, r3, #1
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d007      	beq.n	80058fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f06f 0201 	mvn.w	r2, #1
 80058f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fb f9bc 	bl	8000c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b00      	cmp	r3, #0
 8005904:	d104      	bne.n	8005910 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00c      	beq.n	800592a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f913 	bl	8005b50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00c      	beq.n	800594e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f90b 	bl	8005b64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00c      	beq.n	8005972 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f834 	bl	80059da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f06f 0220 	mvn.w	r2, #32
 800598e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f8d3 	bl	8005b3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
	...

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a46      	ldr	r2, [pc, #280]	@ (8005b1c <TIM_Base_SetConfig+0x12c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a43      	ldr	r2, [pc, #268]	@ (8005b20 <TIM_Base_SetConfig+0x130>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a42      	ldr	r2, [pc, #264]	@ (8005b24 <TIM_Base_SetConfig+0x134>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a41      	ldr	r2, [pc, #260]	@ (8005b28 <TIM_Base_SetConfig+0x138>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a40      	ldr	r2, [pc, #256]	@ (8005b2c <TIM_Base_SetConfig+0x13c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d108      	bne.n	8005a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a35      	ldr	r2, [pc, #212]	@ (8005b1c <TIM_Base_SetConfig+0x12c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01f      	beq.n	8005a8a <TIM_Base_SetConfig+0x9a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a50:	d01b      	beq.n	8005a8a <TIM_Base_SetConfig+0x9a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a32      	ldr	r2, [pc, #200]	@ (8005b20 <TIM_Base_SetConfig+0x130>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d017      	beq.n	8005a8a <TIM_Base_SetConfig+0x9a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a31      	ldr	r2, [pc, #196]	@ (8005b24 <TIM_Base_SetConfig+0x134>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d013      	beq.n	8005a8a <TIM_Base_SetConfig+0x9a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a30      	ldr	r2, [pc, #192]	@ (8005b28 <TIM_Base_SetConfig+0x138>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00f      	beq.n	8005a8a <TIM_Base_SetConfig+0x9a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b2c <TIM_Base_SetConfig+0x13c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <TIM_Base_SetConfig+0x9a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2e      	ldr	r2, [pc, #184]	@ (8005b30 <TIM_Base_SetConfig+0x140>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d007      	beq.n	8005a8a <TIM_Base_SetConfig+0x9a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b34 <TIM_Base_SetConfig+0x144>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_Base_SetConfig+0x9a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a2c      	ldr	r2, [pc, #176]	@ (8005b38 <TIM_Base_SetConfig+0x148>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d108      	bne.n	8005a9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a16      	ldr	r2, [pc, #88]	@ (8005b1c <TIM_Base_SetConfig+0x12c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00f      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a18      	ldr	r2, [pc, #96]	@ (8005b2c <TIM_Base_SetConfig+0x13c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00b      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a17      	ldr	r2, [pc, #92]	@ (8005b30 <TIM_Base_SetConfig+0x140>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d007      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a16      	ldr	r2, [pc, #88]	@ (8005b34 <TIM_Base_SetConfig+0x144>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	@ (8005b38 <TIM_Base_SetConfig+0x148>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d105      	bne.n	8005b0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f023 0201 	bic.w	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	611a      	str	r2, [r3, #16]
  }
}
 8005b0e:	bf00      	nop
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40000800 	.word	0x40000800
 8005b28:	40000c00 	.word	0x40000c00
 8005b2c:	40010400 	.word	0x40010400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800

08005b3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e042      	b.n	8005c10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d106      	bne.n	8005ba2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f7fb f9b3 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2224      	movs	r2, #36	@ 0x24
 8005ba6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fd90 	bl	80066e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f825 	bl	8005c18 <UART_SetConfig>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e01b      	b.n	8005c10 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 fe0f 	bl	800682c <UART_CheckIdleState>
 8005c0e:	4603      	mov	r3, r0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c1c:	b092      	sub	sp, #72	@ 0x48
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	431a      	orrs	r2, r3
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	431a      	orrs	r2, r3
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4bbe      	ldr	r3, [pc, #760]	@ (8005f40 <UART_SetConfig+0x328>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4ab3      	ldr	r2, [pc, #716]	@ (8005f44 <UART_SetConfig+0x32c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d004      	beq.n	8005c84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c80:	4313      	orrs	r3, r2
 8005c82:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	4baf      	ldr	r3, [pc, #700]	@ (8005f48 <UART_SetConfig+0x330>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9e:	f023 010f 	bic.w	r1, r3, #15
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4aa6      	ldr	r2, [pc, #664]	@ (8005f4c <UART_SetConfig+0x334>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d177      	bne.n	8005da8 <UART_SetConfig+0x190>
 8005cb8:	4ba5      	ldr	r3, [pc, #660]	@ (8005f50 <UART_SetConfig+0x338>)
 8005cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cc0:	2b28      	cmp	r3, #40	@ 0x28
 8005cc2:	d86d      	bhi.n	8005da0 <UART_SetConfig+0x188>
 8005cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ccc <UART_SetConfig+0xb4>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005d71 	.word	0x08005d71
 8005cd0:	08005da1 	.word	0x08005da1
 8005cd4:	08005da1 	.word	0x08005da1
 8005cd8:	08005da1 	.word	0x08005da1
 8005cdc:	08005da1 	.word	0x08005da1
 8005ce0:	08005da1 	.word	0x08005da1
 8005ce4:	08005da1 	.word	0x08005da1
 8005ce8:	08005da1 	.word	0x08005da1
 8005cec:	08005d79 	.word	0x08005d79
 8005cf0:	08005da1 	.word	0x08005da1
 8005cf4:	08005da1 	.word	0x08005da1
 8005cf8:	08005da1 	.word	0x08005da1
 8005cfc:	08005da1 	.word	0x08005da1
 8005d00:	08005da1 	.word	0x08005da1
 8005d04:	08005da1 	.word	0x08005da1
 8005d08:	08005da1 	.word	0x08005da1
 8005d0c:	08005d81 	.word	0x08005d81
 8005d10:	08005da1 	.word	0x08005da1
 8005d14:	08005da1 	.word	0x08005da1
 8005d18:	08005da1 	.word	0x08005da1
 8005d1c:	08005da1 	.word	0x08005da1
 8005d20:	08005da1 	.word	0x08005da1
 8005d24:	08005da1 	.word	0x08005da1
 8005d28:	08005da1 	.word	0x08005da1
 8005d2c:	08005d89 	.word	0x08005d89
 8005d30:	08005da1 	.word	0x08005da1
 8005d34:	08005da1 	.word	0x08005da1
 8005d38:	08005da1 	.word	0x08005da1
 8005d3c:	08005da1 	.word	0x08005da1
 8005d40:	08005da1 	.word	0x08005da1
 8005d44:	08005da1 	.word	0x08005da1
 8005d48:	08005da1 	.word	0x08005da1
 8005d4c:	08005d91 	.word	0x08005d91
 8005d50:	08005da1 	.word	0x08005da1
 8005d54:	08005da1 	.word	0x08005da1
 8005d58:	08005da1 	.word	0x08005da1
 8005d5c:	08005da1 	.word	0x08005da1
 8005d60:	08005da1 	.word	0x08005da1
 8005d64:	08005da1 	.word	0x08005da1
 8005d68:	08005da1 	.word	0x08005da1
 8005d6c:	08005d99 	.word	0x08005d99
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e222      	b.n	80061be <UART_SetConfig+0x5a6>
 8005d78:	2304      	movs	r3, #4
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e21e      	b.n	80061be <UART_SetConfig+0x5a6>
 8005d80:	2308      	movs	r3, #8
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e21a      	b.n	80061be <UART_SetConfig+0x5a6>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e216      	b.n	80061be <UART_SetConfig+0x5a6>
 8005d90:	2320      	movs	r3, #32
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e212      	b.n	80061be <UART_SetConfig+0x5a6>
 8005d98:	2340      	movs	r3, #64	@ 0x40
 8005d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9e:	e20e      	b.n	80061be <UART_SetConfig+0x5a6>
 8005da0:	2380      	movs	r3, #128	@ 0x80
 8005da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da6:	e20a      	b.n	80061be <UART_SetConfig+0x5a6>
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a69      	ldr	r2, [pc, #420]	@ (8005f54 <UART_SetConfig+0x33c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d130      	bne.n	8005e14 <UART_SetConfig+0x1fc>
 8005db2:	4b67      	ldr	r3, [pc, #412]	@ (8005f50 <UART_SetConfig+0x338>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d826      	bhi.n	8005e0c <UART_SetConfig+0x1f4>
 8005dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <UART_SetConfig+0x1ac>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005ddd 	.word	0x08005ddd
 8005dc8:	08005de5 	.word	0x08005de5
 8005dcc:	08005ded 	.word	0x08005ded
 8005dd0:	08005df5 	.word	0x08005df5
 8005dd4:	08005dfd 	.word	0x08005dfd
 8005dd8:	08005e05 	.word	0x08005e05
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e1ec      	b.n	80061be <UART_SetConfig+0x5a6>
 8005de4:	2304      	movs	r3, #4
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e1e8      	b.n	80061be <UART_SetConfig+0x5a6>
 8005dec:	2308      	movs	r3, #8
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e1e4      	b.n	80061be <UART_SetConfig+0x5a6>
 8005df4:	2310      	movs	r3, #16
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e1e0      	b.n	80061be <UART_SetConfig+0x5a6>
 8005dfc:	2320      	movs	r3, #32
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e02:	e1dc      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e04:	2340      	movs	r3, #64	@ 0x40
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0a:	e1d8      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e12:	e1d4      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a4f      	ldr	r2, [pc, #316]	@ (8005f58 <UART_SetConfig+0x340>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d130      	bne.n	8005e80 <UART_SetConfig+0x268>
 8005e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8005f50 <UART_SetConfig+0x338>)
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	2b05      	cmp	r3, #5
 8005e28:	d826      	bhi.n	8005e78 <UART_SetConfig+0x260>
 8005e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <UART_SetConfig+0x218>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e49 	.word	0x08005e49
 8005e34:	08005e51 	.word	0x08005e51
 8005e38:	08005e59 	.word	0x08005e59
 8005e3c:	08005e61 	.word	0x08005e61
 8005e40:	08005e69 	.word	0x08005e69
 8005e44:	08005e71 	.word	0x08005e71
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e1b6      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e50:	2304      	movs	r3, #4
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e1b2      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e58:	2308      	movs	r3, #8
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5e:	e1ae      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e60:	2310      	movs	r3, #16
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e1aa      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e68:	2320      	movs	r3, #32
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6e:	e1a6      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e70:	2340      	movs	r3, #64	@ 0x40
 8005e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e76:	e1a2      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e78:	2380      	movs	r3, #128	@ 0x80
 8005e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7e:	e19e      	b.n	80061be <UART_SetConfig+0x5a6>
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a35      	ldr	r2, [pc, #212]	@ (8005f5c <UART_SetConfig+0x344>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d130      	bne.n	8005eec <UART_SetConfig+0x2d4>
 8005e8a:	4b31      	ldr	r3, [pc, #196]	@ (8005f50 <UART_SetConfig+0x338>)
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b05      	cmp	r3, #5
 8005e94:	d826      	bhi.n	8005ee4 <UART_SetConfig+0x2cc>
 8005e96:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <UART_SetConfig+0x284>)
 8005e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9c:	08005eb5 	.word	0x08005eb5
 8005ea0:	08005ebd 	.word	0x08005ebd
 8005ea4:	08005ec5 	.word	0x08005ec5
 8005ea8:	08005ecd 	.word	0x08005ecd
 8005eac:	08005ed5 	.word	0x08005ed5
 8005eb0:	08005edd 	.word	0x08005edd
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e180      	b.n	80061be <UART_SetConfig+0x5a6>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e17c      	b.n	80061be <UART_SetConfig+0x5a6>
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eca:	e178      	b.n	80061be <UART_SetConfig+0x5a6>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed2:	e174      	b.n	80061be <UART_SetConfig+0x5a6>
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eda:	e170      	b.n	80061be <UART_SetConfig+0x5a6>
 8005edc:	2340      	movs	r3, #64	@ 0x40
 8005ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee2:	e16c      	b.n	80061be <UART_SetConfig+0x5a6>
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eea:	e168      	b.n	80061be <UART_SetConfig+0x5a6>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8005f60 <UART_SetConfig+0x348>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d142      	bne.n	8005f7c <UART_SetConfig+0x364>
 8005ef6:	4b16      	ldr	r3, [pc, #88]	@ (8005f50 <UART_SetConfig+0x338>)
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d838      	bhi.n	8005f74 <UART_SetConfig+0x35c>
 8005f02:	a201      	add	r2, pc, #4	@ (adr r2, 8005f08 <UART_SetConfig+0x2f0>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f21 	.word	0x08005f21
 8005f0c:	08005f29 	.word	0x08005f29
 8005f10:	08005f31 	.word	0x08005f31
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f65 	.word	0x08005f65
 8005f1c:	08005f6d 	.word	0x08005f6d
 8005f20:	2300      	movs	r3, #0
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e14a      	b.n	80061be <UART_SetConfig+0x5a6>
 8005f28:	2304      	movs	r3, #4
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2e:	e146      	b.n	80061be <UART_SetConfig+0x5a6>
 8005f30:	2308      	movs	r3, #8
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f36:	e142      	b.n	80061be <UART_SetConfig+0x5a6>
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3e:	e13e      	b.n	80061be <UART_SetConfig+0x5a6>
 8005f40:	cfff69f3 	.word	0xcfff69f3
 8005f44:	58000c00 	.word	0x58000c00
 8005f48:	11fff4ff 	.word	0x11fff4ff
 8005f4c:	40011000 	.word	0x40011000
 8005f50:	58024400 	.word	0x58024400
 8005f54:	40004400 	.word	0x40004400
 8005f58:	40004800 	.word	0x40004800
 8005f5c:	40004c00 	.word	0x40004c00
 8005f60:	40005000 	.word	0x40005000
 8005f64:	2320      	movs	r3, #32
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e128      	b.n	80061be <UART_SetConfig+0x5a6>
 8005f6c:	2340      	movs	r3, #64	@ 0x40
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e124      	b.n	80061be <UART_SetConfig+0x5a6>
 8005f74:	2380      	movs	r3, #128	@ 0x80
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e120      	b.n	80061be <UART_SetConfig+0x5a6>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4acb      	ldr	r2, [pc, #812]	@ (80062b0 <UART_SetConfig+0x698>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d176      	bne.n	8006074 <UART_SetConfig+0x45c>
 8005f86:	4bcb      	ldr	r3, [pc, #812]	@ (80062b4 <UART_SetConfig+0x69c>)
 8005f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f8e:	2b28      	cmp	r3, #40	@ 0x28
 8005f90:	d86c      	bhi.n	800606c <UART_SetConfig+0x454>
 8005f92:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <UART_SetConfig+0x380>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	0800603d 	.word	0x0800603d
 8005f9c:	0800606d 	.word	0x0800606d
 8005fa0:	0800606d 	.word	0x0800606d
 8005fa4:	0800606d 	.word	0x0800606d
 8005fa8:	0800606d 	.word	0x0800606d
 8005fac:	0800606d 	.word	0x0800606d
 8005fb0:	0800606d 	.word	0x0800606d
 8005fb4:	0800606d 	.word	0x0800606d
 8005fb8:	08006045 	.word	0x08006045
 8005fbc:	0800606d 	.word	0x0800606d
 8005fc0:	0800606d 	.word	0x0800606d
 8005fc4:	0800606d 	.word	0x0800606d
 8005fc8:	0800606d 	.word	0x0800606d
 8005fcc:	0800606d 	.word	0x0800606d
 8005fd0:	0800606d 	.word	0x0800606d
 8005fd4:	0800606d 	.word	0x0800606d
 8005fd8:	0800604d 	.word	0x0800604d
 8005fdc:	0800606d 	.word	0x0800606d
 8005fe0:	0800606d 	.word	0x0800606d
 8005fe4:	0800606d 	.word	0x0800606d
 8005fe8:	0800606d 	.word	0x0800606d
 8005fec:	0800606d 	.word	0x0800606d
 8005ff0:	0800606d 	.word	0x0800606d
 8005ff4:	0800606d 	.word	0x0800606d
 8005ff8:	08006055 	.word	0x08006055
 8005ffc:	0800606d 	.word	0x0800606d
 8006000:	0800606d 	.word	0x0800606d
 8006004:	0800606d 	.word	0x0800606d
 8006008:	0800606d 	.word	0x0800606d
 800600c:	0800606d 	.word	0x0800606d
 8006010:	0800606d 	.word	0x0800606d
 8006014:	0800606d 	.word	0x0800606d
 8006018:	0800605d 	.word	0x0800605d
 800601c:	0800606d 	.word	0x0800606d
 8006020:	0800606d 	.word	0x0800606d
 8006024:	0800606d 	.word	0x0800606d
 8006028:	0800606d 	.word	0x0800606d
 800602c:	0800606d 	.word	0x0800606d
 8006030:	0800606d 	.word	0x0800606d
 8006034:	0800606d 	.word	0x0800606d
 8006038:	08006065 	.word	0x08006065
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e0bc      	b.n	80061be <UART_SetConfig+0x5a6>
 8006044:	2304      	movs	r3, #4
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e0b8      	b.n	80061be <UART_SetConfig+0x5a6>
 800604c:	2308      	movs	r3, #8
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e0b4      	b.n	80061be <UART_SetConfig+0x5a6>
 8006054:	2310      	movs	r3, #16
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e0b0      	b.n	80061be <UART_SetConfig+0x5a6>
 800605c:	2320      	movs	r3, #32
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e0ac      	b.n	80061be <UART_SetConfig+0x5a6>
 8006064:	2340      	movs	r3, #64	@ 0x40
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e0a8      	b.n	80061be <UART_SetConfig+0x5a6>
 800606c:	2380      	movs	r3, #128	@ 0x80
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e0a4      	b.n	80061be <UART_SetConfig+0x5a6>
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a8f      	ldr	r2, [pc, #572]	@ (80062b8 <UART_SetConfig+0x6a0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d130      	bne.n	80060e0 <UART_SetConfig+0x4c8>
 800607e:	4b8d      	ldr	r3, [pc, #564]	@ (80062b4 <UART_SetConfig+0x69c>)
 8006080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006082:	f003 0307 	and.w	r3, r3, #7
 8006086:	2b05      	cmp	r3, #5
 8006088:	d826      	bhi.n	80060d8 <UART_SetConfig+0x4c0>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <UART_SetConfig+0x478>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	080060a9 	.word	0x080060a9
 8006094:	080060b1 	.word	0x080060b1
 8006098:	080060b9 	.word	0x080060b9
 800609c:	080060c1 	.word	0x080060c1
 80060a0:	080060c9 	.word	0x080060c9
 80060a4:	080060d1 	.word	0x080060d1
 80060a8:	2300      	movs	r3, #0
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ae:	e086      	b.n	80061be <UART_SetConfig+0x5a6>
 80060b0:	2304      	movs	r3, #4
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b6:	e082      	b.n	80061be <UART_SetConfig+0x5a6>
 80060b8:	2308      	movs	r3, #8
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e07e      	b.n	80061be <UART_SetConfig+0x5a6>
 80060c0:	2310      	movs	r3, #16
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e07a      	b.n	80061be <UART_SetConfig+0x5a6>
 80060c8:	2320      	movs	r3, #32
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ce:	e076      	b.n	80061be <UART_SetConfig+0x5a6>
 80060d0:	2340      	movs	r3, #64	@ 0x40
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d6:	e072      	b.n	80061be <UART_SetConfig+0x5a6>
 80060d8:	2380      	movs	r3, #128	@ 0x80
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060de:	e06e      	b.n	80061be <UART_SetConfig+0x5a6>
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a75      	ldr	r2, [pc, #468]	@ (80062bc <UART_SetConfig+0x6a4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d130      	bne.n	800614c <UART_SetConfig+0x534>
 80060ea:	4b72      	ldr	r3, [pc, #456]	@ (80062b4 <UART_SetConfig+0x69c>)
 80060ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	2b05      	cmp	r3, #5
 80060f4:	d826      	bhi.n	8006144 <UART_SetConfig+0x52c>
 80060f6:	a201      	add	r2, pc, #4	@ (adr r2, 80060fc <UART_SetConfig+0x4e4>)
 80060f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fc:	08006115 	.word	0x08006115
 8006100:	0800611d 	.word	0x0800611d
 8006104:	08006125 	.word	0x08006125
 8006108:	0800612d 	.word	0x0800612d
 800610c:	08006135 	.word	0x08006135
 8006110:	0800613d 	.word	0x0800613d
 8006114:	2300      	movs	r3, #0
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e050      	b.n	80061be <UART_SetConfig+0x5a6>
 800611c:	2304      	movs	r3, #4
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006122:	e04c      	b.n	80061be <UART_SetConfig+0x5a6>
 8006124:	2308      	movs	r3, #8
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800612a:	e048      	b.n	80061be <UART_SetConfig+0x5a6>
 800612c:	2310      	movs	r3, #16
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006132:	e044      	b.n	80061be <UART_SetConfig+0x5a6>
 8006134:	2320      	movs	r3, #32
 8006136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800613a:	e040      	b.n	80061be <UART_SetConfig+0x5a6>
 800613c:	2340      	movs	r3, #64	@ 0x40
 800613e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006142:	e03c      	b.n	80061be <UART_SetConfig+0x5a6>
 8006144:	2380      	movs	r3, #128	@ 0x80
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614a:	e038      	b.n	80061be <UART_SetConfig+0x5a6>
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a5b      	ldr	r2, [pc, #364]	@ (80062c0 <UART_SetConfig+0x6a8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d130      	bne.n	80061b8 <UART_SetConfig+0x5a0>
 8006156:	4b57      	ldr	r3, [pc, #348]	@ (80062b4 <UART_SetConfig+0x69c>)
 8006158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800615a:	f003 0307 	and.w	r3, r3, #7
 800615e:	2b05      	cmp	r3, #5
 8006160:	d826      	bhi.n	80061b0 <UART_SetConfig+0x598>
 8006162:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <UART_SetConfig+0x550>)
 8006164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006168:	08006181 	.word	0x08006181
 800616c:	08006189 	.word	0x08006189
 8006170:	08006191 	.word	0x08006191
 8006174:	08006199 	.word	0x08006199
 8006178:	080061a1 	.word	0x080061a1
 800617c:	080061a9 	.word	0x080061a9
 8006180:	2302      	movs	r3, #2
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e01a      	b.n	80061be <UART_SetConfig+0x5a6>
 8006188:	2304      	movs	r3, #4
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618e:	e016      	b.n	80061be <UART_SetConfig+0x5a6>
 8006190:	2308      	movs	r3, #8
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006196:	e012      	b.n	80061be <UART_SetConfig+0x5a6>
 8006198:	2310      	movs	r3, #16
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800619e:	e00e      	b.n	80061be <UART_SetConfig+0x5a6>
 80061a0:	2320      	movs	r3, #32
 80061a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061a6:	e00a      	b.n	80061be <UART_SetConfig+0x5a6>
 80061a8:	2340      	movs	r3, #64	@ 0x40
 80061aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ae:	e006      	b.n	80061be <UART_SetConfig+0x5a6>
 80061b0:	2380      	movs	r3, #128	@ 0x80
 80061b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061b6:	e002      	b.n	80061be <UART_SetConfig+0x5a6>
 80061b8:	2380      	movs	r3, #128	@ 0x80
 80061ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a3f      	ldr	r2, [pc, #252]	@ (80062c0 <UART_SetConfig+0x6a8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	f040 80f8 	bne.w	80063ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	dc46      	bgt.n	8006260 <UART_SetConfig+0x648>
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	f2c0 8082 	blt.w	80062dc <UART_SetConfig+0x6c4>
 80061d8:	3b02      	subs	r3, #2
 80061da:	2b1e      	cmp	r3, #30
 80061dc:	d87e      	bhi.n	80062dc <UART_SetConfig+0x6c4>
 80061de:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <UART_SetConfig+0x5cc>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006267 	.word	0x08006267
 80061e8:	080062dd 	.word	0x080062dd
 80061ec:	0800626f 	.word	0x0800626f
 80061f0:	080062dd 	.word	0x080062dd
 80061f4:	080062dd 	.word	0x080062dd
 80061f8:	080062dd 	.word	0x080062dd
 80061fc:	0800627f 	.word	0x0800627f
 8006200:	080062dd 	.word	0x080062dd
 8006204:	080062dd 	.word	0x080062dd
 8006208:	080062dd 	.word	0x080062dd
 800620c:	080062dd 	.word	0x080062dd
 8006210:	080062dd 	.word	0x080062dd
 8006214:	080062dd 	.word	0x080062dd
 8006218:	080062dd 	.word	0x080062dd
 800621c:	0800628f 	.word	0x0800628f
 8006220:	080062dd 	.word	0x080062dd
 8006224:	080062dd 	.word	0x080062dd
 8006228:	080062dd 	.word	0x080062dd
 800622c:	080062dd 	.word	0x080062dd
 8006230:	080062dd 	.word	0x080062dd
 8006234:	080062dd 	.word	0x080062dd
 8006238:	080062dd 	.word	0x080062dd
 800623c:	080062dd 	.word	0x080062dd
 8006240:	080062dd 	.word	0x080062dd
 8006244:	080062dd 	.word	0x080062dd
 8006248:	080062dd 	.word	0x080062dd
 800624c:	080062dd 	.word	0x080062dd
 8006250:	080062dd 	.word	0x080062dd
 8006254:	080062dd 	.word	0x080062dd
 8006258:	080062dd 	.word	0x080062dd
 800625c:	080062cf 	.word	0x080062cf
 8006260:	2b40      	cmp	r3, #64	@ 0x40
 8006262:	d037      	beq.n	80062d4 <UART_SetConfig+0x6bc>
 8006264:	e03a      	b.n	80062dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006266:	f7fe fd97 	bl	8004d98 <HAL_RCCEx_GetD3PCLK1Freq>
 800626a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800626c:	e03c      	b.n	80062e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800626e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fda6 	bl	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800627c:	e034      	b.n	80062e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800627e:	f107 0318 	add.w	r3, r7, #24
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fef2 	bl	800506c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800628c:	e02c      	b.n	80062e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800628e:	4b09      	ldr	r3, [pc, #36]	@ (80062b4 <UART_SetConfig+0x69c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d016      	beq.n	80062c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800629a:	4b06      	ldr	r3, [pc, #24]	@ (80062b4 <UART_SetConfig+0x69c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	08db      	lsrs	r3, r3, #3
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	4a07      	ldr	r2, [pc, #28]	@ (80062c4 <UART_SetConfig+0x6ac>)
 80062a6:	fa22 f303 	lsr.w	r3, r2, r3
 80062aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062ac:	e01c      	b.n	80062e8 <UART_SetConfig+0x6d0>
 80062ae:	bf00      	nop
 80062b0:	40011400 	.word	0x40011400
 80062b4:	58024400 	.word	0x58024400
 80062b8:	40007800 	.word	0x40007800
 80062bc:	40007c00 	.word	0x40007c00
 80062c0:	58000c00 	.word	0x58000c00
 80062c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80062c8:	4b9d      	ldr	r3, [pc, #628]	@ (8006540 <UART_SetConfig+0x928>)
 80062ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062cc:	e00c      	b.n	80062e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062ce:	4b9d      	ldr	r3, [pc, #628]	@ (8006544 <UART_SetConfig+0x92c>)
 80062d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d2:	e009      	b.n	80062e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062da:	e005      	b.n	80062e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 81de 	beq.w	80066ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f4:	4a94      	ldr	r2, [pc, #592]	@ (8006548 <UART_SetConfig+0x930>)
 80062f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062fa:	461a      	mov	r2, r3
 80062fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006302:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	4613      	mov	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	4413      	add	r3, r2
 800630e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006310:	429a      	cmp	r2, r3
 8006312:	d305      	bcc.n	8006320 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800631a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800631c:	429a      	cmp	r2, r3
 800631e:	d903      	bls.n	8006328 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006326:	e1c1      	b.n	80066ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006328:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800632a:	2200      	movs	r2, #0
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	60fa      	str	r2, [r7, #12]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006334:	4a84      	ldr	r2, [pc, #528]	@ (8006548 <UART_SetConfig+0x930>)
 8006336:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800633a:	b29b      	uxth	r3, r3
 800633c:	2200      	movs	r2, #0
 800633e:	603b      	str	r3, [r7, #0]
 8006340:	607a      	str	r2, [r7, #4]
 8006342:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006346:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800634a:	f7f9 ffc9 	bl	80002e0 <__aeabi_uldivmod>
 800634e:	4602      	mov	r2, r0
 8006350:	460b      	mov	r3, r1
 8006352:	4610      	mov	r0, r2
 8006354:	4619      	mov	r1, r3
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	020b      	lsls	r3, r1, #8
 8006360:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006364:	0202      	lsls	r2, r0, #8
 8006366:	6979      	ldr	r1, [r7, #20]
 8006368:	6849      	ldr	r1, [r1, #4]
 800636a:	0849      	lsrs	r1, r1, #1
 800636c:	2000      	movs	r0, #0
 800636e:	460c      	mov	r4, r1
 8006370:	4605      	mov	r5, r0
 8006372:	eb12 0804 	adds.w	r8, r2, r4
 8006376:	eb43 0905 	adc.w	r9, r3, r5
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	469a      	mov	sl, r3
 8006382:	4693      	mov	fp, r2
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	4640      	mov	r0, r8
 800638a:	4649      	mov	r1, r9
 800638c:	f7f9 ffa8 	bl	80002e0 <__aeabi_uldivmod>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4613      	mov	r3, r2
 8006396:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800639a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800639e:	d308      	bcc.n	80063b2 <UART_SetConfig+0x79a>
 80063a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063a6:	d204      	bcs.n	80063b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063ae:	60da      	str	r2, [r3, #12]
 80063b0:	e17c      	b.n	80066ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063b8:	e178      	b.n	80066ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c2:	f040 80c5 	bne.w	8006550 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80063c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80063ca:	2b20      	cmp	r3, #32
 80063cc:	dc48      	bgt.n	8006460 <UART_SetConfig+0x848>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	db7b      	blt.n	80064ca <UART_SetConfig+0x8b2>
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d879      	bhi.n	80064ca <UART_SetConfig+0x8b2>
 80063d6:	a201      	add	r2, pc, #4	@ (adr r2, 80063dc <UART_SetConfig+0x7c4>)
 80063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063dc:	08006467 	.word	0x08006467
 80063e0:	0800646f 	.word	0x0800646f
 80063e4:	080064cb 	.word	0x080064cb
 80063e8:	080064cb 	.word	0x080064cb
 80063ec:	08006477 	.word	0x08006477
 80063f0:	080064cb 	.word	0x080064cb
 80063f4:	080064cb 	.word	0x080064cb
 80063f8:	080064cb 	.word	0x080064cb
 80063fc:	08006487 	.word	0x08006487
 8006400:	080064cb 	.word	0x080064cb
 8006404:	080064cb 	.word	0x080064cb
 8006408:	080064cb 	.word	0x080064cb
 800640c:	080064cb 	.word	0x080064cb
 8006410:	080064cb 	.word	0x080064cb
 8006414:	080064cb 	.word	0x080064cb
 8006418:	080064cb 	.word	0x080064cb
 800641c:	08006497 	.word	0x08006497
 8006420:	080064cb 	.word	0x080064cb
 8006424:	080064cb 	.word	0x080064cb
 8006428:	080064cb 	.word	0x080064cb
 800642c:	080064cb 	.word	0x080064cb
 8006430:	080064cb 	.word	0x080064cb
 8006434:	080064cb 	.word	0x080064cb
 8006438:	080064cb 	.word	0x080064cb
 800643c:	080064cb 	.word	0x080064cb
 8006440:	080064cb 	.word	0x080064cb
 8006444:	080064cb 	.word	0x080064cb
 8006448:	080064cb 	.word	0x080064cb
 800644c:	080064cb 	.word	0x080064cb
 8006450:	080064cb 	.word	0x080064cb
 8006454:	080064cb 	.word	0x080064cb
 8006458:	080064cb 	.word	0x080064cb
 800645c:	080064bd 	.word	0x080064bd
 8006460:	2b40      	cmp	r3, #64	@ 0x40
 8006462:	d02e      	beq.n	80064c2 <UART_SetConfig+0x8aa>
 8006464:	e031      	b.n	80064ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006466:	f7fd fa1f 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 800646a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800646c:	e033      	b.n	80064d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646e:	f7fd fa31 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8006472:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006474:	e02f      	b.n	80064d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fca2 	bl	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006484:	e027      	b.n	80064d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006486:	f107 0318 	add.w	r3, r7, #24
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe fdee 	bl	800506c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006494:	e01f      	b.n	80064d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006496:	4b2d      	ldr	r3, [pc, #180]	@ (800654c <UART_SetConfig+0x934>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d009      	beq.n	80064b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064a2:	4b2a      	ldr	r3, [pc, #168]	@ (800654c <UART_SetConfig+0x934>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	08db      	lsrs	r3, r3, #3
 80064a8:	f003 0303 	and.w	r3, r3, #3
 80064ac:	4a24      	ldr	r2, [pc, #144]	@ (8006540 <UART_SetConfig+0x928>)
 80064ae:	fa22 f303 	lsr.w	r3, r2, r3
 80064b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064b4:	e00f      	b.n	80064d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80064b6:	4b22      	ldr	r3, [pc, #136]	@ (8006540 <UART_SetConfig+0x928>)
 80064b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064ba:	e00c      	b.n	80064d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064bc:	4b21      	ldr	r3, [pc, #132]	@ (8006544 <UART_SetConfig+0x92c>)
 80064be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c0:	e009      	b.n	80064d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064c8:	e005      	b.n	80064d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80064d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80e7 	beq.w	80066ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	4a19      	ldr	r2, [pc, #100]	@ (8006548 <UART_SetConfig+0x930>)
 80064e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064e8:	461a      	mov	r2, r3
 80064ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80064f0:	005a      	lsls	r2, r3, #1
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	085b      	lsrs	r3, r3, #1
 80064f8:	441a      	add	r2, r3
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006502:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006506:	2b0f      	cmp	r3, #15
 8006508:	d916      	bls.n	8006538 <UART_SetConfig+0x920>
 800650a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800650c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006510:	d212      	bcs.n	8006538 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006514:	b29b      	uxth	r3, r3
 8006516:	f023 030f 	bic.w	r3, r3, #15
 800651a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800651c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	b29b      	uxth	r3, r3
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	b29a      	uxth	r2, r3
 8006528:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800652a:	4313      	orrs	r3, r2
 800652c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	e0b9      	b.n	80066ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800653e:	e0b5      	b.n	80066ac <UART_SetConfig+0xa94>
 8006540:	03d09000 	.word	0x03d09000
 8006544:	003d0900 	.word	0x003d0900
 8006548:	0800ad30 	.word	0x0800ad30
 800654c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006550:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006554:	2b20      	cmp	r3, #32
 8006556:	dc49      	bgt.n	80065ec <UART_SetConfig+0x9d4>
 8006558:	2b00      	cmp	r3, #0
 800655a:	db7c      	blt.n	8006656 <UART_SetConfig+0xa3e>
 800655c:	2b20      	cmp	r3, #32
 800655e:	d87a      	bhi.n	8006656 <UART_SetConfig+0xa3e>
 8006560:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <UART_SetConfig+0x950>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	080065f3 	.word	0x080065f3
 800656c:	080065fb 	.word	0x080065fb
 8006570:	08006657 	.word	0x08006657
 8006574:	08006657 	.word	0x08006657
 8006578:	08006603 	.word	0x08006603
 800657c:	08006657 	.word	0x08006657
 8006580:	08006657 	.word	0x08006657
 8006584:	08006657 	.word	0x08006657
 8006588:	08006613 	.word	0x08006613
 800658c:	08006657 	.word	0x08006657
 8006590:	08006657 	.word	0x08006657
 8006594:	08006657 	.word	0x08006657
 8006598:	08006657 	.word	0x08006657
 800659c:	08006657 	.word	0x08006657
 80065a0:	08006657 	.word	0x08006657
 80065a4:	08006657 	.word	0x08006657
 80065a8:	08006623 	.word	0x08006623
 80065ac:	08006657 	.word	0x08006657
 80065b0:	08006657 	.word	0x08006657
 80065b4:	08006657 	.word	0x08006657
 80065b8:	08006657 	.word	0x08006657
 80065bc:	08006657 	.word	0x08006657
 80065c0:	08006657 	.word	0x08006657
 80065c4:	08006657 	.word	0x08006657
 80065c8:	08006657 	.word	0x08006657
 80065cc:	08006657 	.word	0x08006657
 80065d0:	08006657 	.word	0x08006657
 80065d4:	08006657 	.word	0x08006657
 80065d8:	08006657 	.word	0x08006657
 80065dc:	08006657 	.word	0x08006657
 80065e0:	08006657 	.word	0x08006657
 80065e4:	08006657 	.word	0x08006657
 80065e8:	08006649 	.word	0x08006649
 80065ec:	2b40      	cmp	r3, #64	@ 0x40
 80065ee:	d02e      	beq.n	800664e <UART_SetConfig+0xa36>
 80065f0:	e031      	b.n	8006656 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f2:	f7fd f959 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 80065f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065f8:	e033      	b.n	8006662 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065fa:	f7fd f96b 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 80065fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006600:	e02f      	b.n	8006662 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006606:	4618      	mov	r0, r3
 8006608:	f7fe fbdc 	bl	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800660c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006610:	e027      	b.n	8006662 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006612:	f107 0318 	add.w	r3, r7, #24
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe fd28 	bl	800506c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006620:	e01f      	b.n	8006662 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006622:	4b2d      	ldr	r3, [pc, #180]	@ (80066d8 <UART_SetConfig+0xac0>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d009      	beq.n	8006642 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800662e:	4b2a      	ldr	r3, [pc, #168]	@ (80066d8 <UART_SetConfig+0xac0>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	08db      	lsrs	r3, r3, #3
 8006634:	f003 0303 	and.w	r3, r3, #3
 8006638:	4a28      	ldr	r2, [pc, #160]	@ (80066dc <UART_SetConfig+0xac4>)
 800663a:	fa22 f303 	lsr.w	r3, r2, r3
 800663e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006640:	e00f      	b.n	8006662 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006642:	4b26      	ldr	r3, [pc, #152]	@ (80066dc <UART_SetConfig+0xac4>)
 8006644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006646:	e00c      	b.n	8006662 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006648:	4b25      	ldr	r3, [pc, #148]	@ (80066e0 <UART_SetConfig+0xac8>)
 800664a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800664c:	e009      	b.n	8006662 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800664e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006654:	e005      	b.n	8006662 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006656:	2300      	movs	r3, #0
 8006658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006660:	bf00      	nop
    }

    if (pclk != 0U)
 8006662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006664:	2b00      	cmp	r3, #0
 8006666:	d021      	beq.n	80066ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	4a1d      	ldr	r2, [pc, #116]	@ (80066e4 <UART_SetConfig+0xacc>)
 800666e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006672:	461a      	mov	r2, r3
 8006674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006676:	fbb3 f2f2 	udiv	r2, r3, r2
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	085b      	lsrs	r3, r3, #1
 8006680:	441a      	add	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	fbb2 f3f3 	udiv	r3, r2, r3
 800668a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800668c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668e:	2b0f      	cmp	r3, #15
 8006690:	d909      	bls.n	80066a6 <UART_SetConfig+0xa8e>
 8006692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006698:	d205      	bcs.n	80066a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800669a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669c:	b29a      	uxth	r2, r3
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60da      	str	r2, [r3, #12]
 80066a4:	e002      	b.n	80066ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2200      	movs	r2, #0
 80066c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2200      	movs	r2, #0
 80066c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80066c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3748      	adds	r7, #72	@ 0x48
 80066d0:	46bd      	mov	sp, r7
 80066d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066d6:	bf00      	nop
 80066d8:	58024400 	.word	0x58024400
 80066dc:	03d09000 	.word	0x03d09000
 80066e0:	003d0900 	.word	0x003d0900
 80066e4:	0800ad30 	.word	0x0800ad30

080066e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00a      	beq.n	8006712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006716:	f003 0301 	and.w	r3, r3, #1
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00a      	beq.n	8006756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00a      	beq.n	8006778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d01a      	beq.n	80067fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067e6:	d10a      	bne.n	80067fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	605a      	str	r2, [r3, #4]
  }
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b098      	sub	sp, #96	@ 0x60
 8006830:	af02      	add	r7, sp, #8
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800683c:	f7fa fdd2 	bl	80013e4 <HAL_GetTick>
 8006840:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b08      	cmp	r3, #8
 800684e:	d12f      	bne.n	80068b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006850:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006858:	2200      	movs	r2, #0
 800685a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f88e 	bl	8006980 <UART_WaitOnFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d022      	beq.n	80068b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	e853 3f00 	ldrex	r3, [r3]
 8006876:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800687e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006888:	647b      	str	r3, [r7, #68]	@ 0x44
 800688a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800688e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006890:	e841 2300 	strex	r3, r2, [r1]
 8006894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1e6      	bne.n	800686a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2220      	movs	r2, #32
 80068a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e063      	b.n	8006978 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0304 	and.w	r3, r3, #4
 80068ba:	2b04      	cmp	r3, #4
 80068bc:	d149      	bne.n	8006952 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c6:	2200      	movs	r2, #0
 80068c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 f857 	bl	8006980 <UART_WaitOnFlagUntilTimeout>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d03c      	beq.n	8006952 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e0:	e853 3f00 	ldrex	r3, [r3]
 80068e4:	623b      	str	r3, [r7, #32]
   return(result);
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80068f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068fe:	e841 2300 	strex	r3, r2, [r1]
 8006902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e6      	bne.n	80068d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3308      	adds	r3, #8
 8006910:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	e853 3f00 	ldrex	r3, [r3]
 8006918:	60fb      	str	r3, [r7, #12]
   return(result);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f023 0301 	bic.w	r3, r3, #1
 8006920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	3308      	adds	r3, #8
 8006928:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800692a:	61fa      	str	r2, [r7, #28]
 800692c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692e:	69b9      	ldr	r1, [r7, #24]
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	e841 2300 	strex	r3, r2, [r1]
 8006936:	617b      	str	r3, [r7, #20]
   return(result);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d1e5      	bne.n	800690a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e012      	b.n	8006978 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2220      	movs	r2, #32
 8006956:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2220      	movs	r2, #32
 800695e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006976:	2300      	movs	r3, #0
}
 8006978:	4618      	mov	r0, r3
 800697a:	3758      	adds	r7, #88	@ 0x58
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	4613      	mov	r3, r2
 800698e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006990:	e04f      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006998:	d04b      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800699a:	f7fa fd23 	bl	80013e4 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	69ba      	ldr	r2, [r7, #24]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d302      	bcc.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e04e      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0304 	and.w	r3, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d037      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b80      	cmp	r3, #128	@ 0x80
 80069c6:	d034      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b40      	cmp	r3, #64	@ 0x40
 80069cc:	d031      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d110      	bne.n	80069fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2208      	movs	r2, #8
 80069e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f839 	bl	8006a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2208      	movs	r2, #8
 80069ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e029      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a0c:	d111      	bne.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f81f 	bl	8006a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e00f      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	69da      	ldr	r2, [r3, #28]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	bf0c      	ite	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	2300      	movne	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d0a0      	beq.n	8006992 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b095      	sub	sp, #84	@ 0x54
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a82:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e6      	bne.n	8006a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3308      	adds	r3, #8
 8006a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	e853 3f00 	ldrex	r3, [r3]
 8006aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006aa6:	69fa      	ldr	r2, [r7, #28]
 8006aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8006b24 <UART_EndRxTransfer+0xc8>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006abe:	e841 2300 	strex	r3, r2, [r1]
 8006ac2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1e5      	bne.n	8006a96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d118      	bne.n	8006b04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	e853 3f00 	ldrex	r3, [r3]
 8006ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f023 0310 	bic.w	r3, r3, #16
 8006ae6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006af0:	61bb      	str	r3, [r7, #24]
 8006af2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af4:	6979      	ldr	r1, [r7, #20]
 8006af6:	69ba      	ldr	r2, [r7, #24]
 8006af8:	e841 2300 	strex	r3, r2, [r1]
 8006afc:	613b      	str	r3, [r7, #16]
   return(result);
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1e6      	bne.n	8006ad2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2220      	movs	r2, #32
 8006b08:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b18:	bf00      	nop
 8006b1a:	3754      	adds	r7, #84	@ 0x54
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	effffffe 	.word	0xeffffffe

08006b28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_UARTEx_DisableFifoMode+0x16>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e027      	b.n	8006b8e <HAL_UARTEx_DisableFifoMode+0x66>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2224      	movs	r2, #36	@ 0x24
 8006b4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0201 	bic.w	r2, r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e02d      	b.n	8006c0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2224      	movs	r2, #36	@ 0x24
 8006bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0201 	bic.w	r2, r2, #1
 8006bd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f850 	bl	8006c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2220      	movs	r2, #32
 8006c00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	e02d      	b.n	8006c8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2224      	movs	r2, #36	@ 0x24
 8006c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	683a      	ldr	r2, [r7, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f812 	bl	8006c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d108      	bne.n	8006cb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cb4:	e031      	b.n	8006d1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cb6:	2310      	movs	r3, #16
 8006cb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cba:	2310      	movs	r3, #16
 8006cbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	0e5b      	lsrs	r3, r3, #25
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	0f5b      	lsrs	r3, r3, #29
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	7b3a      	ldrb	r2, [r7, #12]
 8006ce2:	4911      	ldr	r1, [pc, #68]	@ (8006d28 <UARTEx_SetNbDataToProcess+0x94>)
 8006ce4:	5c8a      	ldrb	r2, [r1, r2]
 8006ce6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cea:	7b3a      	ldrb	r2, [r7, #12]
 8006cec:	490f      	ldr	r1, [pc, #60]	@ (8006d2c <UARTEx_SetNbDataToProcess+0x98>)
 8006cee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
 8006cfe:	7b7a      	ldrb	r2, [r7, #13]
 8006d00:	4909      	ldr	r1, [pc, #36]	@ (8006d28 <UARTEx_SetNbDataToProcess+0x94>)
 8006d02:	5c8a      	ldrb	r2, [r1, r2]
 8006d04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d08:	7b7a      	ldrb	r2, [r7, #13]
 8006d0a:	4908      	ldr	r1, [pc, #32]	@ (8006d2c <UARTEx_SetNbDataToProcess+0x98>)
 8006d0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d12:	b29a      	uxth	r2, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006d1a:	bf00      	nop
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	0800ad48 	.word	0x0800ad48
 8006d2c:	0800ad50 	.word	0x0800ad50

08006d30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d30:	b084      	sub	sp, #16
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	f107 001c 	add.w	r0, r7, #28
 8006d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d121      	bne.n	8006d8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68da      	ldr	r2, [r3, #12]
 8006d5a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e0c <USB_CoreInit+0xdc>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d105      	bne.n	8006d82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 faaa 	bl	80072dc <USB_CoreReset>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73fb      	strb	r3, [r7, #15]
 8006d8c:	e01b      	b.n	8006dc6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fa9e 	bl	80072dc <USB_CoreReset>
 8006da0:	4603      	mov	r3, r0
 8006da2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006da4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d106      	bne.n	8006dba <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	639a      	str	r2, [r3, #56]	@ 0x38
 8006db8:	e005      	b.n	8006dc6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006dc6:	7fbb      	ldrb	r3, [r7, #30]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d116      	bne.n	8006dfa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dda:	4b0d      	ldr	r3, [pc, #52]	@ (8006e10 <USB_CoreInit+0xe0>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	f043 0206 	orr.w	r2, r3, #6
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f043 0220 	orr.w	r2, r3, #32
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e06:	b004      	add	sp, #16
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	ffbdffbf 	.word	0xffbdffbf
 8006e10:	03ee0000 	.word	0x03ee0000

08006e14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f023 0201 	bic.w	r2, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	460b      	mov	r3, r1
 8006e40:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d115      	bne.n	8006e84 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e64:	200a      	movs	r0, #10
 8006e66:	f7fa fac9 	bl	80013fc <HAL_Delay>
      ms += 10U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	330a      	adds	r3, #10
 8006e6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fa25 	bl	80072c0 <USB_GetMode>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d01e      	beq.n	8006eba <USB_SetCurrentMode+0x84>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e80:	d9f0      	bls.n	8006e64 <USB_SetCurrentMode+0x2e>
 8006e82:	e01a      	b.n	8006eba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d115      	bne.n	8006eb6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e96:	200a      	movs	r0, #10
 8006e98:	f7fa fab0 	bl	80013fc <HAL_Delay>
      ms += 10U;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	330a      	adds	r3, #10
 8006ea0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fa0c 	bl	80072c0 <USB_GetMode>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <USB_SetCurrentMode+0x84>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006eb2:	d9f0      	bls.n	8006e96 <USB_SetCurrentMode+0x60>
 8006eb4:	e001      	b.n	8006eba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e005      	b.n	8006ec6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2bc8      	cmp	r3, #200	@ 0xc8
 8006ebe:	d101      	bne.n	8006ec4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006eea:	2300      	movs	r3, #0
 8006eec:	613b      	str	r3, [r7, #16]
 8006eee:	e009      	b.n	8006f04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	3340      	adds	r3, #64	@ 0x40
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4413      	add	r3, r2
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	3301      	adds	r3, #1
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b0e      	cmp	r3, #14
 8006f08:	d9f2      	bls.n	8006ef0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d11c      	bne.n	8006f4c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f20:	f043 0302 	orr.w	r3, r3, #2
 8006f24:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	601a      	str	r2, [r3, #0]
 8006f4a:	e005      	b.n	8006f58 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f50:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2300      	movs	r3, #0
 8006f62:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f64:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d10d      	bne.n	8006f88 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d104      	bne.n	8006f7e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f74:	2100      	movs	r1, #0
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f968 	bl	800724c <USB_SetDevSpeed>
 8006f7c:	e008      	b.n	8006f90 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f7e:	2101      	movs	r1, #1
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f963 	bl	800724c <USB_SetDevSpeed>
 8006f86:	e003      	b.n	8006f90 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f88:	2103      	movs	r1, #3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f95e 	bl	800724c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f90:	2110      	movs	r1, #16
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 f8fa 	bl	800718c <USB_FlushTxFifo>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f924 	bl	80071f0 <USB_FlushRxFifo>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb8:	461a      	mov	r2, r3
 8006fba:	2300      	movs	r3, #0
 8006fbc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]
 8006fda:	e043      	b.n	8007064 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ff2:	d118      	bne.n	8007026 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007006:	461a      	mov	r2, r3
 8007008:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e013      	b.n	8007038 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800701c:	461a      	mov	r2, r3
 800701e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	e008      	b.n	8007038 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	015a      	lsls	r2, r3, #5
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4413      	add	r3, r2
 800702e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007032:	461a      	mov	r2, r3
 8007034:	2300      	movs	r3, #0
 8007036:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007044:	461a      	mov	r2, r3
 8007046:	2300      	movs	r3, #0
 8007048:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	4413      	add	r3, r2
 8007052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007056:	461a      	mov	r2, r3
 8007058:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800705c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007068:	461a      	mov	r2, r3
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4293      	cmp	r3, r2
 800706e:	d3b5      	bcc.n	8006fdc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007070:	2300      	movs	r3, #0
 8007072:	613b      	str	r3, [r7, #16]
 8007074:	e043      	b.n	80070fe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007088:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800708c:	d118      	bne.n	80070c0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a0:	461a      	mov	r2, r3
 80070a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	e013      	b.n	80070d2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b6:	461a      	mov	r2, r3
 80070b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	e008      	b.n	80070d2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070cc:	461a      	mov	r2, r3
 80070ce:	2300      	movs	r3, #0
 80070d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070de:	461a      	mov	r2, r3
 80070e0:	2300      	movs	r3, #0
 80070e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f0:	461a      	mov	r2, r3
 80070f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80070f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	3301      	adds	r3, #1
 80070fc:	613b      	str	r3, [r7, #16]
 80070fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007102:	461a      	mov	r2, r3
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4293      	cmp	r3, r2
 8007108:	d3b5      	bcc.n	8007076 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800711c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800712a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800712c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	f043 0210 	orr.w	r2, r3, #16
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699a      	ldr	r2, [r3, #24]
 8007144:	4b0f      	ldr	r3, [pc, #60]	@ (8007184 <USB_DevInit+0x2b4>)
 8007146:	4313      	orrs	r3, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800714c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007150:	2b00      	cmp	r3, #0
 8007152:	d005      	beq.n	8007160 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	f043 0208 	orr.w	r2, r3, #8
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007160:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007164:	2b01      	cmp	r3, #1
 8007166:	d105      	bne.n	8007174 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	4b06      	ldr	r3, [pc, #24]	@ (8007188 <USB_DevInit+0x2b8>)
 800716e:	4313      	orrs	r3, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007174:	7dfb      	ldrb	r3, [r7, #23]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007180:	b004      	add	sp, #16
 8007182:	4770      	bx	lr
 8007184:	803c3800 	.word	0x803c3800
 8007188:	40000004 	.word	0x40000004

0800718c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3301      	adds	r3, #1
 800719e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071a6:	d901      	bls.n	80071ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e01b      	b.n	80071e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	daf2      	bge.n	800719a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	019b      	lsls	r3, r3, #6
 80071bc:	f043 0220 	orr.w	r2, r3, #32
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071d0:	d901      	bls.n	80071d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e006      	b.n	80071e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f003 0320 	and.w	r3, r3, #32
 80071de:	2b20      	cmp	r3, #32
 80071e0:	d0f0      	beq.n	80071c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3301      	adds	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007208:	d901      	bls.n	800720e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e018      	b.n	8007240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	daf2      	bge.n	80071fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2210      	movs	r2, #16
 800721e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800722c:	d901      	bls.n	8007232 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e006      	b.n	8007240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	2b10      	cmp	r3, #16
 800723c:	d0f0      	beq.n	8007220 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800726c:	4313      	orrs	r3, r2
 800726e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007298:	f023 0303 	bic.w	r3, r3, #3
 800729c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072ac:	f043 0302 	orr.w	r3, r3, #2
 80072b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	f003 0301 	and.w	r3, r3, #1
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072dc:	b480      	push	{r7}
 80072de:	b085      	sub	sp, #20
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3301      	adds	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80072f4:	d901      	bls.n	80072fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e01b      	b.n	8007332 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	daf2      	bge.n	80072e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f043 0201 	orr.w	r2, r3, #1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3301      	adds	r3, #1
 8007316:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800731e:	d901      	bls.n	8007324 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e006      	b.n	8007332 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b01      	cmp	r3, #1
 800732e:	d0f0      	beq.n	8007312 <USB_CoreReset+0x36>

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <__NVIC_SetPriority>:
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	6039      	str	r1, [r7, #0]
 800734a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800734c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007350:	2b00      	cmp	r3, #0
 8007352:	db0a      	blt.n	800736a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	490c      	ldr	r1, [pc, #48]	@ (800738c <__NVIC_SetPriority+0x4c>)
 800735a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800735e:	0112      	lsls	r2, r2, #4
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	440b      	add	r3, r1
 8007364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007368:	e00a      	b.n	8007380 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	b2da      	uxtb	r2, r3
 800736e:	4908      	ldr	r1, [pc, #32]	@ (8007390 <__NVIC_SetPriority+0x50>)
 8007370:	88fb      	ldrh	r3, [r7, #6]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	3b04      	subs	r3, #4
 8007378:	0112      	lsls	r2, r2, #4
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	440b      	add	r3, r1
 800737e:	761a      	strb	r2, [r3, #24]
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	e000e100 	.word	0xe000e100
 8007390:	e000ed00 	.word	0xe000ed00

08007394 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007398:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <SysTick_Handler+0x1c>)
 800739a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800739c:	f001 fd46 	bl	8008e2c <xTaskGetSchedulerState>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d001      	beq.n	80073aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80073a6:	f002 fb3f 	bl	8009a28 <xPortSysTickHandler>
  }
}
 80073aa:	bf00      	nop
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	e000e010 	.word	0xe000e010

080073b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073b8:	2100      	movs	r1, #0
 80073ba:	f06f 0004 	mvn.w	r0, #4
 80073be:	f7ff ffbf 	bl	8007340 <__NVIC_SetPriority>
#endif
}
 80073c2:	bf00      	nop
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ce:	f3ef 8305 	mrs	r3, IPSR
 80073d2:	603b      	str	r3, [r7, #0]
  return(result);
 80073d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073da:	f06f 0305 	mvn.w	r3, #5
 80073de:	607b      	str	r3, [r7, #4]
 80073e0:	e00c      	b.n	80073fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073e2:	4b0a      	ldr	r3, [pc, #40]	@ (800740c <osKernelInitialize+0x44>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073ea:	4b08      	ldr	r3, [pc, #32]	@ (800740c <osKernelInitialize+0x44>)
 80073ec:	2201      	movs	r2, #1
 80073ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	607b      	str	r3, [r7, #4]
 80073f4:	e002      	b.n	80073fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
 80073fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073fc:	687b      	ldr	r3, [r7, #4]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	24000814 	.word	0x24000814

08007410 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007416:	f3ef 8305 	mrs	r3, IPSR
 800741a:	603b      	str	r3, [r7, #0]
  return(result);
 800741c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007422:	f06f 0305 	mvn.w	r3, #5
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	e010      	b.n	800744c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800742a:	4b0b      	ldr	r3, [pc, #44]	@ (8007458 <osKernelStart+0x48>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d109      	bne.n	8007446 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007432:	f7ff ffbf 	bl	80073b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007436:	4b08      	ldr	r3, [pc, #32]	@ (8007458 <osKernelStart+0x48>)
 8007438:	2202      	movs	r2, #2
 800743a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800743c:	f001 f892 	bl	8008564 <vTaskStartScheduler>
      stat = osOK;
 8007440:	2300      	movs	r3, #0
 8007442:	607b      	str	r3, [r7, #4]
 8007444:	e002      	b.n	800744c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007446:	f04f 33ff 	mov.w	r3, #4294967295
 800744a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800744c:	687b      	ldr	r3, [r7, #4]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	24000814 	.word	0x24000814

0800745c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b08e      	sub	sp, #56	@ 0x38
 8007460:	af04      	add	r7, sp, #16
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800746c:	f3ef 8305 	mrs	r3, IPSR
 8007470:	617b      	str	r3, [r7, #20]
  return(result);
 8007472:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007474:	2b00      	cmp	r3, #0
 8007476:	d17e      	bne.n	8007576 <osThreadNew+0x11a>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d07b      	beq.n	8007576 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800747e:	2380      	movs	r3, #128	@ 0x80
 8007480:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007482:	2318      	movs	r3, #24
 8007484:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800748a:	f04f 33ff 	mov.w	r3, #4294967295
 800748e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d045      	beq.n	8007522 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <osThreadNew+0x48>
        name = attr->name;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d008      	beq.n	80074ca <osThreadNew+0x6e>
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	2b38      	cmp	r3, #56	@ 0x38
 80074bc:	d805      	bhi.n	80074ca <osThreadNew+0x6e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <osThreadNew+0x72>
        return (NULL);
 80074ca:	2300      	movs	r3, #0
 80074cc:	e054      	b.n	8007578 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	089b      	lsrs	r3, r3, #2
 80074dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00e      	beq.n	8007504 <osThreadNew+0xa8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	2ba7      	cmp	r3, #167	@ 0xa7
 80074ec:	d90a      	bls.n	8007504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d006      	beq.n	8007504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <osThreadNew+0xa8>
        mem = 1;
 80074fe:	2301      	movs	r3, #1
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	e010      	b.n	8007526 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10c      	bne.n	8007526 <osThreadNew+0xca>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d108      	bne.n	8007526 <osThreadNew+0xca>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <osThreadNew+0xca>
          mem = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	61bb      	str	r3, [r7, #24]
 8007520:	e001      	b.n	8007526 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d110      	bne.n	800754e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007534:	9202      	str	r2, [sp, #8]
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6a3a      	ldr	r2, [r7, #32]
 8007540:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f000 fe1a 	bl	800817c <xTaskCreateStatic>
 8007548:	4603      	mov	r3, r0
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	e013      	b.n	8007576 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d110      	bne.n	8007576 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	b29a      	uxth	r2, r3
 8007558:	f107 0310 	add.w	r3, r7, #16
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 fe68 	bl	800823c <xTaskCreate>
 800756c:	4603      	mov	r3, r0
 800756e:	2b01      	cmp	r3, #1
 8007570:	d001      	beq.n	8007576 <osThreadNew+0x11a>
            hTask = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007576:	693b      	ldr	r3, [r7, #16]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	@ 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007588:	f3ef 8305 	mrs	r3, IPSR
 800758c:	60bb      	str	r3, [r7, #8]
  return(result);
 800758e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <osDelay+0x1c>
    stat = osErrorISR;
 8007594:	f06f 0305 	mvn.w	r3, #5
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	e007      	b.n	80075ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 ffa6 	bl	80084f8 <vTaskDelay>
    }
  }

  return (stat);
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a07      	ldr	r2, [pc, #28]	@ (80075e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80075c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4a06      	ldr	r2, [pc, #24]	@ (80075e8 <vApplicationGetIdleTaskMemory+0x30>)
 80075ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2280      	movs	r2, #128	@ 0x80
 80075d4:	601a      	str	r2, [r3, #0]
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	24000818 	.word	0x24000818
 80075e8:	240008c0 	.word	0x240008c0

080075ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4a07      	ldr	r2, [pc, #28]	@ (8007618 <vApplicationGetTimerTaskMemory+0x2c>)
 80075fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4a06      	ldr	r2, [pc, #24]	@ (800761c <vApplicationGetTimerTaskMemory+0x30>)
 8007602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800760a:	601a      	str	r2, [r3, #0]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	24000ac0 	.word	0x24000ac0
 800761c:	24000b68 	.word	0x24000b68

08007620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f103 0208 	add.w	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f04f 32ff 	mov.w	r2, #4294967295
 8007638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f103 0208 	add.w	r2, r3, #8
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f103 0208 	add.w	r2, r3, #8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	601a      	str	r2, [r3, #0]
}
 80076b6:	bf00      	nop
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d103      	bne.n	80076e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e00c      	b.n	80076fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3308      	adds	r3, #8
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e002      	b.n	80076f0 <vListInsert+0x2e>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d2f6      	bcs.n	80076ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	601a      	str	r2, [r3, #0]
}
 8007728:	bf00      	nop
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6892      	ldr	r2, [r2, #8]
 800774a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6852      	ldr	r2, [r2, #4]
 8007754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	429a      	cmp	r2, r3
 800775e:	d103      	bne.n	8007768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	1e5a      	subs	r2, r3, #1
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80077b4:	f002 f8a8 	bl	8009908 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c0:	68f9      	ldr	r1, [r7, #12]
 80077c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80077c4:	fb01 f303 	mul.w	r3, r1, r3
 80077c8:	441a      	add	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e4:	3b01      	subs	r3, #1
 80077e6:	68f9      	ldr	r1, [r7, #12]
 80077e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	441a      	add	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	22ff      	movs	r2, #255	@ 0xff
 80077f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	22ff      	movs	r2, #255	@ 0xff
 8007800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d114      	bne.n	8007834 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01a      	beq.n	8007848 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3310      	adds	r3, #16
 8007816:	4618      	mov	r0, r3
 8007818:	f001 f942 	bl	8008aa0 <xTaskRemoveFromEventList>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d012      	beq.n	8007848 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007822:	4b0d      	ldr	r3, [pc, #52]	@ (8007858 <xQueueGenericReset+0xd0>)
 8007824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	e009      	b.n	8007848 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3310      	adds	r3, #16
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff fef1 	bl	8007620 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3324      	adds	r3, #36	@ 0x24
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff feec 	bl	8007620 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007848:	f002 f890 	bl	800996c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800784c:	2301      	movs	r3, #1
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08e      	sub	sp, #56	@ 0x38
 8007860:	af02      	add	r7, sp, #8
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10b      	bne.n	8007888 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <xQueueGenericCreateStatic+0x56>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <xQueueGenericCreateStatic+0x5a>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <xQueueGenericCreateStatic+0x5c>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10b      	bne.n	80078d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	623b      	str	r3, [r7, #32]
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	e7fd      	b.n	80078d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <xQueueGenericCreateStatic+0x84>
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <xQueueGenericCreateStatic+0x88>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <xQueueGenericCreateStatic+0x8a>
 80078e4:	2300      	movs	r3, #0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	61fb      	str	r3, [r7, #28]
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007902:	2350      	movs	r3, #80	@ 0x50
 8007904:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b50      	cmp	r3, #80	@ 0x50
 800790a:	d00b      	beq.n	8007924 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	61bb      	str	r3, [r7, #24]
}
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	e7fd      	b.n	8007920 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007924:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800792a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00d      	beq.n	800794c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007938:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800793c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f805 	bl	8007956 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800794e:	4618      	mov	r0, r3
 8007950:	3730      	adds	r7, #48	@ 0x30
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	607a      	str	r2, [r7, #4]
 8007962:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d103      	bne.n	8007972 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	69ba      	ldr	r2, [r7, #24]
 800796e:	601a      	str	r2, [r3, #0]
 8007970:	e002      	b.n	8007978 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007984:	2101      	movs	r1, #1
 8007986:	69b8      	ldr	r0, [r7, #24]
 8007988:	f7ff fefe 	bl	8007788 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	78fa      	ldrb	r2, [r7, #3]
 8007990:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08e      	sub	sp, #56	@ 0x38
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
 80079a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079aa:	2300      	movs	r3, #0
 80079ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10b      	bne.n	80079d0 <xQueueGenericSend+0x34>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	e7fd      	b.n	80079cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d103      	bne.n	80079de <xQueueGenericSend+0x42>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d101      	bne.n	80079e2 <xQueueGenericSend+0x46>
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <xQueueGenericSend+0x48>
 80079e2:	2300      	movs	r3, #0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10b      	bne.n	8007a00 <xQueueGenericSend+0x64>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079fa:	bf00      	nop
 80079fc:	bf00      	nop
 80079fe:	e7fd      	b.n	80079fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d103      	bne.n	8007a0e <xQueueGenericSend+0x72>
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <xQueueGenericSend+0x76>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <xQueueGenericSend+0x78>
 8007a12:	2300      	movs	r3, #0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d10b      	bne.n	8007a30 <xQueueGenericSend+0x94>
	__asm volatile
 8007a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1c:	f383 8811 	msr	BASEPRI, r3
 8007a20:	f3bf 8f6f 	isb	sy
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	623b      	str	r3, [r7, #32]
}
 8007a2a:	bf00      	nop
 8007a2c:	bf00      	nop
 8007a2e:	e7fd      	b.n	8007a2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a30:	f001 f9fc 	bl	8008e2c <xTaskGetSchedulerState>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d102      	bne.n	8007a40 <xQueueGenericSend+0xa4>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <xQueueGenericSend+0xa8>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <xQueueGenericSend+0xaa>
 8007a44:	2300      	movs	r3, #0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10b      	bne.n	8007a62 <xQueueGenericSend+0xc6>
	__asm volatile
 8007a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4e:	f383 8811 	msr	BASEPRI, r3
 8007a52:	f3bf 8f6f 	isb	sy
 8007a56:	f3bf 8f4f 	dsb	sy
 8007a5a:	61fb      	str	r3, [r7, #28]
}
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	e7fd      	b.n	8007a5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a62:	f001 ff51 	bl	8009908 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d302      	bcc.n	8007a78 <xQueueGenericSend+0xdc>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d129      	bne.n	8007acc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a78:	683a      	ldr	r2, [r7, #0]
 8007a7a:	68b9      	ldr	r1, [r7, #8]
 8007a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a7e:	f000 fa0f 	bl	8007ea0 <prvCopyDataToQueue>
 8007a82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d010      	beq.n	8007aae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8e:	3324      	adds	r3, #36	@ 0x24
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 f805 	bl	8008aa0 <xTaskRemoveFromEventList>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d013      	beq.n	8007ac4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a9c:	4b3f      	ldr	r3, [pc, #252]	@ (8007b9c <xQueueGenericSend+0x200>)
 8007a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	e00a      	b.n	8007ac4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ab4:	4b39      	ldr	r3, [pc, #228]	@ (8007b9c <xQueueGenericSend+0x200>)
 8007ab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aba:	601a      	str	r2, [r3, #0]
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ac4:	f001 ff52 	bl	800996c <vPortExitCritical>
				return pdPASS;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e063      	b.n	8007b94 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d103      	bne.n	8007ada <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ad2:	f001 ff4b 	bl	800996c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	e05c      	b.n	8007b94 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ae0:	f107 0314 	add.w	r3, r7, #20
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 f83f 	bl	8008b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007aea:	2301      	movs	r3, #1
 8007aec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aee:	f001 ff3d 	bl	800996c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007af2:	f000 fda7 	bl	8008644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007af6:	f001 ff07 	bl	8009908 <vPortEnterCritical>
 8007afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007afc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b00:	b25b      	sxtb	r3, r3
 8007b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b06:	d103      	bne.n	8007b10 <xQueueGenericSend+0x174>
 8007b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b16:	b25b      	sxtb	r3, r3
 8007b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b1c:	d103      	bne.n	8007b26 <xQueueGenericSend+0x18a>
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b26:	f001 ff21 	bl	800996c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b2a:	1d3a      	adds	r2, r7, #4
 8007b2c:	f107 0314 	add.w	r3, r7, #20
 8007b30:	4611      	mov	r1, r2
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 f82e 	bl	8008b94 <xTaskCheckForTimeOut>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d124      	bne.n	8007b88 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b40:	f000 faa6 	bl	8008090 <prvIsQueueFull>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d018      	beq.n	8007b7c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	3310      	adds	r3, #16
 8007b4e:	687a      	ldr	r2, [r7, #4]
 8007b50:	4611      	mov	r1, r2
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 ff52 	bl	80089fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b5a:	f000 fa31 	bl	8007fc0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b5e:	f000 fd7f 	bl	8008660 <xTaskResumeAll>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f47f af7c 	bne.w	8007a62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007b9c <xQueueGenericSend+0x200>)
 8007b6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	e772      	b.n	8007a62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b7e:	f000 fa1f 	bl	8007fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b82:	f000 fd6d 	bl	8008660 <xTaskResumeAll>
 8007b86:	e76c      	b.n	8007a62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b8a:	f000 fa19 	bl	8007fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b8e:	f000 fd67 	bl	8008660 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b92:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3738      	adds	r7, #56	@ 0x38
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	e000ed04 	.word	0xe000ed04

08007ba0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b090      	sub	sp, #64	@ 0x40
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	60f8      	str	r0, [r7, #12]
 8007ba8:	60b9      	str	r1, [r7, #8]
 8007baa:	607a      	str	r2, [r7, #4]
 8007bac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10b      	bne.n	8007bd0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	e7fd      	b.n	8007bcc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <xQueueGenericSendFromISR+0x3e>
 8007bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <xQueueGenericSendFromISR+0x42>
 8007bde:	2301      	movs	r3, #1
 8007be0:	e000      	b.n	8007be4 <xQueueGenericSendFromISR+0x44>
 8007be2:	2300      	movs	r3, #0
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10b      	bne.n	8007c00 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007bfa:	bf00      	nop
 8007bfc:	bf00      	nop
 8007bfe:	e7fd      	b.n	8007bfc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d103      	bne.n	8007c0e <xQueueGenericSendFromISR+0x6e>
 8007c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <xQueueGenericSendFromISR+0x72>
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e000      	b.n	8007c14 <xQueueGenericSendFromISR+0x74>
 8007c12:	2300      	movs	r3, #0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10b      	bne.n	8007c30 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	623b      	str	r3, [r7, #32]
}
 8007c2a:	bf00      	nop
 8007c2c:	bf00      	nop
 8007c2e:	e7fd      	b.n	8007c2c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c30:	f001 ff4a 	bl	8009ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007c34:	f3ef 8211 	mrs	r2, BASEPRI
 8007c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	61fa      	str	r2, [r7, #28]
 8007c4a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c4e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d302      	bcc.n	8007c62 <xQueueGenericSendFromISR+0xc2>
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d12f      	bne.n	8007cc2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	68b9      	ldr	r1, [r7, #8]
 8007c76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007c78:	f000 f912 	bl	8007ea0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d112      	bne.n	8007cac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d016      	beq.n	8007cbc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c90:	3324      	adds	r3, #36	@ 0x24
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 ff04 	bl	8008aa0 <xTaskRemoveFromEventList>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00e      	beq.n	8007cbc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	e007      	b.n	8007cbc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	b25a      	sxtb	r2, r3
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007cc0:	e001      	b.n	8007cc6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007cd0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3740      	adds	r7, #64	@ 0x40
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08c      	sub	sp, #48	@ 0x30
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10b      	bne.n	8007d0e <xQueueReceive+0x32>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	623b      	str	r3, [r7, #32]
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	e7fd      	b.n	8007d0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d103      	bne.n	8007d1c <xQueueReceive+0x40>
 8007d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d101      	bne.n	8007d20 <xQueueReceive+0x44>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e000      	b.n	8007d22 <xQueueReceive+0x46>
 8007d20:	2300      	movs	r3, #0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d10b      	bne.n	8007d3e <xQueueReceive+0x62>
	__asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	61fb      	str	r3, [r7, #28]
}
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d3e:	f001 f875 	bl	8008e2c <xTaskGetSchedulerState>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <xQueueReceive+0x72>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d101      	bne.n	8007d52 <xQueueReceive+0x76>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e000      	b.n	8007d54 <xQueueReceive+0x78>
 8007d52:	2300      	movs	r3, #0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10b      	bne.n	8007d70 <xQueueReceive+0x94>
	__asm volatile
 8007d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5c:	f383 8811 	msr	BASEPRI, r3
 8007d60:	f3bf 8f6f 	isb	sy
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	61bb      	str	r3, [r7, #24]
}
 8007d6a:	bf00      	nop
 8007d6c:	bf00      	nop
 8007d6e:	e7fd      	b.n	8007d6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d70:	f001 fdca 	bl	8009908 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d01f      	beq.n	8007dc0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d84:	f000 f8f6 	bl	8007f74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	1e5a      	subs	r2, r3, #1
 8007d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00f      	beq.n	8007db8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9a:	3310      	adds	r3, #16
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fe7f 	bl	8008aa0 <xTaskRemoveFromEventList>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007da8:	4b3c      	ldr	r3, [pc, #240]	@ (8007e9c <xQueueReceive+0x1c0>)
 8007daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007db8:	f001 fdd8 	bl	800996c <vPortExitCritical>
				return pdPASS;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e069      	b.n	8007e94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d103      	bne.n	8007dce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dc6:	f001 fdd1 	bl	800996c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	e062      	b.n	8007e94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd4:	f107 0310 	add.w	r3, r7, #16
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fec5 	bl	8008b68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007de2:	f001 fdc3 	bl	800996c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007de6:	f000 fc2d 	bl	8008644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dea:	f001 fd8d 	bl	8009908 <vPortEnterCritical>
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007df4:	b25b      	sxtb	r3, r3
 8007df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfa:	d103      	bne.n	8007e04 <xQueueReceive+0x128>
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e0a:	b25b      	sxtb	r3, r3
 8007e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e10:	d103      	bne.n	8007e1a <xQueueReceive+0x13e>
 8007e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e1a:	f001 fda7 	bl	800996c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e1e:	1d3a      	adds	r2, r7, #4
 8007e20:	f107 0310 	add.w	r3, r7, #16
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 feb4 	bl	8008b94 <xTaskCheckForTimeOut>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d123      	bne.n	8007e7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e34:	f000 f916 	bl	8008064 <prvIsQueueEmpty>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d017      	beq.n	8007e6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e40:	3324      	adds	r3, #36	@ 0x24
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	4611      	mov	r1, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 fdd8 	bl	80089fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e4e:	f000 f8b7 	bl	8007fc0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e52:	f000 fc05 	bl	8008660 <xTaskResumeAll>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d189      	bne.n	8007d70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e9c <xQueueReceive+0x1c0>)
 8007e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	e780      	b.n	8007d70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e70:	f000 f8a6 	bl	8007fc0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e74:	f000 fbf4 	bl	8008660 <xTaskResumeAll>
 8007e78:	e77a      	b.n	8007d70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e7c:	f000 f8a0 	bl	8007fc0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e80:	f000 fbee 	bl	8008660 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e86:	f000 f8ed 	bl	8008064 <prvIsQueueEmpty>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f43f af6f 	beq.w	8007d70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3730      	adds	r7, #48	@ 0x30
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007eac:	2300      	movs	r3, #0
 8007eae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10d      	bne.n	8007eda <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d14d      	bne.n	8007f62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f000 ffcc 	bl	8008e68 <xTaskPriorityDisinherit>
 8007ed0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	609a      	str	r2, [r3, #8]
 8007ed8:	e043      	b.n	8007f62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d119      	bne.n	8007f14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6858      	ldr	r0, [r3, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee8:	461a      	mov	r2, r3
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	f002 f8a0 	bl	800a030 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef8:	441a      	add	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d32b      	bcc.n	8007f62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	605a      	str	r2, [r3, #4]
 8007f12:	e026      	b.n	8007f62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68d8      	ldr	r0, [r3, #12]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	68b9      	ldr	r1, [r7, #8]
 8007f20:	f002 f886 	bl	800a030 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2c:	425b      	negs	r3, r3
 8007f2e:	441a      	add	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	68da      	ldr	r2, [r3, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d207      	bcs.n	8007f50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f48:	425b      	negs	r3, r3
 8007f4a:	441a      	add	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d105      	bne.n	8007f62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007f6a:	697b      	ldr	r3, [r7, #20]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d018      	beq.n	8007fb8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8e:	441a      	add	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d303      	bcc.n	8007fa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	68d9      	ldr	r1, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6838      	ldr	r0, [r7, #0]
 8007fb4:	f002 f83c 	bl	800a030 <memcpy>
	}
}
 8007fb8:	bf00      	nop
 8007fba:	3708      	adds	r7, #8
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fc8:	f001 fc9e 	bl	8009908 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fd2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fd4:	e011      	b.n	8007ffa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d012      	beq.n	8008004 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3324      	adds	r3, #36	@ 0x24
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fd5c 	bl	8008aa0 <xTaskRemoveFromEventList>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007fee:	f000 fe35 	bl	8008c5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	dce9      	bgt.n	8007fd6 <prvUnlockQueue+0x16>
 8008002:	e000      	b.n	8008006 <prvUnlockQueue+0x46>
					break;
 8008004:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	22ff      	movs	r2, #255	@ 0xff
 800800a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800800e:	f001 fcad 	bl	800996c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008012:	f001 fc79 	bl	8009908 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800801c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800801e:	e011      	b.n	8008044 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d012      	beq.n	800804e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	3310      	adds	r3, #16
 800802c:	4618      	mov	r0, r3
 800802e:	f000 fd37 	bl	8008aa0 <xTaskRemoveFromEventList>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008038:	f000 fe10 	bl	8008c5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800803c:	7bbb      	ldrb	r3, [r7, #14]
 800803e:	3b01      	subs	r3, #1
 8008040:	b2db      	uxtb	r3, r3
 8008042:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008044:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008048:	2b00      	cmp	r3, #0
 800804a:	dce9      	bgt.n	8008020 <prvUnlockQueue+0x60>
 800804c:	e000      	b.n	8008050 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800804e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	22ff      	movs	r2, #255	@ 0xff
 8008054:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008058:	f001 fc88 	bl	800996c <vPortExitCritical>
}
 800805c:	bf00      	nop
 800805e:	3710      	adds	r7, #16
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}

08008064 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800806c:	f001 fc4c 	bl	8009908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008074:	2b00      	cmp	r3, #0
 8008076:	d102      	bne.n	800807e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008078:	2301      	movs	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e001      	b.n	8008082 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800807e:	2300      	movs	r3, #0
 8008080:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008082:	f001 fc73 	bl	800996c <vPortExitCritical>

	return xReturn;
 8008086:	68fb      	ldr	r3, [r7, #12]
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008098:	f001 fc36 	bl	8009908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d102      	bne.n	80080ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080a8:	2301      	movs	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
 80080ac:	e001      	b.n	80080b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080b2:	f001 fc5b 	bl	800996c <vPortExitCritical>

	return xReturn;
 80080b6:	68fb      	ldr	r3, [r7, #12]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	e014      	b.n	80080fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008110 <vQueueAddToRegistry+0x50>)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10b      	bne.n	80080f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080dc:	490c      	ldr	r1, [pc, #48]	@ (8008110 <vQueueAddToRegistry+0x50>)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080e6:	4a0a      	ldr	r2, [pc, #40]	@ (8008110 <vQueueAddToRegistry+0x50>)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	4413      	add	r3, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080f2:	e006      	b.n	8008102 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3301      	adds	r3, #1
 80080f8:	60fb      	str	r3, [r7, #12]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2b07      	cmp	r3, #7
 80080fe:	d9e7      	bls.n	80080d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	24000f68 	.word	0x24000f68

08008114 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008124:	f001 fbf0 	bl	8009908 <vPortEnterCritical>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800812e:	b25b      	sxtb	r3, r3
 8008130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008134:	d103      	bne.n	800813e <vQueueWaitForMessageRestricted+0x2a>
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008144:	b25b      	sxtb	r3, r3
 8008146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814a:	d103      	bne.n	8008154 <vQueueWaitForMessageRestricted+0x40>
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008154:	f001 fc0a 	bl	800996c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800815c:	2b00      	cmp	r3, #0
 800815e:	d106      	bne.n	800816e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3324      	adds	r3, #36	@ 0x24
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	68b9      	ldr	r1, [r7, #8]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fc6d 	bl	8008a48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800816e:	6978      	ldr	r0, [r7, #20]
 8008170:	f7ff ff26 	bl	8007fc0 <prvUnlockQueue>
	}
 8008174:	bf00      	nop
 8008176:	3718      	adds	r7, #24
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800817c:	b580      	push	{r7, lr}
 800817e:	b08e      	sub	sp, #56	@ 0x38
 8008180:	af04      	add	r7, sp, #16
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800818a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10b      	bne.n	80081a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	623b      	str	r3, [r7, #32]
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	e7fd      	b.n	80081a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10b      	bne.n	80081c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	61fb      	str	r3, [r7, #28]
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	e7fd      	b.n	80081c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081c6:	23a8      	movs	r3, #168	@ 0xa8
 80081c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2ba8      	cmp	r3, #168	@ 0xa8
 80081ce:	d00b      	beq.n	80081e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	61bb      	str	r3, [r7, #24]
}
 80081e2:	bf00      	nop
 80081e4:	bf00      	nop
 80081e6:	e7fd      	b.n	80081e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80081e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01e      	beq.n	800822e <xTaskCreateStatic+0xb2>
 80081f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d01b      	beq.n	800822e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80081fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	2202      	movs	r2, #2
 8008204:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008208:	2300      	movs	r3, #0
 800820a:	9303      	str	r3, [sp, #12]
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	9302      	str	r3, [sp, #8]
 8008210:	f107 0314 	add.w	r3, r7, #20
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	68b9      	ldr	r1, [r7, #8]
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 f851 	bl	80082c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008226:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008228:	f000 f8f6 	bl	8008418 <prvAddNewTaskToReadyList>
 800822c:	e001      	b.n	8008232 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800822e:	2300      	movs	r3, #0
 8008230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008232:	697b      	ldr	r3, [r7, #20]
	}
 8008234:	4618      	mov	r0, r3
 8008236:	3728      	adds	r7, #40	@ 0x28
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800823c:	b580      	push	{r7, lr}
 800823e:	b08c      	sub	sp, #48	@ 0x30
 8008240:	af04      	add	r7, sp, #16
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	4613      	mov	r3, r2
 800824a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800824c:	88fb      	ldrh	r3, [r7, #6]
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	4618      	mov	r0, r3
 8008252:	f001 fc7b 	bl	8009b4c <pvPortMalloc>
 8008256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00e      	beq.n	800827c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800825e:	20a8      	movs	r0, #168	@ 0xa8
 8008260:	f001 fc74 	bl	8009b4c <pvPortMalloc>
 8008264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d003      	beq.n	8008274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	631a      	str	r2, [r3, #48]	@ 0x30
 8008272:	e005      	b.n	8008280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008274:	6978      	ldr	r0, [r7, #20]
 8008276:	f001 fd37 	bl	8009ce8 <vPortFree>
 800827a:	e001      	b.n	8008280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d017      	beq.n	80082b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800828e:	88fa      	ldrh	r2, [r7, #6]
 8008290:	2300      	movs	r3, #0
 8008292:	9303      	str	r3, [sp, #12]
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	9302      	str	r3, [sp, #8]
 8008298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800829a:	9301      	str	r3, [sp, #4]
 800829c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	68b9      	ldr	r1, [r7, #8]
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 f80f 	bl	80082c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082aa:	69f8      	ldr	r0, [r7, #28]
 80082ac:	f000 f8b4 	bl	8008418 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082b0:	2301      	movs	r3, #1
 80082b2:	61bb      	str	r3, [r7, #24]
 80082b4:	e002      	b.n	80082bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082b6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082bc:	69bb      	ldr	r3, [r7, #24]
	}
 80082be:	4618      	mov	r0, r3
 80082c0:	3720      	adds	r7, #32
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	461a      	mov	r2, r3
 80082e0:	21a5      	movs	r1, #165	@ 0xa5
 80082e2:	f001 fe21 	bl	8009f28 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082ea:	6879      	ldr	r1, [r7, #4]
 80082ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80082f0:	440b      	add	r3, r1
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	f023 0307 	bic.w	r3, r3, #7
 80082fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800830a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830e:	f383 8811 	msr	BASEPRI, r3
 8008312:	f3bf 8f6f 	isb	sy
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	617b      	str	r3, [r7, #20]
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	e7fd      	b.n	800831e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01f      	beq.n	8008368 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]
 800832c:	e012      	b.n	8008354 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	4413      	add	r3, r2
 8008334:	7819      	ldrb	r1, [r3, #0]
 8008336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4413      	add	r3, r2
 800833c:	3334      	adds	r3, #52	@ 0x34
 800833e:	460a      	mov	r2, r1
 8008340:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	4413      	add	r3, r2
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d006      	beq.n	800835c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	3301      	adds	r3, #1
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	2b0f      	cmp	r3, #15
 8008358:	d9e9      	bls.n	800832e <prvInitialiseNewTask+0x66>
 800835a:	e000      	b.n	800835e <prvInitialiseNewTask+0x96>
			{
				break;
 800835c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008366:	e003      	b.n	8008370 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008372:	2b37      	cmp	r3, #55	@ 0x37
 8008374:	d901      	bls.n	800837a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008376:	2337      	movs	r3, #55	@ 0x37
 8008378:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800837a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800837e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008384:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	2200      	movs	r2, #0
 800838a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800838c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838e:	3304      	adds	r3, #4
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff f965 	bl	8007660 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	3318      	adds	r3, #24
 800839a:	4618      	mov	r0, r3
 800839c:	f7ff f960 	bl	8007660 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083b4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b8:	2200      	movs	r2, #0
 80083ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c8:	3354      	adds	r3, #84	@ 0x54
 80083ca:	224c      	movs	r2, #76	@ 0x4c
 80083cc:	2100      	movs	r1, #0
 80083ce:	4618      	mov	r0, r3
 80083d0:	f001 fdaa 	bl	8009f28 <memset>
 80083d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d6:	4a0d      	ldr	r2, [pc, #52]	@ (800840c <prvInitialiseNewTask+0x144>)
 80083d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80083da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083dc:	4a0c      	ldr	r2, [pc, #48]	@ (8008410 <prvInitialiseNewTask+0x148>)
 80083de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80083e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008414 <prvInitialiseNewTask+0x14c>)
 80083e4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	68f9      	ldr	r1, [r7, #12]
 80083ea:	69b8      	ldr	r0, [r7, #24]
 80083ec:	f001 f95a 	bl	80096a4 <pxPortInitialiseStack>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008402:	bf00      	nop
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	240051fc 	.word	0x240051fc
 8008410:	24005264 	.word	0x24005264
 8008414:	240052cc 	.word	0x240052cc

08008418 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008420:	f001 fa72 	bl	8009908 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008424:	4b2d      	ldr	r3, [pc, #180]	@ (80084dc <prvAddNewTaskToReadyList+0xc4>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	4a2c      	ldr	r2, [pc, #176]	@ (80084dc <prvAddNewTaskToReadyList+0xc4>)
 800842c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800842e:	4b2c      	ldr	r3, [pc, #176]	@ (80084e0 <prvAddNewTaskToReadyList+0xc8>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d109      	bne.n	800844a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008436:	4a2a      	ldr	r2, [pc, #168]	@ (80084e0 <prvAddNewTaskToReadyList+0xc8>)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800843c:	4b27      	ldr	r3, [pc, #156]	@ (80084dc <prvAddNewTaskToReadyList+0xc4>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d110      	bne.n	8008466 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008444:	f000 fc2e 	bl	8008ca4 <prvInitialiseTaskLists>
 8008448:	e00d      	b.n	8008466 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800844a:	4b26      	ldr	r3, [pc, #152]	@ (80084e4 <prvAddNewTaskToReadyList+0xcc>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d109      	bne.n	8008466 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008452:	4b23      	ldr	r3, [pc, #140]	@ (80084e0 <prvAddNewTaskToReadyList+0xc8>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800845c:	429a      	cmp	r2, r3
 800845e:	d802      	bhi.n	8008466 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008460:	4a1f      	ldr	r2, [pc, #124]	@ (80084e0 <prvAddNewTaskToReadyList+0xc8>)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008466:	4b20      	ldr	r3, [pc, #128]	@ (80084e8 <prvAddNewTaskToReadyList+0xd0>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3301      	adds	r3, #1
 800846c:	4a1e      	ldr	r2, [pc, #120]	@ (80084e8 <prvAddNewTaskToReadyList+0xd0>)
 800846e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008470:	4b1d      	ldr	r3, [pc, #116]	@ (80084e8 <prvAddNewTaskToReadyList+0xd0>)
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847c:	4b1b      	ldr	r3, [pc, #108]	@ (80084ec <prvAddNewTaskToReadyList+0xd4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	429a      	cmp	r2, r3
 8008482:	d903      	bls.n	800848c <prvAddNewTaskToReadyList+0x74>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	4a18      	ldr	r2, [pc, #96]	@ (80084ec <prvAddNewTaskToReadyList+0xd4>)
 800848a:	6013      	str	r3, [r2, #0]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008490:	4613      	mov	r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4a15      	ldr	r2, [pc, #84]	@ (80084f0 <prvAddNewTaskToReadyList+0xd8>)
 800849a:	441a      	add	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3304      	adds	r3, #4
 80084a0:	4619      	mov	r1, r3
 80084a2:	4610      	mov	r0, r2
 80084a4:	f7ff f8e9 	bl	800767a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084a8:	f001 fa60 	bl	800996c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084ac:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <prvAddNewTaskToReadyList+0xcc>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00e      	beq.n	80084d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084b4:	4b0a      	ldr	r3, [pc, #40]	@ (80084e0 <prvAddNewTaskToReadyList+0xc8>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	429a      	cmp	r2, r3
 80084c0:	d207      	bcs.n	80084d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084c2:	4b0c      	ldr	r3, [pc, #48]	@ (80084f4 <prvAddNewTaskToReadyList+0xdc>)
 80084c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084c8:	601a      	str	r2, [r3, #0]
 80084ca:	f3bf 8f4f 	dsb	sy
 80084ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	2400147c 	.word	0x2400147c
 80084e0:	24000fa8 	.word	0x24000fa8
 80084e4:	24001488 	.word	0x24001488
 80084e8:	24001498 	.word	0x24001498
 80084ec:	24001484 	.word	0x24001484
 80084f0:	24000fac 	.word	0x24000fac
 80084f4:	e000ed04 	.word	0xe000ed04

080084f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d018      	beq.n	800853c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800850a:	4b14      	ldr	r3, [pc, #80]	@ (800855c <vTaskDelay+0x64>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <vTaskDelay+0x32>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	60bb      	str	r3, [r7, #8]
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop
 8008528:	e7fd      	b.n	8008526 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800852a:	f000 f88b 	bl	8008644 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800852e:	2100      	movs	r1, #0
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 fd09 	bl	8008f48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008536:	f000 f893 	bl	8008660 <xTaskResumeAll>
 800853a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d107      	bne.n	8008552 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008542:	4b07      	ldr	r3, [pc, #28]	@ (8008560 <vTaskDelay+0x68>)
 8008544:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008552:	bf00      	nop
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	240014a4 	.word	0x240014a4
 8008560:	e000ed04 	.word	0xe000ed04

08008564 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08a      	sub	sp, #40	@ 0x28
 8008568:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008572:	463a      	mov	r2, r7
 8008574:	1d39      	adds	r1, r7, #4
 8008576:	f107 0308 	add.w	r3, r7, #8
 800857a:	4618      	mov	r0, r3
 800857c:	f7ff f81c 	bl	80075b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008580:	6839      	ldr	r1, [r7, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	9202      	str	r2, [sp, #8]
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	2300      	movs	r3, #0
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	2300      	movs	r3, #0
 8008590:	460a      	mov	r2, r1
 8008592:	4924      	ldr	r1, [pc, #144]	@ (8008624 <vTaskStartScheduler+0xc0>)
 8008594:	4824      	ldr	r0, [pc, #144]	@ (8008628 <vTaskStartScheduler+0xc4>)
 8008596:	f7ff fdf1 	bl	800817c <xTaskCreateStatic>
 800859a:	4603      	mov	r3, r0
 800859c:	4a23      	ldr	r2, [pc, #140]	@ (800862c <vTaskStartScheduler+0xc8>)
 800859e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085a0:	4b22      	ldr	r3, [pc, #136]	@ (800862c <vTaskStartScheduler+0xc8>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085a8:	2301      	movs	r3, #1
 80085aa:	617b      	str	r3, [r7, #20]
 80085ac:	e001      	b.n	80085b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d102      	bne.n	80085be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085b8:	f000 fd1a 	bl	8008ff0 <xTimerCreateTimerTask>
 80085bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d11b      	bne.n	80085fc <vTaskStartScheduler+0x98>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	613b      	str	r3, [r7, #16]
}
 80085d6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085d8:	4b15      	ldr	r3, [pc, #84]	@ (8008630 <vTaskStartScheduler+0xcc>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3354      	adds	r3, #84	@ 0x54
 80085de:	4a15      	ldr	r2, [pc, #84]	@ (8008634 <vTaskStartScheduler+0xd0>)
 80085e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085e2:	4b15      	ldr	r3, [pc, #84]	@ (8008638 <vTaskStartScheduler+0xd4>)
 80085e4:	f04f 32ff 	mov.w	r2, #4294967295
 80085e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085ea:	4b14      	ldr	r3, [pc, #80]	@ (800863c <vTaskStartScheduler+0xd8>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085f0:	4b13      	ldr	r3, [pc, #76]	@ (8008640 <vTaskStartScheduler+0xdc>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085f6:	f001 f8e3 	bl	80097c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085fa:	e00f      	b.n	800861c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008602:	d10b      	bne.n	800861c <vTaskStartScheduler+0xb8>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	60fb      	str	r3, [r7, #12]
}
 8008616:	bf00      	nop
 8008618:	bf00      	nop
 800861a:	e7fd      	b.n	8008618 <vTaskStartScheduler+0xb4>
}
 800861c:	bf00      	nop
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	0800acc0 	.word	0x0800acc0
 8008628:	08008c75 	.word	0x08008c75
 800862c:	240014a0 	.word	0x240014a0
 8008630:	24000fa8 	.word	0x24000fa8
 8008634:	24000014 	.word	0x24000014
 8008638:	2400149c 	.word	0x2400149c
 800863c:	24001488 	.word	0x24001488
 8008640:	24001480 	.word	0x24001480

08008644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008648:	4b04      	ldr	r3, [pc, #16]	@ (800865c <vTaskSuspendAll+0x18>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3301      	adds	r3, #1
 800864e:	4a03      	ldr	r2, [pc, #12]	@ (800865c <vTaskSuspendAll+0x18>)
 8008650:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008652:	bf00      	nop
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	240014a4 	.word	0x240014a4

08008660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800866a:	2300      	movs	r3, #0
 800866c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800866e:	4b42      	ldr	r3, [pc, #264]	@ (8008778 <xTaskResumeAll+0x118>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <xTaskResumeAll+0x2e>
	__asm volatile
 8008676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867a:	f383 8811 	msr	BASEPRI, r3
 800867e:	f3bf 8f6f 	isb	sy
 8008682:	f3bf 8f4f 	dsb	sy
 8008686:	603b      	str	r3, [r7, #0]
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	e7fd      	b.n	800868a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800868e:	f001 f93b 	bl	8009908 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008692:	4b39      	ldr	r3, [pc, #228]	@ (8008778 <xTaskResumeAll+0x118>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	3b01      	subs	r3, #1
 8008698:	4a37      	ldr	r2, [pc, #220]	@ (8008778 <xTaskResumeAll+0x118>)
 800869a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800869c:	4b36      	ldr	r3, [pc, #216]	@ (8008778 <xTaskResumeAll+0x118>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d162      	bne.n	800876a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086a4:	4b35      	ldr	r3, [pc, #212]	@ (800877c <xTaskResumeAll+0x11c>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d05e      	beq.n	800876a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086ac:	e02f      	b.n	800870e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ae:	4b34      	ldr	r3, [pc, #208]	@ (8008780 <xTaskResumeAll+0x120>)
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3318      	adds	r3, #24
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff f83a 	bl	8007734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff f835 	bl	8007734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008784 <xTaskResumeAll+0x124>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d903      	bls.n	80086de <xTaskResumeAll+0x7e>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086da:	4a2a      	ldr	r2, [pc, #168]	@ (8008784 <xTaskResumeAll+0x124>)
 80086dc:	6013      	str	r3, [r2, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4a27      	ldr	r2, [pc, #156]	@ (8008788 <xTaskResumeAll+0x128>)
 80086ec:	441a      	add	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3304      	adds	r3, #4
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f7fe ffc0 	bl	800767a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086fe:	4b23      	ldr	r3, [pc, #140]	@ (800878c <xTaskResumeAll+0x12c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008704:	429a      	cmp	r2, r3
 8008706:	d302      	bcc.n	800870e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008708:	4b21      	ldr	r3, [pc, #132]	@ (8008790 <xTaskResumeAll+0x130>)
 800870a:	2201      	movs	r2, #1
 800870c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800870e:	4b1c      	ldr	r3, [pc, #112]	@ (8008780 <xTaskResumeAll+0x120>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1cb      	bne.n	80086ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800871c:	f000 fb66 	bl	8008dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008720:	4b1c      	ldr	r3, [pc, #112]	@ (8008794 <xTaskResumeAll+0x134>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d010      	beq.n	800874e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800872c:	f000 f846 	bl	80087bc <xTaskIncrementTick>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d002      	beq.n	800873c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008736:	4b16      	ldr	r3, [pc, #88]	@ (8008790 <xTaskResumeAll+0x130>)
 8008738:	2201      	movs	r2, #1
 800873a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	3b01      	subs	r3, #1
 8008740:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1f1      	bne.n	800872c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008748:	4b12      	ldr	r3, [pc, #72]	@ (8008794 <xTaskResumeAll+0x134>)
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800874e:	4b10      	ldr	r3, [pc, #64]	@ (8008790 <xTaskResumeAll+0x130>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d009      	beq.n	800876a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008756:	2301      	movs	r3, #1
 8008758:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800875a:	4b0f      	ldr	r3, [pc, #60]	@ (8008798 <xTaskResumeAll+0x138>)
 800875c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800876a:	f001 f8ff 	bl	800996c <vPortExitCritical>

	return xAlreadyYielded;
 800876e:	68bb      	ldr	r3, [r7, #8]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	240014a4 	.word	0x240014a4
 800877c:	2400147c 	.word	0x2400147c
 8008780:	2400143c 	.word	0x2400143c
 8008784:	24001484 	.word	0x24001484
 8008788:	24000fac 	.word	0x24000fac
 800878c:	24000fa8 	.word	0x24000fa8
 8008790:	24001490 	.word	0x24001490
 8008794:	2400148c 	.word	0x2400148c
 8008798:	e000ed04 	.word	0xe000ed04

0800879c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80087a2:	4b05      	ldr	r3, [pc, #20]	@ (80087b8 <xTaskGetTickCount+0x1c>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80087a8:	687b      	ldr	r3, [r7, #4]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	24001480 	.word	0x24001480

080087bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008904 <xTaskIncrementTick+0x148>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f040 8090 	bne.w	80088f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008908 <xTaskIncrementTick+0x14c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087d8:	4a4b      	ldr	r2, [pc, #300]	@ (8008908 <xTaskIncrementTick+0x14c>)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d121      	bne.n	8008828 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80087e4:	4b49      	ldr	r3, [pc, #292]	@ (800890c <xTaskIncrementTick+0x150>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <xTaskIncrementTick+0x4a>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	603b      	str	r3, [r7, #0]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <xTaskIncrementTick+0x46>
 8008806:	4b41      	ldr	r3, [pc, #260]	@ (800890c <xTaskIncrementTick+0x150>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	4b40      	ldr	r3, [pc, #256]	@ (8008910 <xTaskIncrementTick+0x154>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a3e      	ldr	r2, [pc, #248]	@ (800890c <xTaskIncrementTick+0x150>)
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	4a3e      	ldr	r2, [pc, #248]	@ (8008910 <xTaskIncrementTick+0x154>)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	4b3e      	ldr	r3, [pc, #248]	@ (8008914 <xTaskIncrementTick+0x158>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	4a3c      	ldr	r2, [pc, #240]	@ (8008914 <xTaskIncrementTick+0x158>)
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	f000 fae2 	bl	8008dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008828:	4b3b      	ldr	r3, [pc, #236]	@ (8008918 <xTaskIncrementTick+0x15c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	429a      	cmp	r2, r3
 8008830:	d349      	bcc.n	80088c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008832:	4b36      	ldr	r3, [pc, #216]	@ (800890c <xTaskIncrementTick+0x150>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800883c:	4b36      	ldr	r3, [pc, #216]	@ (8008918 <xTaskIncrementTick+0x15c>)
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	601a      	str	r2, [r3, #0]
					break;
 8008844:	e03f      	b.n	80088c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008846:	4b31      	ldr	r3, [pc, #196]	@ (800890c <xTaskIncrementTick+0x150>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	429a      	cmp	r2, r3
 800885c:	d203      	bcs.n	8008866 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800885e:	4a2e      	ldr	r2, [pc, #184]	@ (8008918 <xTaskIncrementTick+0x15c>)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008864:	e02f      	b.n	80088c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	3304      	adds	r3, #4
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe ff62 	bl	8007734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	3318      	adds	r3, #24
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe ff59 	bl	8007734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008886:	4b25      	ldr	r3, [pc, #148]	@ (800891c <xTaskIncrementTick+0x160>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	429a      	cmp	r2, r3
 800888c:	d903      	bls.n	8008896 <xTaskIncrementTick+0xda>
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008892:	4a22      	ldr	r2, [pc, #136]	@ (800891c <xTaskIncrementTick+0x160>)
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008920 <xTaskIncrementTick+0x164>)
 80088a4:	441a      	add	r2, r3
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3304      	adds	r3, #4
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f7fe fee4 	bl	800767a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b6:	4b1b      	ldr	r3, [pc, #108]	@ (8008924 <xTaskIncrementTick+0x168>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088bc:	429a      	cmp	r2, r3
 80088be:	d3b8      	bcc.n	8008832 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80088c0:	2301      	movs	r3, #1
 80088c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088c4:	e7b5      	b.n	8008832 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088c6:	4b17      	ldr	r3, [pc, #92]	@ (8008924 <xTaskIncrementTick+0x168>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088cc:	4914      	ldr	r1, [pc, #80]	@ (8008920 <xTaskIncrementTick+0x164>)
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d901      	bls.n	80088e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80088de:	2301      	movs	r3, #1
 80088e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088e2:	4b11      	ldr	r3, [pc, #68]	@ (8008928 <xTaskIncrementTick+0x16c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d007      	beq.n	80088fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80088ea:	2301      	movs	r3, #1
 80088ec:	617b      	str	r3, [r7, #20]
 80088ee:	e004      	b.n	80088fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088f0:	4b0e      	ldr	r3, [pc, #56]	@ (800892c <xTaskIncrementTick+0x170>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	4a0d      	ldr	r2, [pc, #52]	@ (800892c <xTaskIncrementTick+0x170>)
 80088f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088fa:	697b      	ldr	r3, [r7, #20]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	240014a4 	.word	0x240014a4
 8008908:	24001480 	.word	0x24001480
 800890c:	24001434 	.word	0x24001434
 8008910:	24001438 	.word	0x24001438
 8008914:	24001494 	.word	0x24001494
 8008918:	2400149c 	.word	0x2400149c
 800891c:	24001484 	.word	0x24001484
 8008920:	24000fac 	.word	0x24000fac
 8008924:	24000fa8 	.word	0x24000fa8
 8008928:	24001490 	.word	0x24001490
 800892c:	2400148c 	.word	0x2400148c

08008930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008936:	4b2b      	ldr	r3, [pc, #172]	@ (80089e4 <vTaskSwitchContext+0xb4>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800893e:	4b2a      	ldr	r3, [pc, #168]	@ (80089e8 <vTaskSwitchContext+0xb8>)
 8008940:	2201      	movs	r2, #1
 8008942:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008944:	e047      	b.n	80089d6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008946:	4b28      	ldr	r3, [pc, #160]	@ (80089e8 <vTaskSwitchContext+0xb8>)
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800894c:	4b27      	ldr	r3, [pc, #156]	@ (80089ec <vTaskSwitchContext+0xbc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	e011      	b.n	8008978 <vTaskSwitchContext+0x48>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10b      	bne.n	8008972 <vTaskSwitchContext+0x42>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	607b      	str	r3, [r7, #4]
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	e7fd      	b.n	800896e <vTaskSwitchContext+0x3e>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3b01      	subs	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	491d      	ldr	r1, [pc, #116]	@ (80089f0 <vTaskSwitchContext+0xc0>)
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	4613      	mov	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	440b      	add	r3, r1
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0e3      	beq.n	8008954 <vTaskSwitchContext+0x24>
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4a16      	ldr	r2, [pc, #88]	@ (80089f0 <vTaskSwitchContext+0xc0>)
 8008998:	4413      	add	r3, r2
 800899a:	60bb      	str	r3, [r7, #8]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	605a      	str	r2, [r3, #4]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	3308      	adds	r3, #8
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d104      	bne.n	80089bc <vTaskSwitchContext+0x8c>
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	685a      	ldr	r2, [r3, #4]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	605a      	str	r2, [r3, #4]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	4a0c      	ldr	r2, [pc, #48]	@ (80089f4 <vTaskSwitchContext+0xc4>)
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	4a09      	ldr	r2, [pc, #36]	@ (80089ec <vTaskSwitchContext+0xbc>)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089cc:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <vTaskSwitchContext+0xc4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3354      	adds	r3, #84	@ 0x54
 80089d2:	4a09      	ldr	r2, [pc, #36]	@ (80089f8 <vTaskSwitchContext+0xc8>)
 80089d4:	6013      	str	r3, [r2, #0]
}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	240014a4 	.word	0x240014a4
 80089e8:	24001490 	.word	0x24001490
 80089ec:	24001484 	.word	0x24001484
 80089f0:	24000fac 	.word	0x24000fac
 80089f4:	24000fa8 	.word	0x24000fa8
 80089f8:	24000014 	.word	0x24000014

080089fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	60fb      	str	r3, [r7, #12]
}
 8008a1e:	bf00      	nop
 8008a20:	bf00      	nop
 8008a22:	e7fd      	b.n	8008a20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a24:	4b07      	ldr	r3, [pc, #28]	@ (8008a44 <vTaskPlaceOnEventList+0x48>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	3318      	adds	r3, #24
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7fe fe48 	bl	80076c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a32:	2101      	movs	r1, #1
 8008a34:	6838      	ldr	r0, [r7, #0]
 8008a36:	f000 fa87 	bl	8008f48 <prvAddCurrentTaskToDelayedList>
}
 8008a3a:	bf00      	nop
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	24000fa8 	.word	0x24000fa8

08008a48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b086      	sub	sp, #24
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	60b9      	str	r1, [r7, #8]
 8008a52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10b      	bne.n	8008a72 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	617b      	str	r3, [r7, #20]
}
 8008a6c:	bf00      	nop
 8008a6e:	bf00      	nop
 8008a70:	e7fd      	b.n	8008a6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a72:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <vTaskPlaceOnEventListRestricted+0x54>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3318      	adds	r3, #24
 8008a78:	4619      	mov	r1, r3
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f7fe fdfd 	bl	800767a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008a86:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a8c:	6879      	ldr	r1, [r7, #4]
 8008a8e:	68b8      	ldr	r0, [r7, #8]
 8008a90:	f000 fa5a 	bl	8008f48 <prvAddCurrentTaskToDelayedList>
	}
 8008a94:	bf00      	nop
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	24000fa8 	.word	0x24000fa8

08008aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10b      	bne.n	8008ace <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aba:	f383 8811 	msr	BASEPRI, r3
 8008abe:	f3bf 8f6f 	isb	sy
 8008ac2:	f3bf 8f4f 	dsb	sy
 8008ac6:	60fb      	str	r3, [r7, #12]
}
 8008ac8:	bf00      	nop
 8008aca:	bf00      	nop
 8008acc:	e7fd      	b.n	8008aca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	3318      	adds	r3, #24
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fe fe2e 	bl	8007734 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b50 <xTaskRemoveFromEventList+0xb0>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d11d      	bne.n	8008b1c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	3304      	adds	r3, #4
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe fe25 	bl	8007734 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aee:	4b19      	ldr	r3, [pc, #100]	@ (8008b54 <xTaskRemoveFromEventList+0xb4>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d903      	bls.n	8008afe <xTaskRemoveFromEventList+0x5e>
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afa:	4a16      	ldr	r2, [pc, #88]	@ (8008b54 <xTaskRemoveFromEventList+0xb4>)
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b02:	4613      	mov	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4a13      	ldr	r2, [pc, #76]	@ (8008b58 <xTaskRemoveFromEventList+0xb8>)
 8008b0c:	441a      	add	r2, r3
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	3304      	adds	r3, #4
 8008b12:	4619      	mov	r1, r3
 8008b14:	4610      	mov	r0, r2
 8008b16:	f7fe fdb0 	bl	800767a <vListInsertEnd>
 8008b1a:	e005      	b.n	8008b28 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	3318      	adds	r3, #24
 8008b20:	4619      	mov	r1, r3
 8008b22:	480e      	ldr	r0, [pc, #56]	@ (8008b5c <xTaskRemoveFromEventList+0xbc>)
 8008b24:	f7fe fda9 	bl	800767a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b60 <xTaskRemoveFromEventList+0xc0>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d905      	bls.n	8008b42 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b36:	2301      	movs	r3, #1
 8008b38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b64 <xTaskRemoveFromEventList+0xc4>)
 8008b3c:	2201      	movs	r2, #1
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	e001      	b.n	8008b46 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008b42:	2300      	movs	r3, #0
 8008b44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b46:	697b      	ldr	r3, [r7, #20]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	240014a4 	.word	0x240014a4
 8008b54:	24001484 	.word	0x24001484
 8008b58:	24000fac 	.word	0x24000fac
 8008b5c:	2400143c 	.word	0x2400143c
 8008b60:	24000fa8 	.word	0x24000fa8
 8008b64:	24001490 	.word	0x24001490

08008b68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b70:	4b06      	ldr	r3, [pc, #24]	@ (8008b8c <vTaskInternalSetTimeOutState+0x24>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b78:	4b05      	ldr	r3, [pc, #20]	@ (8008b90 <vTaskInternalSetTimeOutState+0x28>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	605a      	str	r2, [r3, #4]
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	24001494 	.word	0x24001494
 8008b90:	24001480 	.word	0x24001480

08008b94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b088      	sub	sp, #32
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10b      	bne.n	8008bbc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	613b      	str	r3, [r7, #16]
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	e7fd      	b.n	8008bb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10b      	bne.n	8008bda <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	60fb      	str	r3, [r7, #12]
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop
 8008bd8:	e7fd      	b.n	8008bd6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008bda:	f000 fe95 	bl	8009908 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bde:	4b1d      	ldr	r3, [pc, #116]	@ (8008c54 <xTaskCheckForTimeOut+0xc0>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf6:	d102      	bne.n	8008bfe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61fb      	str	r3, [r7, #28]
 8008bfc:	e023      	b.n	8008c46 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4b15      	ldr	r3, [pc, #84]	@ (8008c58 <xTaskCheckForTimeOut+0xc4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d007      	beq.n	8008c1a <xTaskCheckForTimeOut+0x86>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d302      	bcc.n	8008c1a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c14:	2301      	movs	r3, #1
 8008c16:	61fb      	str	r3, [r7, #28]
 8008c18:	e015      	b.n	8008c46 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d20b      	bcs.n	8008c3c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff ff99 	bl	8008b68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c36:	2300      	movs	r3, #0
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	e004      	b.n	8008c46 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c42:	2301      	movs	r3, #1
 8008c44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c46:	f000 fe91 	bl	800996c <vPortExitCritical>

	return xReturn;
 8008c4a:	69fb      	ldr	r3, [r7, #28]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3720      	adds	r7, #32
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	24001480 	.word	0x24001480
 8008c58:	24001494 	.word	0x24001494

08008c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c60:	4b03      	ldr	r3, [pc, #12]	@ (8008c70 <vTaskMissedYield+0x14>)
 8008c62:	2201      	movs	r2, #1
 8008c64:	601a      	str	r2, [r3, #0]
}
 8008c66:	bf00      	nop
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	24001490 	.word	0x24001490

08008c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c7c:	f000 f852 	bl	8008d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c80:	4b06      	ldr	r3, [pc, #24]	@ (8008c9c <prvIdleTask+0x28>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d9f9      	bls.n	8008c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c88:	4b05      	ldr	r3, [pc, #20]	@ (8008ca0 <prvIdleTask+0x2c>)
 8008c8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c98:	e7f0      	b.n	8008c7c <prvIdleTask+0x8>
 8008c9a:	bf00      	nop
 8008c9c:	24000fac 	.word	0x24000fac
 8008ca0:	e000ed04 	.word	0xe000ed04

08008ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008caa:	2300      	movs	r3, #0
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	e00c      	b.n	8008cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4a12      	ldr	r2, [pc, #72]	@ (8008d04 <prvInitialiseTaskLists+0x60>)
 8008cbc:	4413      	add	r3, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe fcae 	bl	8007620 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	607b      	str	r3, [r7, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b37      	cmp	r3, #55	@ 0x37
 8008cce:	d9ef      	bls.n	8008cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cd0:	480d      	ldr	r0, [pc, #52]	@ (8008d08 <prvInitialiseTaskLists+0x64>)
 8008cd2:	f7fe fca5 	bl	8007620 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cd6:	480d      	ldr	r0, [pc, #52]	@ (8008d0c <prvInitialiseTaskLists+0x68>)
 8008cd8:	f7fe fca2 	bl	8007620 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cdc:	480c      	ldr	r0, [pc, #48]	@ (8008d10 <prvInitialiseTaskLists+0x6c>)
 8008cde:	f7fe fc9f 	bl	8007620 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ce2:	480c      	ldr	r0, [pc, #48]	@ (8008d14 <prvInitialiseTaskLists+0x70>)
 8008ce4:	f7fe fc9c 	bl	8007620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ce8:	480b      	ldr	r0, [pc, #44]	@ (8008d18 <prvInitialiseTaskLists+0x74>)
 8008cea:	f7fe fc99 	bl	8007620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cee:	4b0b      	ldr	r3, [pc, #44]	@ (8008d1c <prvInitialiseTaskLists+0x78>)
 8008cf0:	4a05      	ldr	r2, [pc, #20]	@ (8008d08 <prvInitialiseTaskLists+0x64>)
 8008cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d20 <prvInitialiseTaskLists+0x7c>)
 8008cf6:	4a05      	ldr	r2, [pc, #20]	@ (8008d0c <prvInitialiseTaskLists+0x68>)
 8008cf8:	601a      	str	r2, [r3, #0]
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	24000fac 	.word	0x24000fac
 8008d08:	2400140c 	.word	0x2400140c
 8008d0c:	24001420 	.word	0x24001420
 8008d10:	2400143c 	.word	0x2400143c
 8008d14:	24001450 	.word	0x24001450
 8008d18:	24001468 	.word	0x24001468
 8008d1c:	24001434 	.word	0x24001434
 8008d20:	24001438 	.word	0x24001438

08008d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d2a:	e019      	b.n	8008d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d2c:	f000 fdec 	bl	8009908 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d30:	4b10      	ldr	r3, [pc, #64]	@ (8008d74 <prvCheckTasksWaitingTermination+0x50>)
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fe fcf9 	bl	8007734 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d42:	4b0d      	ldr	r3, [pc, #52]	@ (8008d78 <prvCheckTasksWaitingTermination+0x54>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	4a0b      	ldr	r2, [pc, #44]	@ (8008d78 <prvCheckTasksWaitingTermination+0x54>)
 8008d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d7c <prvCheckTasksWaitingTermination+0x58>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	4a0a      	ldr	r2, [pc, #40]	@ (8008d7c <prvCheckTasksWaitingTermination+0x58>)
 8008d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d56:	f000 fe09 	bl	800996c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f810 	bl	8008d80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d60:	4b06      	ldr	r3, [pc, #24]	@ (8008d7c <prvCheckTasksWaitingTermination+0x58>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e1      	bne.n	8008d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d68:	bf00      	nop
 8008d6a:	bf00      	nop
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	24001450 	.word	0x24001450
 8008d78:	2400147c 	.word	0x2400147c
 8008d7c:	24001464 	.word	0x24001464

08008d80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	3354      	adds	r3, #84	@ 0x54
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 f8d3 	bl	8009f38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d108      	bne.n	8008dae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 ffa1 	bl	8009ce8 <vPortFree>
				vPortFree( pxTCB );
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 ff9e 	bl	8009ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008dac:	e019      	b.n	8008de2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d103      	bne.n	8008dc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 ff95 	bl	8009ce8 <vPortFree>
	}
 8008dbe:	e010      	b.n	8008de2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d00b      	beq.n	8008de2 <prvDeleteTCB+0x62>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	60fb      	str	r3, [r7, #12]
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	e7fd      	b.n	8008dde <prvDeleteTCB+0x5e>
	}
 8008de2:	bf00      	nop
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008df2:	4b0c      	ldr	r3, [pc, #48]	@ (8008e24 <prvResetNextTaskUnblockTime+0x38>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d104      	bne.n	8008e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e28 <prvResetNextTaskUnblockTime+0x3c>)
 8008dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008e04:	e008      	b.n	8008e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e06:	4b07      	ldr	r3, [pc, #28]	@ (8008e24 <prvResetNextTaskUnblockTime+0x38>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	68db      	ldr	r3, [r3, #12]
 8008e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	4a04      	ldr	r2, [pc, #16]	@ (8008e28 <prvResetNextTaskUnblockTime+0x3c>)
 8008e16:	6013      	str	r3, [r2, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	24001434 	.word	0x24001434
 8008e28:	2400149c 	.word	0x2400149c

08008e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e32:	4b0b      	ldr	r3, [pc, #44]	@ (8008e60 <xTaskGetSchedulerState+0x34>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	607b      	str	r3, [r7, #4]
 8008e3e:	e008      	b.n	8008e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e40:	4b08      	ldr	r3, [pc, #32]	@ (8008e64 <xTaskGetSchedulerState+0x38>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d102      	bne.n	8008e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	607b      	str	r3, [r7, #4]
 8008e4c:	e001      	b.n	8008e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e52:	687b      	ldr	r3, [r7, #4]
	}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	24001488 	.word	0x24001488
 8008e64:	240014a4 	.word	0x240014a4

08008e68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e74:	2300      	movs	r3, #0
 8008e76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d058      	beq.n	8008f30 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e7e:	4b2f      	ldr	r3, [pc, #188]	@ (8008f3c <xTaskPriorityDisinherit+0xd4>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d00b      	beq.n	8008ea0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	60fb      	str	r3, [r7, #12]
}
 8008e9a:	bf00      	nop
 8008e9c:	bf00      	nop
 8008e9e:	e7fd      	b.n	8008e9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10b      	bne.n	8008ec0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	60bb      	str	r3, [r7, #8]
}
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
 8008ebe:	e7fd      	b.n	8008ebc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ec4:	1e5a      	subs	r2, r3, #1
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d02c      	beq.n	8008f30 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d128      	bne.n	8008f30 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe fc26 	bl	8007734 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ef4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f00:	4b0f      	ldr	r3, [pc, #60]	@ (8008f40 <xTaskPriorityDisinherit+0xd8>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d903      	bls.n	8008f10 <xTaskPriorityDisinherit+0xa8>
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0c:	4a0c      	ldr	r2, [pc, #48]	@ (8008f40 <xTaskPriorityDisinherit+0xd8>)
 8008f0e:	6013      	str	r3, [r2, #0]
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4a09      	ldr	r2, [pc, #36]	@ (8008f44 <xTaskPriorityDisinherit+0xdc>)
 8008f1e:	441a      	add	r2, r3
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f7fe fba7 	bl	800767a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f30:	697b      	ldr	r3, [r7, #20]
	}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	24000fa8 	.word	0x24000fa8
 8008f40:	24001484 	.word	0x24001484
 8008f44:	24000fac 	.word	0x24000fac

08008f48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008f52:	4b21      	ldr	r3, [pc, #132]	@ (8008fd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f58:	4b20      	ldr	r3, [pc, #128]	@ (8008fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3304      	adds	r3, #4
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fe fbe8 	bl	8007734 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6a:	d10a      	bne.n	8008f82 <prvAddCurrentTaskToDelayedList+0x3a>
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d007      	beq.n	8008f82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f72:	4b1a      	ldr	r3, [pc, #104]	@ (8008fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	3304      	adds	r3, #4
 8008f78:	4619      	mov	r1, r3
 8008f7a:	4819      	ldr	r0, [pc, #100]	@ (8008fe0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f7c:	f7fe fb7d 	bl	800767a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f80:	e026      	b.n	8008fd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4413      	add	r3, r2
 8008f88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f8a:	4b14      	ldr	r3, [pc, #80]	@ (8008fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d209      	bcs.n	8008fae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f9a:	4b12      	ldr	r3, [pc, #72]	@ (8008fe4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f7fe fb8b 	bl	80076c2 <vListInsert>
}
 8008fac:	e010      	b.n	8008fd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008fae:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fdc <prvAddCurrentTaskToDelayedList+0x94>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4610      	mov	r0, r2
 8008fbc:	f7fe fb81 	bl	80076c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8008fec <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68ba      	ldr	r2, [r7, #8]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d202      	bcs.n	8008fd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008fca:	4a08      	ldr	r2, [pc, #32]	@ (8008fec <prvAddCurrentTaskToDelayedList+0xa4>)
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	6013      	str	r3, [r2, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	24001480 	.word	0x24001480
 8008fdc:	24000fa8 	.word	0x24000fa8
 8008fe0:	24001468 	.word	0x24001468
 8008fe4:	24001438 	.word	0x24001438
 8008fe8:	24001434 	.word	0x24001434
 8008fec:	2400149c 	.word	0x2400149c

08008ff0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b08a      	sub	sp, #40	@ 0x28
 8008ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008ffa:	f000 fb13 	bl	8009624 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8009074 <xTimerCreateTimerTask+0x84>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d021      	beq.n	800904a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009006:	2300      	movs	r3, #0
 8009008:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800900e:	1d3a      	adds	r2, r7, #4
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	f107 030c 	add.w	r3, r7, #12
 8009018:	4618      	mov	r0, r3
 800901a:	f7fe fae7 	bl	80075ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	9202      	str	r2, [sp, #8]
 8009026:	9301      	str	r3, [sp, #4]
 8009028:	2302      	movs	r3, #2
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	2300      	movs	r3, #0
 800902e:	460a      	mov	r2, r1
 8009030:	4911      	ldr	r1, [pc, #68]	@ (8009078 <xTimerCreateTimerTask+0x88>)
 8009032:	4812      	ldr	r0, [pc, #72]	@ (800907c <xTimerCreateTimerTask+0x8c>)
 8009034:	f7ff f8a2 	bl	800817c <xTaskCreateStatic>
 8009038:	4603      	mov	r3, r0
 800903a:	4a11      	ldr	r2, [pc, #68]	@ (8009080 <xTimerCreateTimerTask+0x90>)
 800903c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800903e:	4b10      	ldr	r3, [pc, #64]	@ (8009080 <xTimerCreateTimerTask+0x90>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009046:	2301      	movs	r3, #1
 8009048:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10b      	bne.n	8009068 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	613b      	str	r3, [r7, #16]
}
 8009062:	bf00      	nop
 8009064:	bf00      	nop
 8009066:	e7fd      	b.n	8009064 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009068:	697b      	ldr	r3, [r7, #20]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	240014d8 	.word	0x240014d8
 8009078:	0800acc8 	.word	0x0800acc8
 800907c:	080091bd 	.word	0x080091bd
 8009080:	240014dc 	.word	0x240014dc

08009084 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b08a      	sub	sp, #40	@ 0x28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009092:	2300      	movs	r3, #0
 8009094:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d10b      	bne.n	80090b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800909c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a0:	f383 8811 	msr	BASEPRI, r3
 80090a4:	f3bf 8f6f 	isb	sy
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	623b      	str	r3, [r7, #32]
}
 80090ae:	bf00      	nop
 80090b0:	bf00      	nop
 80090b2:	e7fd      	b.n	80090b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80090b4:	4b19      	ldr	r3, [pc, #100]	@ (800911c <xTimerGenericCommand+0x98>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d02a      	beq.n	8009112 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b05      	cmp	r3, #5
 80090cc:	dc18      	bgt.n	8009100 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80090ce:	f7ff fead 	bl	8008e2c <xTaskGetSchedulerState>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d109      	bne.n	80090ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80090d8:	4b10      	ldr	r3, [pc, #64]	@ (800911c <xTimerGenericCommand+0x98>)
 80090da:	6818      	ldr	r0, [r3, #0]
 80090dc:	f107 0110 	add.w	r1, r7, #16
 80090e0:	2300      	movs	r3, #0
 80090e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090e4:	f7fe fc5a 	bl	800799c <xQueueGenericSend>
 80090e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80090ea:	e012      	b.n	8009112 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80090ec:	4b0b      	ldr	r3, [pc, #44]	@ (800911c <xTimerGenericCommand+0x98>)
 80090ee:	6818      	ldr	r0, [r3, #0]
 80090f0:	f107 0110 	add.w	r1, r7, #16
 80090f4:	2300      	movs	r3, #0
 80090f6:	2200      	movs	r2, #0
 80090f8:	f7fe fc50 	bl	800799c <xQueueGenericSend>
 80090fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80090fe:	e008      	b.n	8009112 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009100:	4b06      	ldr	r3, [pc, #24]	@ (800911c <xTimerGenericCommand+0x98>)
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	f107 0110 	add.w	r1, r7, #16
 8009108:	2300      	movs	r3, #0
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	f7fe fd48 	bl	8007ba0 <xQueueGenericSendFromISR>
 8009110:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009114:	4618      	mov	r0, r3
 8009116:	3728      	adds	r7, #40	@ 0x28
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	240014d8 	.word	0x240014d8

08009120 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af02      	add	r7, sp, #8
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800912a:	4b23      	ldr	r3, [pc, #140]	@ (80091b8 <prvProcessExpiredTimer+0x98>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	3304      	adds	r3, #4
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe fafb 	bl	8007734 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009144:	f003 0304 	and.w	r3, r3, #4
 8009148:	2b00      	cmp	r3, #0
 800914a:	d023      	beq.n	8009194 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	699a      	ldr	r2, [r3, #24]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	18d1      	adds	r1, r2, r3
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	6978      	ldr	r0, [r7, #20]
 800915a:	f000 f8d5 	bl	8009308 <prvInsertTimerInActiveList>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d020      	beq.n	80091a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009164:	2300      	movs	r3, #0
 8009166:	9300      	str	r3, [sp, #0]
 8009168:	2300      	movs	r3, #0
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	2100      	movs	r1, #0
 800916e:	6978      	ldr	r0, [r7, #20]
 8009170:	f7ff ff88 	bl	8009084 <xTimerGenericCommand>
 8009174:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d114      	bne.n	80091a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800917c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	60fb      	str	r3, [r7, #12]
}
 800918e:	bf00      	nop
 8009190:	bf00      	nop
 8009192:	e7fd      	b.n	8009190 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800919a:	f023 0301 	bic.w	r3, r3, #1
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	6978      	ldr	r0, [r7, #20]
 80091ac:	4798      	blx	r3
}
 80091ae:	bf00      	nop
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	240014d0 	.word	0x240014d0

080091bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091c4:	f107 0308 	add.w	r3, r7, #8
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 f859 	bl	8009280 <prvGetNextExpireTime>
 80091ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	4619      	mov	r1, r3
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 f805 	bl	80091e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80091da:	f000 f8d7 	bl	800938c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80091de:	bf00      	nop
 80091e0:	e7f0      	b.n	80091c4 <prvTimerTask+0x8>
	...

080091e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80091ee:	f7ff fa29 	bl	8008644 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091f2:	f107 0308 	add.w	r3, r7, #8
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 f866 	bl	80092c8 <prvSampleTimeNow>
 80091fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d130      	bne.n	8009266 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10a      	bne.n	8009220 <prvProcessTimerOrBlockTask+0x3c>
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	429a      	cmp	r2, r3
 8009210:	d806      	bhi.n	8009220 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009212:	f7ff fa25 	bl	8008660 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009216:	68f9      	ldr	r1, [r7, #12]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7ff ff81 	bl	8009120 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800921e:	e024      	b.n	800926a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d008      	beq.n	8009238 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009226:	4b13      	ldr	r3, [pc, #76]	@ (8009274 <prvProcessTimerOrBlockTask+0x90>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <prvProcessTimerOrBlockTask+0x50>
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <prvProcessTimerOrBlockTask+0x52>
 8009234:	2300      	movs	r3, #0
 8009236:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009238:	4b0f      	ldr	r3, [pc, #60]	@ (8009278 <prvProcessTimerOrBlockTask+0x94>)
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	4619      	mov	r1, r3
 8009246:	f7fe ff65 	bl	8008114 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800924a:	f7ff fa09 	bl	8008660 <xTaskResumeAll>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10a      	bne.n	800926a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009254:	4b09      	ldr	r3, [pc, #36]	@ (800927c <prvProcessTimerOrBlockTask+0x98>)
 8009256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	f3bf 8f6f 	isb	sy
}
 8009264:	e001      	b.n	800926a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009266:	f7ff f9fb 	bl	8008660 <xTaskResumeAll>
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	240014d4 	.word	0x240014d4
 8009278:	240014d8 	.word	0x240014d8
 800927c:	e000ed04 	.word	0xe000ed04

08009280 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009288:	4b0e      	ldr	r3, [pc, #56]	@ (80092c4 <prvGetNextExpireTime+0x44>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d101      	bne.n	8009296 <prvGetNextExpireTime+0x16>
 8009292:	2201      	movs	r2, #1
 8009294:	e000      	b.n	8009298 <prvGetNextExpireTime+0x18>
 8009296:	2200      	movs	r2, #0
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d105      	bne.n	80092b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092a4:	4b07      	ldr	r3, [pc, #28]	@ (80092c4 <prvGetNextExpireTime+0x44>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	e001      	b.n	80092b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80092b4:	68fb      	ldr	r3, [r7, #12]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	240014d0 	.word	0x240014d0

080092c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80092d0:	f7ff fa64 	bl	800879c <xTaskGetTickCount>
 80092d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80092d6:	4b0b      	ldr	r3, [pc, #44]	@ (8009304 <prvSampleTimeNow+0x3c>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d205      	bcs.n	80092ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80092e0:	f000 f93a 	bl	8009558 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2201      	movs	r2, #1
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	e002      	b.n	80092f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80092f2:	4a04      	ldr	r2, [pc, #16]	@ (8009304 <prvSampleTimeNow+0x3c>)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80092f8:	68fb      	ldr	r3, [r7, #12]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	240014e0 	.word	0x240014e0

08009308 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
 8009314:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009316:	2300      	movs	r3, #0
 8009318:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	429a      	cmp	r2, r3
 800932c:	d812      	bhi.n	8009354 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	1ad2      	subs	r2, r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	429a      	cmp	r2, r3
 800933a:	d302      	bcc.n	8009342 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800933c:	2301      	movs	r3, #1
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	e01b      	b.n	800937a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009342:	4b10      	ldr	r3, [pc, #64]	@ (8009384 <prvInsertTimerInActiveList+0x7c>)
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3304      	adds	r3, #4
 800934a:	4619      	mov	r1, r3
 800934c:	4610      	mov	r0, r2
 800934e:	f7fe f9b8 	bl	80076c2 <vListInsert>
 8009352:	e012      	b.n	800937a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d206      	bcs.n	800936a <prvInsertTimerInActiveList+0x62>
 800935c:	68ba      	ldr	r2, [r7, #8]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d302      	bcc.n	800936a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009364:	2301      	movs	r3, #1
 8009366:	617b      	str	r3, [r7, #20]
 8009368:	e007      	b.n	800937a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800936a:	4b07      	ldr	r3, [pc, #28]	@ (8009388 <prvInsertTimerInActiveList+0x80>)
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	3304      	adds	r3, #4
 8009372:	4619      	mov	r1, r3
 8009374:	4610      	mov	r0, r2
 8009376:	f7fe f9a4 	bl	80076c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800937a:	697b      	ldr	r3, [r7, #20]
}
 800937c:	4618      	mov	r0, r3
 800937e:	3718      	adds	r7, #24
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	240014d4 	.word	0x240014d4
 8009388:	240014d0 	.word	0x240014d0

0800938c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08e      	sub	sp, #56	@ 0x38
 8009390:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009392:	e0ce      	b.n	8009532 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	da19      	bge.n	80093ce <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800939a:	1d3b      	adds	r3, r7, #4
 800939c:	3304      	adds	r3, #4
 800939e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10b      	bne.n	80093be <prvProcessReceivedCommands+0x32>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	61fb      	str	r3, [r7, #28]
}
 80093b8:	bf00      	nop
 80093ba:	bf00      	nop
 80093bc:	e7fd      	b.n	80093ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80093be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093c4:	6850      	ldr	r0, [r2, #4]
 80093c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093c8:	6892      	ldr	r2, [r2, #8]
 80093ca:	4611      	mov	r1, r2
 80093cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f2c0 80ae 	blt.w	8009532 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80093da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093dc:	695b      	ldr	r3, [r3, #20]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d004      	beq.n	80093ec <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80093e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e4:	3304      	adds	r3, #4
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7fe f9a4 	bl	8007734 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093ec:	463b      	mov	r3, r7
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff ff6a 	bl	80092c8 <prvSampleTimeNow>
 80093f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2b09      	cmp	r3, #9
 80093fa:	f200 8097 	bhi.w	800952c <prvProcessReceivedCommands+0x1a0>
 80093fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009404 <prvProcessReceivedCommands+0x78>)
 8009400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009404:	0800942d 	.word	0x0800942d
 8009408:	0800942d 	.word	0x0800942d
 800940c:	0800942d 	.word	0x0800942d
 8009410:	080094a3 	.word	0x080094a3
 8009414:	080094b7 	.word	0x080094b7
 8009418:	08009503 	.word	0x08009503
 800941c:	0800942d 	.word	0x0800942d
 8009420:	0800942d 	.word	0x0800942d
 8009424:	080094a3 	.word	0x080094a3
 8009428:	080094b7 	.word	0x080094b7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009432:	f043 0301 	orr.w	r3, r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	18d1      	adds	r1, r2, r3
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800944a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800944c:	f7ff ff5c 	bl	8009308 <prvInsertTimerInActiveList>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d06c      	beq.n	8009530 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800945c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800945e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009464:	f003 0304 	and.w	r3, r3, #4
 8009468:	2b00      	cmp	r3, #0
 800946a:	d061      	beq.n	8009530 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	441a      	add	r2, r3
 8009474:	2300      	movs	r3, #0
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	2300      	movs	r3, #0
 800947a:	2100      	movs	r1, #0
 800947c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800947e:	f7ff fe01 	bl	8009084 <xTimerGenericCommand>
 8009482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d152      	bne.n	8009530 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	61bb      	str	r3, [r7, #24]
}
 800949c:	bf00      	nop
 800949e:	bf00      	nop
 80094a0:	e7fd      	b.n	800949e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094a8:	f023 0301 	bic.w	r3, r3, #1
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80094b4:	e03d      	b.n	8009532 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80094b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094bc:	f043 0301 	orr.w	r3, r3, #1
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094cc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80094ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d0:	699b      	ldr	r3, [r3, #24]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10b      	bne.n	80094ee <prvProcessReceivedCommands+0x162>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	617b      	str	r3, [r7, #20]
}
 80094e8:	bf00      	nop
 80094ea:	bf00      	nop
 80094ec:	e7fd      	b.n	80094ea <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80094ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f0:	699a      	ldr	r2, [r3, #24]
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	18d1      	adds	r1, r2, r3
 80094f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094fc:	f7ff ff04 	bl	8009308 <prvInsertTimerInActiveList>
					break;
 8009500:	e017      	b.n	8009532 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009504:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009508:	f003 0302 	and.w	r3, r3, #2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d103      	bne.n	8009518 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009510:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009512:	f000 fbe9 	bl	8009ce8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009516:	e00c      	b.n	8009532 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800951e:	f023 0301 	bic.w	r3, r3, #1
 8009522:	b2da      	uxtb	r2, r3
 8009524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009526:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800952a:	e002      	b.n	8009532 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800952c:	bf00      	nop
 800952e:	e000      	b.n	8009532 <prvProcessReceivedCommands+0x1a6>
					break;
 8009530:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009532:	4b08      	ldr	r3, [pc, #32]	@ (8009554 <prvProcessReceivedCommands+0x1c8>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	1d39      	adds	r1, r7, #4
 8009538:	2200      	movs	r2, #0
 800953a:	4618      	mov	r0, r3
 800953c:	f7fe fbce 	bl	8007cdc <xQueueReceive>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	f47f af26 	bne.w	8009394 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009548:	bf00      	nop
 800954a:	bf00      	nop
 800954c:	3730      	adds	r7, #48	@ 0x30
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	240014d8 	.word	0x240014d8

08009558 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800955e:	e049      	b.n	80095f4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009560:	4b2e      	ldr	r3, [pc, #184]	@ (800961c <prvSwitchTimerLists+0xc4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800956a:	4b2c      	ldr	r3, [pc, #176]	@ (800961c <prvSwitchTimerLists+0xc4>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68db      	ldr	r3, [r3, #12]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	3304      	adds	r3, #4
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe f8db 	bl	8007734 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d02f      	beq.n	80095f4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	4413      	add	r3, r2
 800959c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d90e      	bls.n	80095c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80095b2:	4b1a      	ldr	r3, [pc, #104]	@ (800961c <prvSwitchTimerLists+0xc4>)
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3304      	adds	r3, #4
 80095ba:	4619      	mov	r1, r3
 80095bc:	4610      	mov	r0, r2
 80095be:	f7fe f880 	bl	80076c2 <vListInsert>
 80095c2:	e017      	b.n	80095f4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80095c4:	2300      	movs	r3, #0
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	2300      	movs	r3, #0
 80095ca:	693a      	ldr	r2, [r7, #16]
 80095cc:	2100      	movs	r1, #0
 80095ce:	68f8      	ldr	r0, [r7, #12]
 80095d0:	f7ff fd58 	bl	8009084 <xTimerGenericCommand>
 80095d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10b      	bne.n	80095f4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80095dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095e0:	f383 8811 	msr	BASEPRI, r3
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	f3bf 8f4f 	dsb	sy
 80095ec:	603b      	str	r3, [r7, #0]
}
 80095ee:	bf00      	nop
 80095f0:	bf00      	nop
 80095f2:	e7fd      	b.n	80095f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095f4:	4b09      	ldr	r3, [pc, #36]	@ (800961c <prvSwitchTimerLists+0xc4>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1b0      	bne.n	8009560 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80095fe:	4b07      	ldr	r3, [pc, #28]	@ (800961c <prvSwitchTimerLists+0xc4>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009604:	4b06      	ldr	r3, [pc, #24]	@ (8009620 <prvSwitchTimerLists+0xc8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a04      	ldr	r2, [pc, #16]	@ (800961c <prvSwitchTimerLists+0xc4>)
 800960a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800960c:	4a04      	ldr	r2, [pc, #16]	@ (8009620 <prvSwitchTimerLists+0xc8>)
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	6013      	str	r3, [r2, #0]
}
 8009612:	bf00      	nop
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	240014d0 	.word	0x240014d0
 8009620:	240014d4 	.word	0x240014d4

08009624 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b082      	sub	sp, #8
 8009628:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800962a:	f000 f96d 	bl	8009908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800962e:	4b15      	ldr	r3, [pc, #84]	@ (8009684 <prvCheckForValidListAndQueue+0x60>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d120      	bne.n	8009678 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009636:	4814      	ldr	r0, [pc, #80]	@ (8009688 <prvCheckForValidListAndQueue+0x64>)
 8009638:	f7fd fff2 	bl	8007620 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800963c:	4813      	ldr	r0, [pc, #76]	@ (800968c <prvCheckForValidListAndQueue+0x68>)
 800963e:	f7fd ffef 	bl	8007620 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009642:	4b13      	ldr	r3, [pc, #76]	@ (8009690 <prvCheckForValidListAndQueue+0x6c>)
 8009644:	4a10      	ldr	r2, [pc, #64]	@ (8009688 <prvCheckForValidListAndQueue+0x64>)
 8009646:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009648:	4b12      	ldr	r3, [pc, #72]	@ (8009694 <prvCheckForValidListAndQueue+0x70>)
 800964a:	4a10      	ldr	r2, [pc, #64]	@ (800968c <prvCheckForValidListAndQueue+0x68>)
 800964c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800964e:	2300      	movs	r3, #0
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	4b11      	ldr	r3, [pc, #68]	@ (8009698 <prvCheckForValidListAndQueue+0x74>)
 8009654:	4a11      	ldr	r2, [pc, #68]	@ (800969c <prvCheckForValidListAndQueue+0x78>)
 8009656:	2110      	movs	r1, #16
 8009658:	200a      	movs	r0, #10
 800965a:	f7fe f8ff 	bl	800785c <xQueueGenericCreateStatic>
 800965e:	4603      	mov	r3, r0
 8009660:	4a08      	ldr	r2, [pc, #32]	@ (8009684 <prvCheckForValidListAndQueue+0x60>)
 8009662:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009664:	4b07      	ldr	r3, [pc, #28]	@ (8009684 <prvCheckForValidListAndQueue+0x60>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800966c:	4b05      	ldr	r3, [pc, #20]	@ (8009684 <prvCheckForValidListAndQueue+0x60>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	490b      	ldr	r1, [pc, #44]	@ (80096a0 <prvCheckForValidListAndQueue+0x7c>)
 8009672:	4618      	mov	r0, r3
 8009674:	f7fe fd24 	bl	80080c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009678:	f000 f978 	bl	800996c <vPortExitCritical>
}
 800967c:	bf00      	nop
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	240014d8 	.word	0x240014d8
 8009688:	240014a8 	.word	0x240014a8
 800968c:	240014bc 	.word	0x240014bc
 8009690:	240014d0 	.word	0x240014d0
 8009694:	240014d4 	.word	0x240014d4
 8009698:	24001584 	.word	0x24001584
 800969c:	240014e4 	.word	0x240014e4
 80096a0:	0800acd0 	.word	0x0800acd0

080096a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3b04      	subs	r3, #4
 80096b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80096bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3b04      	subs	r3, #4
 80096c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	f023 0201 	bic.w	r2, r3, #1
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	3b04      	subs	r3, #4
 80096d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80096d4:	4a0c      	ldr	r2, [pc, #48]	@ (8009708 <pxPortInitialiseStack+0x64>)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3b14      	subs	r3, #20
 80096de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	3b04      	subs	r3, #4
 80096ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f06f 0202 	mvn.w	r2, #2
 80096f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	3b20      	subs	r3, #32
 80096f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80096fa:	68fb      	ldr	r3, [r7, #12]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3714      	adds	r7, #20
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr
 8009708:	0800970d 	.word	0x0800970d

0800970c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009712:	2300      	movs	r3, #0
 8009714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009716:	4b13      	ldr	r3, [pc, #76]	@ (8009764 <prvTaskExitError+0x58>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800971e:	d00b      	beq.n	8009738 <prvTaskExitError+0x2c>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	60fb      	str	r3, [r7, #12]
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	e7fd      	b.n	8009734 <prvTaskExitError+0x28>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	60bb      	str	r3, [r7, #8]
}
 800974a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800974c:	bf00      	nop
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0fc      	beq.n	800974e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009754:	bf00      	nop
 8009756:	bf00      	nop
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	24000010 	.word	0x24000010
	...

08009770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009770:	4b07      	ldr	r3, [pc, #28]	@ (8009790 <pxCurrentTCBConst2>)
 8009772:	6819      	ldr	r1, [r3, #0]
 8009774:	6808      	ldr	r0, [r1, #0]
 8009776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977a:	f380 8809 	msr	PSP, r0
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f04f 0000 	mov.w	r0, #0
 8009786:	f380 8811 	msr	BASEPRI, r0
 800978a:	4770      	bx	lr
 800978c:	f3af 8000 	nop.w

08009790 <pxCurrentTCBConst2>:
 8009790:	24000fa8 	.word	0x24000fa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009794:	bf00      	nop
 8009796:	bf00      	nop

08009798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009798:	4808      	ldr	r0, [pc, #32]	@ (80097bc <prvPortStartFirstTask+0x24>)
 800979a:	6800      	ldr	r0, [r0, #0]
 800979c:	6800      	ldr	r0, [r0, #0]
 800979e:	f380 8808 	msr	MSP, r0
 80097a2:	f04f 0000 	mov.w	r0, #0
 80097a6:	f380 8814 	msr	CONTROL, r0
 80097aa:	b662      	cpsie	i
 80097ac:	b661      	cpsie	f
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	f3bf 8f6f 	isb	sy
 80097b6:	df00      	svc	0
 80097b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80097ba:	bf00      	nop
 80097bc:	e000ed08 	.word	0xe000ed08

080097c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80097c6:	4b47      	ldr	r3, [pc, #284]	@ (80098e4 <xPortStartScheduler+0x124>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a47      	ldr	r2, [pc, #284]	@ (80098e8 <xPortStartScheduler+0x128>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d10b      	bne.n	80097e8 <xPortStartScheduler+0x28>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	613b      	str	r3, [r7, #16]
}
 80097e2:	bf00      	nop
 80097e4:	bf00      	nop
 80097e6:	e7fd      	b.n	80097e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80097e8:	4b3e      	ldr	r3, [pc, #248]	@ (80098e4 <xPortStartScheduler+0x124>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a3f      	ldr	r2, [pc, #252]	@ (80098ec <xPortStartScheduler+0x12c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d10b      	bne.n	800980a <xPortStartScheduler+0x4a>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	60fb      	str	r3, [r7, #12]
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	e7fd      	b.n	8009806 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800980a:	4b39      	ldr	r3, [pc, #228]	@ (80098f0 <xPortStartScheduler+0x130>)
 800980c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	22ff      	movs	r2, #255	@ 0xff
 800981a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	b2db      	uxtb	r3, r3
 8009822:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009824:	78fb      	ldrb	r3, [r7, #3]
 8009826:	b2db      	uxtb	r3, r3
 8009828:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800982c:	b2da      	uxtb	r2, r3
 800982e:	4b31      	ldr	r3, [pc, #196]	@ (80098f4 <xPortStartScheduler+0x134>)
 8009830:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009832:	4b31      	ldr	r3, [pc, #196]	@ (80098f8 <xPortStartScheduler+0x138>)
 8009834:	2207      	movs	r2, #7
 8009836:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009838:	e009      	b.n	800984e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800983a:	4b2f      	ldr	r3, [pc, #188]	@ (80098f8 <xPortStartScheduler+0x138>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3b01      	subs	r3, #1
 8009840:	4a2d      	ldr	r2, [pc, #180]	@ (80098f8 <xPortStartScheduler+0x138>)
 8009842:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	b2db      	uxtb	r3, r3
 8009848:	005b      	lsls	r3, r3, #1
 800984a:	b2db      	uxtb	r3, r3
 800984c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800984e:	78fb      	ldrb	r3, [r7, #3]
 8009850:	b2db      	uxtb	r3, r3
 8009852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009856:	2b80      	cmp	r3, #128	@ 0x80
 8009858:	d0ef      	beq.n	800983a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800985a:	4b27      	ldr	r3, [pc, #156]	@ (80098f8 <xPortStartScheduler+0x138>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f1c3 0307 	rsb	r3, r3, #7
 8009862:	2b04      	cmp	r3, #4
 8009864:	d00b      	beq.n	800987e <xPortStartScheduler+0xbe>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60bb      	str	r3, [r7, #8]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800987e:	4b1e      	ldr	r3, [pc, #120]	@ (80098f8 <xPortStartScheduler+0x138>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	021b      	lsls	r3, r3, #8
 8009884:	4a1c      	ldr	r2, [pc, #112]	@ (80098f8 <xPortStartScheduler+0x138>)
 8009886:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009888:	4b1b      	ldr	r3, [pc, #108]	@ (80098f8 <xPortStartScheduler+0x138>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009890:	4a19      	ldr	r2, [pc, #100]	@ (80098f8 <xPortStartScheduler+0x138>)
 8009892:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	b2da      	uxtb	r2, r3
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800989c:	4b17      	ldr	r3, [pc, #92]	@ (80098fc <xPortStartScheduler+0x13c>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a16      	ldr	r2, [pc, #88]	@ (80098fc <xPortStartScheduler+0x13c>)
 80098a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80098a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098a8:	4b14      	ldr	r3, [pc, #80]	@ (80098fc <xPortStartScheduler+0x13c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a13      	ldr	r2, [pc, #76]	@ (80098fc <xPortStartScheduler+0x13c>)
 80098ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80098b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80098b4:	f000 f8da 	bl	8009a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80098b8:	4b11      	ldr	r3, [pc, #68]	@ (8009900 <xPortStartScheduler+0x140>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80098be:	f000 f8f9 	bl	8009ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80098c2:	4b10      	ldr	r3, [pc, #64]	@ (8009904 <xPortStartScheduler+0x144>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a0f      	ldr	r2, [pc, #60]	@ (8009904 <xPortStartScheduler+0x144>)
 80098c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80098cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80098ce:	f7ff ff63 	bl	8009798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80098d2:	f7ff f82d 	bl	8008930 <vTaskSwitchContext>
	prvTaskExitError();
 80098d6:	f7ff ff19 	bl	800970c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3718      	adds	r7, #24
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	e000ed00 	.word	0xe000ed00
 80098e8:	410fc271 	.word	0x410fc271
 80098ec:	410fc270 	.word	0x410fc270
 80098f0:	e000e400 	.word	0xe000e400
 80098f4:	240015d4 	.word	0x240015d4
 80098f8:	240015d8 	.word	0x240015d8
 80098fc:	e000ed20 	.word	0xe000ed20
 8009900:	24000010 	.word	0x24000010
 8009904:	e000ef34 	.word	0xe000ef34

08009908 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009912:	f383 8811 	msr	BASEPRI, r3
 8009916:	f3bf 8f6f 	isb	sy
 800991a:	f3bf 8f4f 	dsb	sy
 800991e:	607b      	str	r3, [r7, #4]
}
 8009920:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009922:	4b10      	ldr	r3, [pc, #64]	@ (8009964 <vPortEnterCritical+0x5c>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	3301      	adds	r3, #1
 8009928:	4a0e      	ldr	r2, [pc, #56]	@ (8009964 <vPortEnterCritical+0x5c>)
 800992a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800992c:	4b0d      	ldr	r3, [pc, #52]	@ (8009964 <vPortEnterCritical+0x5c>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d110      	bne.n	8009956 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009934:	4b0c      	ldr	r3, [pc, #48]	@ (8009968 <vPortEnterCritical+0x60>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d00b      	beq.n	8009956 <vPortEnterCritical+0x4e>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	603b      	str	r3, [r7, #0]
}
 8009950:	bf00      	nop
 8009952:	bf00      	nop
 8009954:	e7fd      	b.n	8009952 <vPortEnterCritical+0x4a>
	}
}
 8009956:	bf00      	nop
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop
 8009964:	24000010 	.word	0x24000010
 8009968:	e000ed04 	.word	0xe000ed04

0800996c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009972:	4b12      	ldr	r3, [pc, #72]	@ (80099bc <vPortExitCritical+0x50>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10b      	bne.n	8009992 <vPortExitCritical+0x26>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	607b      	str	r3, [r7, #4]
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	e7fd      	b.n	800998e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009992:	4b0a      	ldr	r3, [pc, #40]	@ (80099bc <vPortExitCritical+0x50>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3b01      	subs	r3, #1
 8009998:	4a08      	ldr	r2, [pc, #32]	@ (80099bc <vPortExitCritical+0x50>)
 800999a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800999c:	4b07      	ldr	r3, [pc, #28]	@ (80099bc <vPortExitCritical+0x50>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d105      	bne.n	80099b0 <vPortExitCritical+0x44>
 80099a4:	2300      	movs	r3, #0
 80099a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	f383 8811 	msr	BASEPRI, r3
}
 80099ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	24000010 	.word	0x24000010

080099c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099c0:	f3ef 8009 	mrs	r0, PSP
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	4b15      	ldr	r3, [pc, #84]	@ (8009a20 <pxCurrentTCBConst>)
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	f01e 0f10 	tst.w	lr, #16
 80099d0:	bf08      	it	eq
 80099d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80099d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099da:	6010      	str	r0, [r2, #0]
 80099dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80099e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80099e4:	f380 8811 	msr	BASEPRI, r0
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f7fe ff9e 	bl	8008930 <vTaskSwitchContext>
 80099f4:	f04f 0000 	mov.w	r0, #0
 80099f8:	f380 8811 	msr	BASEPRI, r0
 80099fc:	bc09      	pop	{r0, r3}
 80099fe:	6819      	ldr	r1, [r3, #0]
 8009a00:	6808      	ldr	r0, [r1, #0]
 8009a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a06:	f01e 0f10 	tst.w	lr, #16
 8009a0a:	bf08      	it	eq
 8009a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a10:	f380 8809 	msr	PSP, r0
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	f3af 8000 	nop.w

08009a20 <pxCurrentTCBConst>:
 8009a20:	24000fa8 	.word	0x24000fa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop

08009a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	607b      	str	r3, [r7, #4]
}
 8009a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a42:	f7fe febb 	bl	80087bc <xTaskIncrementTick>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d003      	beq.n	8009a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a4c:	4b06      	ldr	r3, [pc, #24]	@ (8009a68 <xPortSysTickHandler+0x40>)
 8009a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	2300      	movs	r3, #0
 8009a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	f383 8811 	msr	BASEPRI, r3
}
 8009a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a70:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa0 <vPortSetupTimerInterrupt+0x34>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a76:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa4 <vPortSetupTimerInterrupt+0x38>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009aa8 <vPortSetupTimerInterrupt+0x3c>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a0a      	ldr	r2, [pc, #40]	@ (8009aac <vPortSetupTimerInterrupt+0x40>)
 8009a82:	fba2 2303 	umull	r2, r3, r2, r3
 8009a86:	099b      	lsrs	r3, r3, #6
 8009a88:	4a09      	ldr	r2, [pc, #36]	@ (8009ab0 <vPortSetupTimerInterrupt+0x44>)
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009a8e:	4b04      	ldr	r3, [pc, #16]	@ (8009aa0 <vPortSetupTimerInterrupt+0x34>)
 8009a90:	2207      	movs	r2, #7
 8009a92:	601a      	str	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop
 8009aa0:	e000e010 	.word	0xe000e010
 8009aa4:	e000e018 	.word	0xe000e018
 8009aa8:	24000000 	.word	0x24000000
 8009aac:	10624dd3 	.word	0x10624dd3
 8009ab0:	e000e014 	.word	0xe000e014

08009ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009ac4 <vPortEnableVFP+0x10>
 8009ab8:	6801      	ldr	r1, [r0, #0]
 8009aba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009abe:	6001      	str	r1, [r0, #0]
 8009ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ac2:	bf00      	nop
 8009ac4:	e000ed88 	.word	0xe000ed88

08009ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009ace:	f3ef 8305 	mrs	r3, IPSR
 8009ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b0f      	cmp	r3, #15
 8009ad8:	d915      	bls.n	8009b06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ada:	4a18      	ldr	r2, [pc, #96]	@ (8009b3c <vPortValidateInterruptPriority+0x74>)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ae4:	4b16      	ldr	r3, [pc, #88]	@ (8009b40 <vPortValidateInterruptPriority+0x78>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	7afa      	ldrb	r2, [r7, #11]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d20b      	bcs.n	8009b06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	607b      	str	r3, [r7, #4]
}
 8009b00:	bf00      	nop
 8009b02:	bf00      	nop
 8009b04:	e7fd      	b.n	8009b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b06:	4b0f      	ldr	r3, [pc, #60]	@ (8009b44 <vPortValidateInterruptPriority+0x7c>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8009b48 <vPortValidateInterruptPriority+0x80>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d90b      	bls.n	8009b2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	603b      	str	r3, [r7, #0]
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	e7fd      	b.n	8009b2a <vPortValidateInterruptPriority+0x62>
	}
 8009b2e:	bf00      	nop
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	e000e3f0 	.word	0xe000e3f0
 8009b40:	240015d4 	.word	0x240015d4
 8009b44:	e000ed0c 	.word	0xe000ed0c
 8009b48:	240015d8 	.word	0x240015d8

08009b4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08a      	sub	sp, #40	@ 0x28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b54:	2300      	movs	r3, #0
 8009b56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009b58:	f7fe fd74 	bl	8008644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8009cd0 <pvPortMalloc+0x184>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d101      	bne.n	8009b68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b64:	f000 f924 	bl	8009db0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b68:	4b5a      	ldr	r3, [pc, #360]	@ (8009cd4 <pvPortMalloc+0x188>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4013      	ands	r3, r2
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f040 8095 	bne.w	8009ca0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d01e      	beq.n	8009bba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009b7c:	2208      	movs	r2, #8
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4413      	add	r3, r2
 8009b82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d015      	beq.n	8009bba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f023 0307 	bic.w	r3, r3, #7
 8009b94:	3308      	adds	r3, #8
 8009b96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f003 0307 	and.w	r3, r3, #7
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00b      	beq.n	8009bba <pvPortMalloc+0x6e>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	617b      	str	r3, [r7, #20]
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop
 8009bb8:	e7fd      	b.n	8009bb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d06f      	beq.n	8009ca0 <pvPortMalloc+0x154>
 8009bc0:	4b45      	ldr	r3, [pc, #276]	@ (8009cd8 <pvPortMalloc+0x18c>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d86a      	bhi.n	8009ca0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bca:	4b44      	ldr	r3, [pc, #272]	@ (8009cdc <pvPortMalloc+0x190>)
 8009bcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009bce:	4b43      	ldr	r3, [pc, #268]	@ (8009cdc <pvPortMalloc+0x190>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bd4:	e004      	b.n	8009be0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	429a      	cmp	r2, r3
 8009be8:	d903      	bls.n	8009bf2 <pvPortMalloc+0xa6>
 8009bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1f1      	bne.n	8009bd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bf2:	4b37      	ldr	r3, [pc, #220]	@ (8009cd0 <pvPortMalloc+0x184>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d051      	beq.n	8009ca0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2208      	movs	r2, #8
 8009c02:	4413      	add	r3, r2
 8009c04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	6a3b      	ldr	r3, [r7, #32]
 8009c0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	1ad2      	subs	r2, r2, r3
 8009c16:	2308      	movs	r3, #8
 8009c18:	005b      	lsls	r3, r3, #1
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d920      	bls.n	8009c60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4413      	add	r3, r2
 8009c24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	f003 0307 	and.w	r3, r3, #7
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00b      	beq.n	8009c48 <pvPortMalloc+0xfc>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c34:	f383 8811 	msr	BASEPRI, r3
 8009c38:	f3bf 8f6f 	isb	sy
 8009c3c:	f3bf 8f4f 	dsb	sy
 8009c40:	613b      	str	r3, [r7, #16]
}
 8009c42:	bf00      	nop
 8009c44:	bf00      	nop
 8009c46:	e7fd      	b.n	8009c44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	1ad2      	subs	r2, r2, r3
 8009c50:	69bb      	ldr	r3, [r7, #24]
 8009c52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c5a:	69b8      	ldr	r0, [r7, #24]
 8009c5c:	f000 f90a 	bl	8009e74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c60:	4b1d      	ldr	r3, [pc, #116]	@ (8009cd8 <pvPortMalloc+0x18c>)
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8009cd8 <pvPortMalloc+0x18c>)
 8009c6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8009cd8 <pvPortMalloc+0x18c>)
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	4b1b      	ldr	r3, [pc, #108]	@ (8009ce0 <pvPortMalloc+0x194>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d203      	bcs.n	8009c82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c7a:	4b17      	ldr	r3, [pc, #92]	@ (8009cd8 <pvPortMalloc+0x18c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a18      	ldr	r2, [pc, #96]	@ (8009ce0 <pvPortMalloc+0x194>)
 8009c80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	4b13      	ldr	r3, [pc, #76]	@ (8009cd4 <pvPortMalloc+0x188>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c96:	4b13      	ldr	r3, [pc, #76]	@ (8009ce4 <pvPortMalloc+0x198>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	4a11      	ldr	r2, [pc, #68]	@ (8009ce4 <pvPortMalloc+0x198>)
 8009c9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ca0:	f7fe fcde 	bl	8008660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	f003 0307 	and.w	r3, r3, #7
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00b      	beq.n	8009cc6 <pvPortMalloc+0x17a>
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	60fb      	str	r3, [r7, #12]
}
 8009cc0:	bf00      	nop
 8009cc2:	bf00      	nop
 8009cc4:	e7fd      	b.n	8009cc2 <pvPortMalloc+0x176>
	return pvReturn;
 8009cc6:	69fb      	ldr	r3, [r7, #28]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3728      	adds	r7, #40	@ 0x28
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	240051e4 	.word	0x240051e4
 8009cd4:	240051f8 	.word	0x240051f8
 8009cd8:	240051e8 	.word	0x240051e8
 8009cdc:	240051dc 	.word	0x240051dc
 8009ce0:	240051ec 	.word	0x240051ec
 8009ce4:	240051f0 	.word	0x240051f0

08009ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d04f      	beq.n	8009d9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cfa:	2308      	movs	r3, #8
 8009cfc:	425b      	negs	r3, r3
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	4413      	add	r3, r2
 8009d02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	685a      	ldr	r2, [r3, #4]
 8009d0c:	4b25      	ldr	r3, [pc, #148]	@ (8009da4 <vPortFree+0xbc>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4013      	ands	r3, r2
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d10b      	bne.n	8009d2e <vPortFree+0x46>
	__asm volatile
 8009d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d1a:	f383 8811 	msr	BASEPRI, r3
 8009d1e:	f3bf 8f6f 	isb	sy
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	60fb      	str	r3, [r7, #12]
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	e7fd      	b.n	8009d2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00b      	beq.n	8009d4e <vPortFree+0x66>
	__asm volatile
 8009d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	60bb      	str	r3, [r7, #8]
}
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
 8009d4c:	e7fd      	b.n	8009d4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	4b14      	ldr	r3, [pc, #80]	@ (8009da4 <vPortFree+0xbc>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4013      	ands	r3, r2
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d01e      	beq.n	8009d9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d11a      	bne.n	8009d9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	4b0e      	ldr	r3, [pc, #56]	@ (8009da4 <vPortFree+0xbc>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	43db      	mvns	r3, r3
 8009d6e:	401a      	ands	r2, r3
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d74:	f7fe fc66 	bl	8008644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8009da8 <vPortFree+0xc0>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4413      	add	r3, r2
 8009d82:	4a09      	ldr	r2, [pc, #36]	@ (8009da8 <vPortFree+0xc0>)
 8009d84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d86:	6938      	ldr	r0, [r7, #16]
 8009d88:	f000 f874 	bl	8009e74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d8c:	4b07      	ldr	r3, [pc, #28]	@ (8009dac <vPortFree+0xc4>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	3301      	adds	r3, #1
 8009d92:	4a06      	ldr	r2, [pc, #24]	@ (8009dac <vPortFree+0xc4>)
 8009d94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009d96:	f7fe fc63 	bl	8008660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d9a:	bf00      	nop
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
 8009da2:	bf00      	nop
 8009da4:	240051f8 	.word	0x240051f8
 8009da8:	240051e8 	.word	0x240051e8
 8009dac:	240051f4 	.word	0x240051f4

08009db0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009db6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009dba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009dbc:	4b27      	ldr	r3, [pc, #156]	@ (8009e5c <prvHeapInit+0xac>)
 8009dbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f003 0307 	and.w	r3, r3, #7
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d00c      	beq.n	8009de4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3307      	adds	r3, #7
 8009dce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 0307 	bic.w	r3, r3, #7
 8009dd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	4a1f      	ldr	r2, [pc, #124]	@ (8009e5c <prvHeapInit+0xac>)
 8009de0:	4413      	add	r3, r2
 8009de2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009de8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e60 <prvHeapInit+0xb0>)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009dee:	4b1c      	ldr	r3, [pc, #112]	@ (8009e60 <prvHeapInit+0xb0>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	4413      	add	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009dfc:	2208      	movs	r2, #8
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	1a9b      	subs	r3, r3, r2
 8009e02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f023 0307 	bic.w	r3, r3, #7
 8009e0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4a15      	ldr	r2, [pc, #84]	@ (8009e64 <prvHeapInit+0xb4>)
 8009e10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e12:	4b14      	ldr	r3, [pc, #80]	@ (8009e64 <prvHeapInit+0xb4>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2200      	movs	r2, #0
 8009e18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e1a:	4b12      	ldr	r3, [pc, #72]	@ (8009e64 <prvHeapInit+0xb4>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	1ad2      	subs	r2, r2, r3
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e30:	4b0c      	ldr	r3, [pc, #48]	@ (8009e64 <prvHeapInit+0xb4>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8009e68 <prvHeapInit+0xb8>)
 8009e3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	4a09      	ldr	r2, [pc, #36]	@ (8009e6c <prvHeapInit+0xbc>)
 8009e46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e48:	4b09      	ldr	r3, [pc, #36]	@ (8009e70 <prvHeapInit+0xc0>)
 8009e4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e4e:	601a      	str	r2, [r3, #0]
}
 8009e50:	bf00      	nop
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	240015dc 	.word	0x240015dc
 8009e60:	240051dc 	.word	0x240051dc
 8009e64:	240051e4 	.word	0x240051e4
 8009e68:	240051ec 	.word	0x240051ec
 8009e6c:	240051e8 	.word	0x240051e8
 8009e70:	240051f8 	.word	0x240051f8

08009e74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e7c:	4b28      	ldr	r3, [pc, #160]	@ (8009f20 <prvInsertBlockIntoFreeList+0xac>)
 8009e7e:	60fb      	str	r3, [r7, #12]
 8009e80:	e002      	b.n	8009e88 <prvInsertBlockIntoFreeList+0x14>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d8f7      	bhi.n	8009e82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d108      	bne.n	8009eb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	441a      	add	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	441a      	add	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d118      	bne.n	8009efc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	4b15      	ldr	r3, [pc, #84]	@ (8009f24 <prvInsertBlockIntoFreeList+0xb0>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d00d      	beq.n	8009ef2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685a      	ldr	r2, [r3, #4]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	441a      	add	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	e008      	b.n	8009f04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8009f24 <prvInsertBlockIntoFreeList+0xb0>)
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	e003      	b.n	8009f04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d002      	beq.n	8009f12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f12:	bf00      	nop
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	240051dc 	.word	0x240051dc
 8009f24:	240051e4 	.word	0x240051e4

08009f28 <memset>:
 8009f28:	4402      	add	r2, r0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d100      	bne.n	8009f32 <memset+0xa>
 8009f30:	4770      	bx	lr
 8009f32:	f803 1b01 	strb.w	r1, [r3], #1
 8009f36:	e7f9      	b.n	8009f2c <memset+0x4>

08009f38 <_reclaim_reent>:
 8009f38:	4b29      	ldr	r3, [pc, #164]	@ (8009fe0 <_reclaim_reent+0xa8>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4283      	cmp	r3, r0
 8009f3e:	b570      	push	{r4, r5, r6, lr}
 8009f40:	4604      	mov	r4, r0
 8009f42:	d04b      	beq.n	8009fdc <_reclaim_reent+0xa4>
 8009f44:	69c3      	ldr	r3, [r0, #28]
 8009f46:	b1ab      	cbz	r3, 8009f74 <_reclaim_reent+0x3c>
 8009f48:	68db      	ldr	r3, [r3, #12]
 8009f4a:	b16b      	cbz	r3, 8009f68 <_reclaim_reent+0x30>
 8009f4c:	2500      	movs	r5, #0
 8009f4e:	69e3      	ldr	r3, [r4, #28]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	5959      	ldr	r1, [r3, r5]
 8009f54:	2900      	cmp	r1, #0
 8009f56:	d13b      	bne.n	8009fd0 <_reclaim_reent+0x98>
 8009f58:	3504      	adds	r5, #4
 8009f5a:	2d80      	cmp	r5, #128	@ 0x80
 8009f5c:	d1f7      	bne.n	8009f4e <_reclaim_reent+0x16>
 8009f5e:	69e3      	ldr	r3, [r4, #28]
 8009f60:	4620      	mov	r0, r4
 8009f62:	68d9      	ldr	r1, [r3, #12]
 8009f64:	f000 f872 	bl	800a04c <_free_r>
 8009f68:	69e3      	ldr	r3, [r4, #28]
 8009f6a:	6819      	ldr	r1, [r3, #0]
 8009f6c:	b111      	cbz	r1, 8009f74 <_reclaim_reent+0x3c>
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f000 f86c 	bl	800a04c <_free_r>
 8009f74:	6961      	ldr	r1, [r4, #20]
 8009f76:	b111      	cbz	r1, 8009f7e <_reclaim_reent+0x46>
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 f867 	bl	800a04c <_free_r>
 8009f7e:	69e1      	ldr	r1, [r4, #28]
 8009f80:	b111      	cbz	r1, 8009f88 <_reclaim_reent+0x50>
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f862 	bl	800a04c <_free_r>
 8009f88:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009f8a:	b111      	cbz	r1, 8009f92 <_reclaim_reent+0x5a>
 8009f8c:	4620      	mov	r0, r4
 8009f8e:	f000 f85d 	bl	800a04c <_free_r>
 8009f92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f94:	b111      	cbz	r1, 8009f9c <_reclaim_reent+0x64>
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 f858 	bl	800a04c <_free_r>
 8009f9c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009f9e:	b111      	cbz	r1, 8009fa6 <_reclaim_reent+0x6e>
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 f853 	bl	800a04c <_free_r>
 8009fa6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009fa8:	b111      	cbz	r1, 8009fb0 <_reclaim_reent+0x78>
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 f84e 	bl	800a04c <_free_r>
 8009fb0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009fb2:	b111      	cbz	r1, 8009fba <_reclaim_reent+0x82>
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	f000 f849 	bl	800a04c <_free_r>
 8009fba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009fbc:	b111      	cbz	r1, 8009fc4 <_reclaim_reent+0x8c>
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	f000 f844 	bl	800a04c <_free_r>
 8009fc4:	6a23      	ldr	r3, [r4, #32]
 8009fc6:	b14b      	cbz	r3, 8009fdc <_reclaim_reent+0xa4>
 8009fc8:	4620      	mov	r0, r4
 8009fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fce:	4718      	bx	r3
 8009fd0:	680e      	ldr	r6, [r1, #0]
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	f000 f83a 	bl	800a04c <_free_r>
 8009fd8:	4631      	mov	r1, r6
 8009fda:	e7bb      	b.n	8009f54 <_reclaim_reent+0x1c>
 8009fdc:	bd70      	pop	{r4, r5, r6, pc}
 8009fde:	bf00      	nop
 8009fe0:	24000014 	.word	0x24000014

08009fe4 <__libc_init_array>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800a01c <__libc_init_array+0x38>)
 8009fe8:	4c0d      	ldr	r4, [pc, #52]	@ (800a020 <__libc_init_array+0x3c>)
 8009fea:	1b64      	subs	r4, r4, r5
 8009fec:	10a4      	asrs	r4, r4, #2
 8009fee:	2600      	movs	r6, #0
 8009ff0:	42a6      	cmp	r6, r4
 8009ff2:	d109      	bne.n	800a008 <__libc_init_array+0x24>
 8009ff4:	4d0b      	ldr	r5, [pc, #44]	@ (800a024 <__libc_init_array+0x40>)
 8009ff6:	4c0c      	ldr	r4, [pc, #48]	@ (800a028 <__libc_init_array+0x44>)
 8009ff8:	f000 fe4a 	bl	800ac90 <_init>
 8009ffc:	1b64      	subs	r4, r4, r5
 8009ffe:	10a4      	asrs	r4, r4, #2
 800a000:	2600      	movs	r6, #0
 800a002:	42a6      	cmp	r6, r4
 800a004:	d105      	bne.n	800a012 <__libc_init_array+0x2e>
 800a006:	bd70      	pop	{r4, r5, r6, pc}
 800a008:	f855 3b04 	ldr.w	r3, [r5], #4
 800a00c:	4798      	blx	r3
 800a00e:	3601      	adds	r6, #1
 800a010:	e7ee      	b.n	8009ff0 <__libc_init_array+0xc>
 800a012:	f855 3b04 	ldr.w	r3, [r5], #4
 800a016:	4798      	blx	r3
 800a018:	3601      	adds	r6, #1
 800a01a:	e7f2      	b.n	800a002 <__libc_init_array+0x1e>
 800a01c:	0800af38 	.word	0x0800af38
 800a020:	0800af38 	.word	0x0800af38
 800a024:	0800af38 	.word	0x0800af38
 800a028:	0800af3c 	.word	0x0800af3c

0800a02c <__retarget_lock_acquire_recursive>:
 800a02c:	4770      	bx	lr

0800a02e <__retarget_lock_release_recursive>:
 800a02e:	4770      	bx	lr

0800a030 <memcpy>:
 800a030:	440a      	add	r2, r1
 800a032:	4291      	cmp	r1, r2
 800a034:	f100 33ff 	add.w	r3, r0, #4294967295
 800a038:	d100      	bne.n	800a03c <memcpy+0xc>
 800a03a:	4770      	bx	lr
 800a03c:	b510      	push	{r4, lr}
 800a03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a042:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a046:	4291      	cmp	r1, r2
 800a048:	d1f9      	bne.n	800a03e <memcpy+0xe>
 800a04a:	bd10      	pop	{r4, pc}

0800a04c <_free_r>:
 800a04c:	b538      	push	{r3, r4, r5, lr}
 800a04e:	4605      	mov	r5, r0
 800a050:	2900      	cmp	r1, #0
 800a052:	d041      	beq.n	800a0d8 <_free_r+0x8c>
 800a054:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a058:	1f0c      	subs	r4, r1, #4
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	bfb8      	it	lt
 800a05e:	18e4      	addlt	r4, r4, r3
 800a060:	f000 f83e 	bl	800a0e0 <__malloc_lock>
 800a064:	4a1d      	ldr	r2, [pc, #116]	@ (800a0dc <_free_r+0x90>)
 800a066:	6813      	ldr	r3, [r2, #0]
 800a068:	b933      	cbnz	r3, 800a078 <_free_r+0x2c>
 800a06a:	6063      	str	r3, [r4, #4]
 800a06c:	6014      	str	r4, [r2, #0]
 800a06e:	4628      	mov	r0, r5
 800a070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a074:	f000 b83a 	b.w	800a0ec <__malloc_unlock>
 800a078:	42a3      	cmp	r3, r4
 800a07a:	d908      	bls.n	800a08e <_free_r+0x42>
 800a07c:	6820      	ldr	r0, [r4, #0]
 800a07e:	1821      	adds	r1, r4, r0
 800a080:	428b      	cmp	r3, r1
 800a082:	bf01      	itttt	eq
 800a084:	6819      	ldreq	r1, [r3, #0]
 800a086:	685b      	ldreq	r3, [r3, #4]
 800a088:	1809      	addeq	r1, r1, r0
 800a08a:	6021      	streq	r1, [r4, #0]
 800a08c:	e7ed      	b.n	800a06a <_free_r+0x1e>
 800a08e:	461a      	mov	r2, r3
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	b10b      	cbz	r3, 800a098 <_free_r+0x4c>
 800a094:	42a3      	cmp	r3, r4
 800a096:	d9fa      	bls.n	800a08e <_free_r+0x42>
 800a098:	6811      	ldr	r1, [r2, #0]
 800a09a:	1850      	adds	r0, r2, r1
 800a09c:	42a0      	cmp	r0, r4
 800a09e:	d10b      	bne.n	800a0b8 <_free_r+0x6c>
 800a0a0:	6820      	ldr	r0, [r4, #0]
 800a0a2:	4401      	add	r1, r0
 800a0a4:	1850      	adds	r0, r2, r1
 800a0a6:	4283      	cmp	r3, r0
 800a0a8:	6011      	str	r1, [r2, #0]
 800a0aa:	d1e0      	bne.n	800a06e <_free_r+0x22>
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	6053      	str	r3, [r2, #4]
 800a0b2:	4408      	add	r0, r1
 800a0b4:	6010      	str	r0, [r2, #0]
 800a0b6:	e7da      	b.n	800a06e <_free_r+0x22>
 800a0b8:	d902      	bls.n	800a0c0 <_free_r+0x74>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	602b      	str	r3, [r5, #0]
 800a0be:	e7d6      	b.n	800a06e <_free_r+0x22>
 800a0c0:	6820      	ldr	r0, [r4, #0]
 800a0c2:	1821      	adds	r1, r4, r0
 800a0c4:	428b      	cmp	r3, r1
 800a0c6:	bf04      	itt	eq
 800a0c8:	6819      	ldreq	r1, [r3, #0]
 800a0ca:	685b      	ldreq	r3, [r3, #4]
 800a0cc:	6063      	str	r3, [r4, #4]
 800a0ce:	bf04      	itt	eq
 800a0d0:	1809      	addeq	r1, r1, r0
 800a0d2:	6021      	streq	r1, [r4, #0]
 800a0d4:	6054      	str	r4, [r2, #4]
 800a0d6:	e7ca      	b.n	800a06e <_free_r+0x22>
 800a0d8:	bd38      	pop	{r3, r4, r5, pc}
 800a0da:	bf00      	nop
 800a0dc:	24005338 	.word	0x24005338

0800a0e0 <__malloc_lock>:
 800a0e0:	4801      	ldr	r0, [pc, #4]	@ (800a0e8 <__malloc_lock+0x8>)
 800a0e2:	f7ff bfa3 	b.w	800a02c <__retarget_lock_acquire_recursive>
 800a0e6:	bf00      	nop
 800a0e8:	24005334 	.word	0x24005334

0800a0ec <__malloc_unlock>:
 800a0ec:	4801      	ldr	r0, [pc, #4]	@ (800a0f4 <__malloc_unlock+0x8>)
 800a0ee:	f7ff bf9e 	b.w	800a02e <__retarget_lock_release_recursive>
 800a0f2:	bf00      	nop
 800a0f4:	24005334 	.word	0x24005334

0800a0f8 <sin>:
 800a0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0fa:	eeb0 7b40 	vmov.f64	d7, d0
 800a0fe:	ee17 3a90 	vmov	r3, s15
 800a102:	4a21      	ldr	r2, [pc, #132]	@ (800a188 <sin+0x90>)
 800a104:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a108:	4293      	cmp	r3, r2
 800a10a:	d807      	bhi.n	800a11c <sin+0x24>
 800a10c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800a180 <sin+0x88>
 800a110:	2000      	movs	r0, #0
 800a112:	b005      	add	sp, #20
 800a114:	f85d eb04 	ldr.w	lr, [sp], #4
 800a118:	f000 b8a2 	b.w	800a260 <__kernel_sin>
 800a11c:	4a1b      	ldr	r2, [pc, #108]	@ (800a18c <sin+0x94>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d904      	bls.n	800a12c <sin+0x34>
 800a122:	ee30 0b40 	vsub.f64	d0, d0, d0
 800a126:	b005      	add	sp, #20
 800a128:	f85d fb04 	ldr.w	pc, [sp], #4
 800a12c:	4668      	mov	r0, sp
 800a12e:	f000 f8ef 	bl	800a310 <__ieee754_rem_pio2>
 800a132:	f000 0003 	and.w	r0, r0, #3
 800a136:	2801      	cmp	r0, #1
 800a138:	d00a      	beq.n	800a150 <sin+0x58>
 800a13a:	2802      	cmp	r0, #2
 800a13c:	d00f      	beq.n	800a15e <sin+0x66>
 800a13e:	b9c0      	cbnz	r0, 800a172 <sin+0x7a>
 800a140:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a144:	ed9d 0b00 	vldr	d0, [sp]
 800a148:	2001      	movs	r0, #1
 800a14a:	f000 f889 	bl	800a260 <__kernel_sin>
 800a14e:	e7ea      	b.n	800a126 <sin+0x2e>
 800a150:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a154:	ed9d 0b00 	vldr	d0, [sp]
 800a158:	f000 f81a 	bl	800a190 <__kernel_cos>
 800a15c:	e7e3      	b.n	800a126 <sin+0x2e>
 800a15e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a162:	ed9d 0b00 	vldr	d0, [sp]
 800a166:	2001      	movs	r0, #1
 800a168:	f000 f87a 	bl	800a260 <__kernel_sin>
 800a16c:	eeb1 0b40 	vneg.f64	d0, d0
 800a170:	e7d9      	b.n	800a126 <sin+0x2e>
 800a172:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a176:	ed9d 0b00 	vldr	d0, [sp]
 800a17a:	f000 f809 	bl	800a190 <__kernel_cos>
 800a17e:	e7f5      	b.n	800a16c <sin+0x74>
	...
 800a188:	3fe921fb 	.word	0x3fe921fb
 800a18c:	7fefffff 	.word	0x7fefffff

0800a190 <__kernel_cos>:
 800a190:	eeb0 5b40 	vmov.f64	d5, d0
 800a194:	ee15 1a90 	vmov	r1, s11
 800a198:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a19c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800a1a0:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800a1a4:	d204      	bcs.n	800a1b0 <__kernel_cos+0x20>
 800a1a6:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800a1aa:	ee17 3a90 	vmov	r3, s15
 800a1ae:	b343      	cbz	r3, 800a202 <__kernel_cos+0x72>
 800a1b0:	ee25 6b05 	vmul.f64	d6, d5, d5
 800a1b4:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800a1b8:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800a228 <__kernel_cos+0x98>
 800a1bc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a230 <__kernel_cos+0xa0>
 800a1c0:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a1c4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a238 <__kernel_cos+0xa8>
 800a1c8:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a1cc:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a240 <__kernel_cos+0xb0>
 800a1d0:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a1d4:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800a248 <__kernel_cos+0xb8>
 800a1d8:	4b1f      	ldr	r3, [pc, #124]	@ (800a258 <__kernel_cos+0xc8>)
 800a1da:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a1de:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800a250 <__kernel_cos+0xc0>
 800a1e2:	4299      	cmp	r1, r3
 800a1e4:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a1e8:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a1ec:	ee24 4b06 	vmul.f64	d4, d4, d6
 800a1f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a1f4:	eea6 1b04 	vfma.f64	d1, d6, d4
 800a1f8:	d804      	bhi.n	800a204 <__kernel_cos+0x74>
 800a1fa:	ee37 7b41 	vsub.f64	d7, d7, d1
 800a1fe:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a202:	4770      	bx	lr
 800a204:	4b15      	ldr	r3, [pc, #84]	@ (800a25c <__kernel_cos+0xcc>)
 800a206:	4299      	cmp	r1, r3
 800a208:	d809      	bhi.n	800a21e <__kernel_cos+0x8e>
 800a20a:	2200      	movs	r2, #0
 800a20c:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800a210:	ec43 2b16 	vmov	d6, r2, r3
 800a214:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a218:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a21c:	e7ed      	b.n	800a1fa <__kernel_cos+0x6a>
 800a21e:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800a222:	e7f7      	b.n	800a214 <__kernel_cos+0x84>
 800a224:	f3af 8000 	nop.w
 800a228:	be8838d4 	.word	0xbe8838d4
 800a22c:	bda8fae9 	.word	0xbda8fae9
 800a230:	bdb4b1c4 	.word	0xbdb4b1c4
 800a234:	3e21ee9e 	.word	0x3e21ee9e
 800a238:	809c52ad 	.word	0x809c52ad
 800a23c:	be927e4f 	.word	0xbe927e4f
 800a240:	19cb1590 	.word	0x19cb1590
 800a244:	3efa01a0 	.word	0x3efa01a0
 800a248:	16c15177 	.word	0x16c15177
 800a24c:	bf56c16c 	.word	0xbf56c16c
 800a250:	5555554c 	.word	0x5555554c
 800a254:	3fa55555 	.word	0x3fa55555
 800a258:	3fd33332 	.word	0x3fd33332
 800a25c:	3fe90000 	.word	0x3fe90000

0800a260 <__kernel_sin>:
 800a260:	ee10 3a90 	vmov	r3, s1
 800a264:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a268:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a26c:	d204      	bcs.n	800a278 <__kernel_sin+0x18>
 800a26e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800a272:	ee17 3a90 	vmov	r3, s15
 800a276:	b35b      	cbz	r3, 800a2d0 <__kernel_sin+0x70>
 800a278:	ee20 6b00 	vmul.f64	d6, d0, d0
 800a27c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800a280:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800a2d8 <__kernel_sin+0x78>
 800a284:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a2e0 <__kernel_sin+0x80>
 800a288:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a28c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a2e8 <__kernel_sin+0x88>
 800a290:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a294:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a2f0 <__kernel_sin+0x90>
 800a298:	eea7 4b06 	vfma.f64	d4, d7, d6
 800a29c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800a2f8 <__kernel_sin+0x98>
 800a2a0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800a2a4:	b930      	cbnz	r0, 800a2b4 <__kernel_sin+0x54>
 800a2a6:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800a300 <__kernel_sin+0xa0>
 800a2aa:	eea6 4b07 	vfma.f64	d4, d6, d7
 800a2ae:	eea4 0b05 	vfma.f64	d0, d4, d5
 800a2b2:	4770      	bx	lr
 800a2b4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800a2b8:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800a2bc:	eea1 7b04 	vfma.f64	d7, d1, d4
 800a2c0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800a2c4:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a308 <__kernel_sin+0xa8>
 800a2c8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800a2cc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800a2d0:	4770      	bx	lr
 800a2d2:	bf00      	nop
 800a2d4:	f3af 8000 	nop.w
 800a2d8:	5acfd57c 	.word	0x5acfd57c
 800a2dc:	3de5d93a 	.word	0x3de5d93a
 800a2e0:	8a2b9ceb 	.word	0x8a2b9ceb
 800a2e4:	be5ae5e6 	.word	0xbe5ae5e6
 800a2e8:	57b1fe7d 	.word	0x57b1fe7d
 800a2ec:	3ec71de3 	.word	0x3ec71de3
 800a2f0:	19c161d5 	.word	0x19c161d5
 800a2f4:	bf2a01a0 	.word	0xbf2a01a0
 800a2f8:	1110f8a6 	.word	0x1110f8a6
 800a2fc:	3f811111 	.word	0x3f811111
 800a300:	55555549 	.word	0x55555549
 800a304:	bfc55555 	.word	0xbfc55555
 800a308:	55555549 	.word	0x55555549
 800a30c:	3fc55555 	.word	0x3fc55555

0800a310 <__ieee754_rem_pio2>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	eeb0 7b40 	vmov.f64	d7, d0
 800a316:	ee17 5a90 	vmov	r5, s15
 800a31a:	4b99      	ldr	r3, [pc, #612]	@ (800a580 <__ieee754_rem_pio2+0x270>)
 800a31c:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800a320:	429e      	cmp	r6, r3
 800a322:	b088      	sub	sp, #32
 800a324:	4604      	mov	r4, r0
 800a326:	d807      	bhi.n	800a338 <__ieee754_rem_pio2+0x28>
 800a328:	2200      	movs	r2, #0
 800a32a:	2300      	movs	r3, #0
 800a32c:	ed84 0b00 	vstr	d0, [r4]
 800a330:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a334:	2000      	movs	r0, #0
 800a336:	e01b      	b.n	800a370 <__ieee754_rem_pio2+0x60>
 800a338:	4b92      	ldr	r3, [pc, #584]	@ (800a584 <__ieee754_rem_pio2+0x274>)
 800a33a:	429e      	cmp	r6, r3
 800a33c:	d83b      	bhi.n	800a3b6 <__ieee754_rem_pio2+0xa6>
 800a33e:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800a342:	2d00      	cmp	r5, #0
 800a344:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800a540 <__ieee754_rem_pio2+0x230>
 800a348:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800a34c:	dd19      	ble.n	800a382 <__ieee754_rem_pio2+0x72>
 800a34e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a352:	429e      	cmp	r6, r3
 800a354:	d00e      	beq.n	800a374 <__ieee754_rem_pio2+0x64>
 800a356:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800a548 <__ieee754_rem_pio2+0x238>
 800a35a:	ee37 6b45 	vsub.f64	d6, d7, d5
 800a35e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a362:	ed84 6b00 	vstr	d6, [r4]
 800a366:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a36a:	ed84 7b02 	vstr	d7, [r4, #8]
 800a36e:	2001      	movs	r0, #1
 800a370:	b008      	add	sp, #32
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800a550 <__ieee754_rem_pio2+0x240>
 800a378:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800a558 <__ieee754_rem_pio2+0x248>
 800a37c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a380:	e7eb      	b.n	800a35a <__ieee754_rem_pio2+0x4a>
 800a382:	429e      	cmp	r6, r3
 800a384:	ee30 7b06 	vadd.f64	d7, d0, d6
 800a388:	d00e      	beq.n	800a3a8 <__ieee754_rem_pio2+0x98>
 800a38a:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800a548 <__ieee754_rem_pio2+0x238>
 800a38e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800a392:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a396:	ed84 6b00 	vstr	d6, [r4]
 800a39a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a39e:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a2:	ed84 7b02 	vstr	d7, [r4, #8]
 800a3a6:	e7e3      	b.n	800a370 <__ieee754_rem_pio2+0x60>
 800a3a8:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800a550 <__ieee754_rem_pio2+0x240>
 800a3ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800a558 <__ieee754_rem_pio2+0x248>
 800a3b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a3b4:	e7eb      	b.n	800a38e <__ieee754_rem_pio2+0x7e>
 800a3b6:	4b74      	ldr	r3, [pc, #464]	@ (800a588 <__ieee754_rem_pio2+0x278>)
 800a3b8:	429e      	cmp	r6, r3
 800a3ba:	d870      	bhi.n	800a49e <__ieee754_rem_pio2+0x18e>
 800a3bc:	f000 f8ec 	bl	800a598 <fabs>
 800a3c0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a3c4:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a560 <__ieee754_rem_pio2+0x250>
 800a3c8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800a3cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a3d0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800a3d4:	ee17 0a90 	vmov	r0, s15
 800a3d8:	eeb1 4b45 	vneg.f64	d4, d5
 800a3dc:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800a540 <__ieee754_rem_pio2+0x230>
 800a3e0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800a3e4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800a548 <__ieee754_rem_pio2+0x238>
 800a3e8:	281f      	cmp	r0, #31
 800a3ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a3ee:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a3f2:	dc05      	bgt.n	800a400 <__ieee754_rem_pio2+0xf0>
 800a3f4:	4b65      	ldr	r3, [pc, #404]	@ (800a58c <__ieee754_rem_pio2+0x27c>)
 800a3f6:	1e42      	subs	r2, r0, #1
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	42b3      	cmp	r3, r6
 800a3fe:	d109      	bne.n	800a414 <__ieee754_rem_pio2+0x104>
 800a400:	ee16 3a90 	vmov	r3, s13
 800a404:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a408:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800a40c:	2b10      	cmp	r3, #16
 800a40e:	ea4f 5226 	mov.w	r2, r6, asr #20
 800a412:	dc02      	bgt.n	800a41a <__ieee754_rem_pio2+0x10a>
 800a414:	ed84 6b00 	vstr	d6, [r4]
 800a418:	e01a      	b.n	800a450 <__ieee754_rem_pio2+0x140>
 800a41a:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800a550 <__ieee754_rem_pio2+0x240>
 800a41e:	eeb0 6b40 	vmov.f64	d6, d0
 800a422:	eea4 6b03 	vfma.f64	d6, d4, d3
 800a426:	ee30 7b46 	vsub.f64	d7, d0, d6
 800a42a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800a42e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800a558 <__ieee754_rem_pio2+0x248>
 800a432:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800a436:	ee36 3b47 	vsub.f64	d3, d6, d7
 800a43a:	ee13 3a90 	vmov	r3, s7
 800a43e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	2b31      	cmp	r3, #49	@ 0x31
 800a446:	dc17      	bgt.n	800a478 <__ieee754_rem_pio2+0x168>
 800a448:	eeb0 0b46 	vmov.f64	d0, d6
 800a44c:	ed84 3b00 	vstr	d3, [r4]
 800a450:	ed94 6b00 	vldr	d6, [r4]
 800a454:	2d00      	cmp	r5, #0
 800a456:	ee30 0b46 	vsub.f64	d0, d0, d6
 800a45a:	ee30 0b47 	vsub.f64	d0, d0, d7
 800a45e:	ed84 0b02 	vstr	d0, [r4, #8]
 800a462:	da85      	bge.n	800a370 <__ieee754_rem_pio2+0x60>
 800a464:	eeb1 6b46 	vneg.f64	d6, d6
 800a468:	eeb1 0b40 	vneg.f64	d0, d0
 800a46c:	ed84 6b00 	vstr	d6, [r4]
 800a470:	ed84 0b02 	vstr	d0, [r4, #8]
 800a474:	4240      	negs	r0, r0
 800a476:	e77b      	b.n	800a370 <__ieee754_rem_pio2+0x60>
 800a478:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800a568 <__ieee754_rem_pio2+0x258>
 800a47c:	eeb0 0b46 	vmov.f64	d0, d6
 800a480:	eea4 0b07 	vfma.f64	d0, d4, d7
 800a484:	ee36 6b40 	vsub.f64	d6, d6, d0
 800a488:	eea4 6b07 	vfma.f64	d6, d4, d7
 800a48c:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800a570 <__ieee754_rem_pio2+0x260>
 800a490:	eeb0 7b46 	vmov.f64	d7, d6
 800a494:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800a498:	ee30 6b47 	vsub.f64	d6, d0, d7
 800a49c:	e7ba      	b.n	800a414 <__ieee754_rem_pio2+0x104>
 800a49e:	4b3c      	ldr	r3, [pc, #240]	@ (800a590 <__ieee754_rem_pio2+0x280>)
 800a4a0:	429e      	cmp	r6, r3
 800a4a2:	d906      	bls.n	800a4b2 <__ieee754_rem_pio2+0x1a2>
 800a4a4:	ee30 7b40 	vsub.f64	d7, d0, d0
 800a4a8:	ed80 7b02 	vstr	d7, [r0, #8]
 800a4ac:	ed80 7b00 	vstr	d7, [r0]
 800a4b0:	e740      	b.n	800a334 <__ieee754_rem_pio2+0x24>
 800a4b2:	ee10 3a10 	vmov	r3, s0
 800a4b6:	1532      	asrs	r2, r6, #20
 800a4b8:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800a4bc:	4618      	mov	r0, r3
 800a4be:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800a4c2:	ec41 0b17 	vmov	d7, r0, r1
 800a4c6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a4ca:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800a578 <__ieee754_rem_pio2+0x268>
 800a4ce:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a4d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a4d6:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a4da:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a4de:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800a4e2:	a808      	add	r0, sp, #32
 800a4e4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800a4e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a4ec:	ed8d 6b04 	vstr	d6, [sp, #16]
 800a4f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a4f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a4f8:	2103      	movs	r1, #3
 800a4fa:	ed30 7b02 	vldmdb	r0!, {d7}
 800a4fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a506:	460b      	mov	r3, r1
 800a508:	f101 31ff 	add.w	r1, r1, #4294967295
 800a50c:	d0f5      	beq.n	800a4fa <__ieee754_rem_pio2+0x1ea>
 800a50e:	4921      	ldr	r1, [pc, #132]	@ (800a594 <__ieee754_rem_pio2+0x284>)
 800a510:	9101      	str	r1, [sp, #4]
 800a512:	2102      	movs	r1, #2
 800a514:	9100      	str	r1, [sp, #0]
 800a516:	a802      	add	r0, sp, #8
 800a518:	4621      	mov	r1, r4
 800a51a:	f000 f845 	bl	800a5a8 <__kernel_rem_pio2>
 800a51e:	2d00      	cmp	r5, #0
 800a520:	f6bf af26 	bge.w	800a370 <__ieee754_rem_pio2+0x60>
 800a524:	ed94 7b00 	vldr	d7, [r4]
 800a528:	eeb1 7b47 	vneg.f64	d7, d7
 800a52c:	ed84 7b00 	vstr	d7, [r4]
 800a530:	ed94 7b02 	vldr	d7, [r4, #8]
 800a534:	eeb1 7b47 	vneg.f64	d7, d7
 800a538:	ed84 7b02 	vstr	d7, [r4, #8]
 800a53c:	e79a      	b.n	800a474 <__ieee754_rem_pio2+0x164>
 800a53e:	bf00      	nop
 800a540:	54400000 	.word	0x54400000
 800a544:	3ff921fb 	.word	0x3ff921fb
 800a548:	1a626331 	.word	0x1a626331
 800a54c:	3dd0b461 	.word	0x3dd0b461
 800a550:	1a600000 	.word	0x1a600000
 800a554:	3dd0b461 	.word	0x3dd0b461
 800a558:	2e037073 	.word	0x2e037073
 800a55c:	3ba3198a 	.word	0x3ba3198a
 800a560:	6dc9c883 	.word	0x6dc9c883
 800a564:	3fe45f30 	.word	0x3fe45f30
 800a568:	2e000000 	.word	0x2e000000
 800a56c:	3ba3198a 	.word	0x3ba3198a
 800a570:	252049c1 	.word	0x252049c1
 800a574:	397b839a 	.word	0x397b839a
 800a578:	00000000 	.word	0x00000000
 800a57c:	41700000 	.word	0x41700000
 800a580:	3fe921fb 	.word	0x3fe921fb
 800a584:	4002d97b 	.word	0x4002d97b
 800a588:	413921fb 	.word	0x413921fb
 800a58c:	0800ad58 	.word	0x0800ad58
 800a590:	7fefffff 	.word	0x7fefffff
 800a594:	0800add8 	.word	0x0800add8

0800a598 <fabs>:
 800a598:	ec51 0b10 	vmov	r0, r1, d0
 800a59c:	4602      	mov	r2, r0
 800a59e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a5a2:	ec43 2b10 	vmov	d0, r2, r3
 800a5a6:	4770      	bx	lr

0800a5a8 <__kernel_rem_pio2>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	ed2d 8b06 	vpush	{d8-d10}
 800a5b0:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800a5b4:	469b      	mov	fp, r3
 800a5b6:	9001      	str	r0, [sp, #4]
 800a5b8:	4bbb      	ldr	r3, [pc, #748]	@ (800a8a8 <__kernel_rem_pio2+0x300>)
 800a5ba:	98a2      	ldr	r0, [sp, #648]	@ 0x288
 800a5bc:	f8dd 828c 	ldr.w	r8, [sp, #652]	@ 0x28c
 800a5c0:	f853 9020 	ldr.w	r9, [r3, r0, lsl #2]
 800a5c4:	f112 0f14 	cmn.w	r2, #20
 800a5c8:	bfa8      	it	ge
 800a5ca:	1ed3      	subge	r3, r2, #3
 800a5cc:	f10b 3aff 	add.w	sl, fp, #4294967295
 800a5d0:	bfb8      	it	lt
 800a5d2:	2300      	movlt	r3, #0
 800a5d4:	f06f 0517 	mvn.w	r5, #23
 800a5d8:	ed9f 6bad 	vldr	d6, [pc, #692]	@ 800a890 <__kernel_rem_pio2+0x2e8>
 800a5dc:	bfa4      	itt	ge
 800a5de:	2018      	movge	r0, #24
 800a5e0:	fb93 f3f0 	sdivge	r3, r3, r0
 800a5e4:	fb03 5505 	mla	r5, r3, r5, r5
 800a5e8:	eba3 040a 	sub.w	r4, r3, sl
 800a5ec:	4415      	add	r5, r2
 800a5ee:	460f      	mov	r7, r1
 800a5f0:	eb09 060a 	add.w	r6, r9, sl
 800a5f4:	a81a      	add	r0, sp, #104	@ 0x68
 800a5f6:	eb08 0c84 	add.w	ip, r8, r4, lsl #2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	42b2      	cmp	r2, r6
 800a5fe:	dd0e      	ble.n	800a61e <__kernel_rem_pio2+0x76>
 800a600:	aa1a      	add	r2, sp, #104	@ 0x68
 800a602:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800a606:	f50d 7ed4 	add.w	lr, sp, #424	@ 0x1a8
 800a60a:	2600      	movs	r6, #0
 800a60c:	454e      	cmp	r6, r9
 800a60e:	dc25      	bgt.n	800a65c <__kernel_rem_pio2+0xb4>
 800a610:	ed9f 7b9f 	vldr	d7, [pc, #636]	@ 800a890 <__kernel_rem_pio2+0x2e8>
 800a614:	f8dd c004 	ldr.w	ip, [sp, #4]
 800a618:	4614      	mov	r4, r2
 800a61a:	2000      	movs	r0, #0
 800a61c:	e015      	b.n	800a64a <__kernel_rem_pio2+0xa2>
 800a61e:	42d4      	cmn	r4, r2
 800a620:	d409      	bmi.n	800a636 <__kernel_rem_pio2+0x8e>
 800a622:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 800a626:	ee07 1a90 	vmov	s15, r1
 800a62a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a62e:	eca0 7b02 	vstmia	r0!, {d7}
 800a632:	3201      	adds	r2, #1
 800a634:	e7e2      	b.n	800a5fc <__kernel_rem_pio2+0x54>
 800a636:	eeb0 7b46 	vmov.f64	d7, d6
 800a63a:	e7f8      	b.n	800a62e <__kernel_rem_pio2+0x86>
 800a63c:	ecbc 5b02 	vldmia	ip!, {d5}
 800a640:	ed94 6b00 	vldr	d6, [r4]
 800a644:	3001      	adds	r0, #1
 800a646:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a64a:	4550      	cmp	r0, sl
 800a64c:	f1a4 0408 	sub.w	r4, r4, #8
 800a650:	ddf4      	ble.n	800a63c <__kernel_rem_pio2+0x94>
 800a652:	ecae 7b02 	vstmia	lr!, {d7}
 800a656:	3601      	adds	r6, #1
 800a658:	3208      	adds	r2, #8
 800a65a:	e7d7      	b.n	800a60c <__kernel_rem_pio2+0x64>
 800a65c:	aa06      	add	r2, sp, #24
 800a65e:	ed9f 9b8e 	vldr	d9, [pc, #568]	@ 800a898 <__kernel_rem_pio2+0x2f0>
 800a662:	ed9f ab8f 	vldr	d10, [pc, #572]	@ 800a8a0 <__kernel_rem_pio2+0x2f8>
 800a666:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800a66a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800a66e:	9203      	str	r2, [sp, #12]
 800a670:	9302      	str	r3, [sp, #8]
 800a672:	464c      	mov	r4, r9
 800a674:	00e3      	lsls	r3, r4, #3
 800a676:	9304      	str	r3, [sp, #16]
 800a678:	ab92      	add	r3, sp, #584	@ 0x248
 800a67a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a67e:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800a682:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800a684:	ab06      	add	r3, sp, #24
 800a686:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a68a:	461e      	mov	r6, r3
 800a68c:	4620      	mov	r0, r4
 800a68e:	2800      	cmp	r0, #0
 800a690:	f1a2 0208 	sub.w	r2, r2, #8
 800a694:	dc4a      	bgt.n	800a72c <__kernel_rem_pio2+0x184>
 800a696:	4628      	mov	r0, r5
 800a698:	9305      	str	r3, [sp, #20]
 800a69a:	f000 fa01 	bl	800aaa0 <scalbn>
 800a69e:	eeb0 8b40 	vmov.f64	d8, d0
 800a6a2:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800a6a6:	ee28 0b00 	vmul.f64	d0, d8, d0
 800a6aa:	f000 fa79 	bl	800aba0 <floor>
 800a6ae:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800a6b2:	eea0 8b47 	vfms.f64	d8, d0, d7
 800a6b6:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800a6ba:	2d00      	cmp	r5, #0
 800a6bc:	ee17 8a90 	vmov	r8, s15
 800a6c0:	9b05      	ldr	r3, [sp, #20]
 800a6c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a6c6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a6ca:	dd41      	ble.n	800a750 <__kernel_rem_pio2+0x1a8>
 800a6cc:	1e60      	subs	r0, r4, #1
 800a6ce:	aa06      	add	r2, sp, #24
 800a6d0:	f1c5 0c18 	rsb	ip, r5, #24
 800a6d4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800a6d8:	fa46 f20c 	asr.w	r2, r6, ip
 800a6dc:	4490      	add	r8, r2
 800a6de:	fa02 f20c 	lsl.w	r2, r2, ip
 800a6e2:	1ab6      	subs	r6, r6, r2
 800a6e4:	aa06      	add	r2, sp, #24
 800a6e6:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800a6ea:	f1c5 0217 	rsb	r2, r5, #23
 800a6ee:	4116      	asrs	r6, r2
 800a6f0:	2e00      	cmp	r6, #0
 800a6f2:	dd3c      	ble.n	800a76e <__kernel_rem_pio2+0x1c6>
 800a6f4:	f04f 0c00 	mov.w	ip, #0
 800a6f8:	f108 0801 	add.w	r8, r8, #1
 800a6fc:	4660      	mov	r0, ip
 800a6fe:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800a702:	4564      	cmp	r4, ip
 800a704:	dc66      	bgt.n	800a7d4 <__kernel_rem_pio2+0x22c>
 800a706:	2d00      	cmp	r5, #0
 800a708:	dd03      	ble.n	800a712 <__kernel_rem_pio2+0x16a>
 800a70a:	2d01      	cmp	r5, #1
 800a70c:	d072      	beq.n	800a7f4 <__kernel_rem_pio2+0x24c>
 800a70e:	2d02      	cmp	r5, #2
 800a710:	d07a      	beq.n	800a808 <__kernel_rem_pio2+0x260>
 800a712:	2e02      	cmp	r6, #2
 800a714:	d12b      	bne.n	800a76e <__kernel_rem_pio2+0x1c6>
 800a716:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a71a:	ee30 8b48 	vsub.f64	d8, d0, d8
 800a71e:	b330      	cbz	r0, 800a76e <__kernel_rem_pio2+0x1c6>
 800a720:	4628      	mov	r0, r5
 800a722:	f000 f9bd 	bl	800aaa0 <scalbn>
 800a726:	ee38 8b40 	vsub.f64	d8, d8, d0
 800a72a:	e020      	b.n	800a76e <__kernel_rem_pio2+0x1c6>
 800a72c:	ee20 7b09 	vmul.f64	d7, d0, d9
 800a730:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a734:	3801      	subs	r0, #1
 800a736:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800a73a:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800a73e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a742:	eca6 0a01 	vstmia	r6!, {s0}
 800a746:	ed92 0b00 	vldr	d0, [r2]
 800a74a:	ee37 0b00 	vadd.f64	d0, d7, d0
 800a74e:	e79e      	b.n	800a68e <__kernel_rem_pio2+0xe6>
 800a750:	d105      	bne.n	800a75e <__kernel_rem_pio2+0x1b6>
 800a752:	1e62      	subs	r2, r4, #1
 800a754:	a906      	add	r1, sp, #24
 800a756:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800a75a:	15f6      	asrs	r6, r6, #23
 800a75c:	e7c8      	b.n	800a6f0 <__kernel_rem_pio2+0x148>
 800a75e:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800a762:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a76a:	da31      	bge.n	800a7d0 <__kernel_rem_pio2+0x228>
 800a76c:	2600      	movs	r6, #0
 800a76e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a776:	f040 809b 	bne.w	800a8b0 <__kernel_rem_pio2+0x308>
 800a77a:	1e62      	subs	r2, r4, #1
 800a77c:	2000      	movs	r0, #0
 800a77e:	454a      	cmp	r2, r9
 800a780:	da49      	bge.n	800a816 <__kernel_rem_pio2+0x26e>
 800a782:	2800      	cmp	r0, #0
 800a784:	d062      	beq.n	800a84c <__kernel_rem_pio2+0x2a4>
 800a786:	3c01      	subs	r4, #1
 800a788:	ab06      	add	r3, sp, #24
 800a78a:	3d18      	subs	r5, #24
 800a78c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d0f8      	beq.n	800a786 <__kernel_rem_pio2+0x1de>
 800a794:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800a798:	4628      	mov	r0, r5
 800a79a:	f000 f981 	bl	800aaa0 <scalbn>
 800a79e:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800a898 <__kernel_rem_pio2+0x2f0>
 800a7a2:	1c62      	adds	r2, r4, #1
 800a7a4:	a96a      	add	r1, sp, #424	@ 0x1a8
 800a7a6:	00d3      	lsls	r3, r2, #3
 800a7a8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	2a00      	cmp	r2, #0
 800a7b0:	f280 80a8 	bge.w	800a904 <__kernel_rem_pio2+0x35c>
 800a7b4:	4622      	mov	r2, r4
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	f2c0 80c6 	blt.w	800a948 <__kernel_rem_pio2+0x3a0>
 800a7bc:	a96a      	add	r1, sp, #424	@ 0x1a8
 800a7be:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800a7c2:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800a890 <__kernel_rem_pio2+0x2e8>
 800a7c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800a8ac <__kernel_rem_pio2+0x304>
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	1aa1      	subs	r1, r4, r2
 800a7ce:	e0b0      	b.n	800a932 <__kernel_rem_pio2+0x38a>
 800a7d0:	2602      	movs	r6, #2
 800a7d2:	e78f      	b.n	800a6f4 <__kernel_rem_pio2+0x14c>
 800a7d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d8:	b948      	cbnz	r0, 800a7ee <__kernel_rem_pio2+0x246>
 800a7da:	b122      	cbz	r2, 800a7e6 <__kernel_rem_pio2+0x23e>
 800a7dc:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800a7e0:	f843 2c04 	str.w	r2, [r3, #-4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f10c 0c01 	add.w	ip, ip, #1
 800a7ea:	4610      	mov	r0, r2
 800a7ec:	e789      	b.n	800a702 <__kernel_rem_pio2+0x15a>
 800a7ee:	ebae 0202 	sub.w	r2, lr, r2
 800a7f2:	e7f5      	b.n	800a7e0 <__kernel_rem_pio2+0x238>
 800a7f4:	1e62      	subs	r2, r4, #1
 800a7f6:	ab06      	add	r3, sp, #24
 800a7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a800:	a906      	add	r1, sp, #24
 800a802:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a806:	e784      	b.n	800a712 <__kernel_rem_pio2+0x16a>
 800a808:	1e62      	subs	r2, r4, #1
 800a80a:	ab06      	add	r3, sp, #24
 800a80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a810:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a814:	e7f4      	b.n	800a800 <__kernel_rem_pio2+0x258>
 800a816:	ab06      	add	r3, sp, #24
 800a818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81c:	3a01      	subs	r2, #1
 800a81e:	4318      	orrs	r0, r3
 800a820:	e7ad      	b.n	800a77e <__kernel_rem_pio2+0x1d6>
 800a822:	3301      	adds	r3, #1
 800a824:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800a828:	2800      	cmp	r0, #0
 800a82a:	d0fa      	beq.n	800a822 <__kernel_rem_pio2+0x27a>
 800a82c:	9a04      	ldr	r2, [sp, #16]
 800a82e:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800a832:	446a      	add	r2, sp
 800a834:	eb04 000b 	add.w	r0, r4, fp
 800a838:	a91a      	add	r1, sp, #104	@ 0x68
 800a83a:	1c66      	adds	r6, r4, #1
 800a83c:	3a98      	subs	r2, #152	@ 0x98
 800a83e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800a842:	4423      	add	r3, r4
 800a844:	42b3      	cmp	r3, r6
 800a846:	da04      	bge.n	800a852 <__kernel_rem_pio2+0x2aa>
 800a848:	461c      	mov	r4, r3
 800a84a:	e713      	b.n	800a674 <__kernel_rem_pio2+0xcc>
 800a84c:	9a03      	ldr	r2, [sp, #12]
 800a84e:	2301      	movs	r3, #1
 800a850:	e7e8      	b.n	800a824 <__kernel_rem_pio2+0x27c>
 800a852:	9902      	ldr	r1, [sp, #8]
 800a854:	f8dd c004 	ldr.w	ip, [sp, #4]
 800a858:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800a85c:	9104      	str	r1, [sp, #16]
 800a85e:	ee07 1a90 	vmov	s15, r1
 800a862:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a866:	2400      	movs	r4, #0
 800a868:	eca0 7b02 	vstmia	r0!, {d7}
 800a86c:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 800a890 <__kernel_rem_pio2+0x2e8>
 800a870:	4686      	mov	lr, r0
 800a872:	4554      	cmp	r4, sl
 800a874:	dd03      	ble.n	800a87e <__kernel_rem_pio2+0x2d6>
 800a876:	eca2 7b02 	vstmia	r2!, {d7}
 800a87a:	3601      	adds	r6, #1
 800a87c:	e7e2      	b.n	800a844 <__kernel_rem_pio2+0x29c>
 800a87e:	ecbc 5b02 	vldmia	ip!, {d5}
 800a882:	ed3e 6b02 	vldmdb	lr!, {d6}
 800a886:	3401      	adds	r4, #1
 800a888:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a88c:	e7f1      	b.n	800a872 <__kernel_rem_pio2+0x2ca>
 800a88e:	bf00      	nop
	...
 800a89c:	3e700000 	.word	0x3e700000
 800a8a0:	00000000 	.word	0x00000000
 800a8a4:	41700000 	.word	0x41700000
 800a8a8:	0800af20 	.word	0x0800af20
 800a8ac:	0800aee0 	.word	0x0800aee0
 800a8b0:	4268      	negs	r0, r5
 800a8b2:	eeb0 0b48 	vmov.f64	d0, d8
 800a8b6:	f000 f8f3 	bl	800aaa0 <scalbn>
 800a8ba:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 800aa88 <__kernel_rem_pio2+0x4e0>
 800a8be:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800a8c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c6:	db17      	blt.n	800a8f8 <__kernel_rem_pio2+0x350>
 800a8c8:	ed9f 7b71 	vldr	d7, [pc, #452]	@ 800aa90 <__kernel_rem_pio2+0x4e8>
 800a8cc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800a8d0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800a8d4:	aa06      	add	r2, sp, #24
 800a8d6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800a8da:	eea5 0b46 	vfms.f64	d0, d5, d6
 800a8de:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a8e2:	3518      	adds	r5, #24
 800a8e4:	ee10 3a10 	vmov	r3, s0
 800a8e8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a8ec:	ee17 3a10 	vmov	r3, s14
 800a8f0:	3401      	adds	r4, #1
 800a8f2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800a8f6:	e74d      	b.n	800a794 <__kernel_rem_pio2+0x1ec>
 800a8f8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800a8fc:	aa06      	add	r2, sp, #24
 800a8fe:	ee10 3a10 	vmov	r3, s0
 800a902:	e7f6      	b.n	800a8f2 <__kernel_rem_pio2+0x34a>
 800a904:	a806      	add	r0, sp, #24
 800a906:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800a90a:	9001      	str	r0, [sp, #4]
 800a90c:	ee07 0a90 	vmov	s15, r0
 800a910:	3a01      	subs	r2, #1
 800a912:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a916:	ee27 7b00 	vmul.f64	d7, d7, d0
 800a91a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800a91e:	ed21 7b02 	vstmdb	r1!, {d7}
 800a922:	e744      	b.n	800a7ae <__kernel_rem_pio2+0x206>
 800a924:	ecbc 5b02 	vldmia	ip!, {d5}
 800a928:	ecb5 6b02 	vldmia	r5!, {d6}
 800a92c:	3001      	adds	r0, #1
 800a92e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800a932:	4548      	cmp	r0, r9
 800a934:	dc01      	bgt.n	800a93a <__kernel_rem_pio2+0x392>
 800a936:	4281      	cmp	r1, r0
 800a938:	daf4      	bge.n	800a924 <__kernel_rem_pio2+0x37c>
 800a93a:	a842      	add	r0, sp, #264	@ 0x108
 800a93c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800a940:	ed81 7b00 	vstr	d7, [r1]
 800a944:	3a01      	subs	r2, #1
 800a946:	e736      	b.n	800a7b6 <__kernel_rem_pio2+0x20e>
 800a948:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800a94a:	2a02      	cmp	r2, #2
 800a94c:	dc0a      	bgt.n	800a964 <__kernel_rem_pio2+0x3bc>
 800a94e:	2a00      	cmp	r2, #0
 800a950:	dc2d      	bgt.n	800a9ae <__kernel_rem_pio2+0x406>
 800a952:	d046      	beq.n	800a9e2 <__kernel_rem_pio2+0x43a>
 800a954:	f008 0007 	and.w	r0, r8, #7
 800a958:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800a95c:	ecbd 8b06 	vpop	{d8-d10}
 800a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a964:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800a966:	2a03      	cmp	r2, #3
 800a968:	d1f4      	bne.n	800a954 <__kernel_rem_pio2+0x3ac>
 800a96a:	a942      	add	r1, sp, #264	@ 0x108
 800a96c:	f1a3 0208 	sub.w	r2, r3, #8
 800a970:	440a      	add	r2, r1
 800a972:	4611      	mov	r1, r2
 800a974:	4620      	mov	r0, r4
 800a976:	2800      	cmp	r0, #0
 800a978:	f1a1 0108 	sub.w	r1, r1, #8
 800a97c:	dc52      	bgt.n	800aa24 <__kernel_rem_pio2+0x47c>
 800a97e:	4621      	mov	r1, r4
 800a980:	2901      	cmp	r1, #1
 800a982:	f1a2 0208 	sub.w	r2, r2, #8
 800a986:	dc5d      	bgt.n	800aa44 <__kernel_rem_pio2+0x49c>
 800a988:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800aa98 <__kernel_rem_pio2+0x4f0>
 800a98c:	aa42      	add	r2, sp, #264	@ 0x108
 800a98e:	4413      	add	r3, r2
 800a990:	2c01      	cmp	r4, #1
 800a992:	dc67      	bgt.n	800aa64 <__kernel_rem_pio2+0x4bc>
 800a994:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800a998:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800a99c:	2e00      	cmp	r6, #0
 800a99e:	d167      	bne.n	800aa70 <__kernel_rem_pio2+0x4c8>
 800a9a0:	ed87 5b00 	vstr	d5, [r7]
 800a9a4:	ed87 6b02 	vstr	d6, [r7, #8]
 800a9a8:	ed87 7b04 	vstr	d7, [r7, #16]
 800a9ac:	e7d2      	b.n	800a954 <__kernel_rem_pio2+0x3ac>
 800a9ae:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800aa98 <__kernel_rem_pio2+0x4f0>
 800a9b2:	aa42      	add	r2, sp, #264	@ 0x108
 800a9b4:	4413      	add	r3, r2
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	2a00      	cmp	r2, #0
 800a9ba:	da24      	bge.n	800aa06 <__kernel_rem_pio2+0x45e>
 800a9bc:	b34e      	cbz	r6, 800aa12 <__kernel_rem_pio2+0x46a>
 800a9be:	eeb1 7b46 	vneg.f64	d7, d6
 800a9c2:	ed87 7b00 	vstr	d7, [r7]
 800a9c6:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800a9ca:	aa44      	add	r2, sp, #272	@ 0x110
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a9d2:	429c      	cmp	r4, r3
 800a9d4:	da20      	bge.n	800aa18 <__kernel_rem_pio2+0x470>
 800a9d6:	b10e      	cbz	r6, 800a9dc <__kernel_rem_pio2+0x434>
 800a9d8:	eeb1 7b47 	vneg.f64	d7, d7
 800a9dc:	ed87 7b02 	vstr	d7, [r7, #8]
 800a9e0:	e7b8      	b.n	800a954 <__kernel_rem_pio2+0x3ac>
 800a9e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800aa98 <__kernel_rem_pio2+0x4f0>
 800a9e6:	aa42      	add	r2, sp, #264	@ 0x108
 800a9e8:	4413      	add	r3, r2
 800a9ea:	2c00      	cmp	r4, #0
 800a9ec:	da05      	bge.n	800a9fa <__kernel_rem_pio2+0x452>
 800a9ee:	b10e      	cbz	r6, 800a9f4 <__kernel_rem_pio2+0x44c>
 800a9f0:	eeb1 7b47 	vneg.f64	d7, d7
 800a9f4:	ed87 7b00 	vstr	d7, [r7]
 800a9f8:	e7ac      	b.n	800a954 <__kernel_rem_pio2+0x3ac>
 800a9fa:	ed33 6b02 	vldmdb	r3!, {d6}
 800a9fe:	3c01      	subs	r4, #1
 800aa00:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aa04:	e7f1      	b.n	800a9ea <__kernel_rem_pio2+0x442>
 800aa06:	ed33 7b02 	vldmdb	r3!, {d7}
 800aa0a:	3a01      	subs	r2, #1
 800aa0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800aa10:	e7d2      	b.n	800a9b8 <__kernel_rem_pio2+0x410>
 800aa12:	eeb0 7b46 	vmov.f64	d7, d6
 800aa16:	e7d4      	b.n	800a9c2 <__kernel_rem_pio2+0x41a>
 800aa18:	ecb2 6b02 	vldmia	r2!, {d6}
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aa22:	e7d6      	b.n	800a9d2 <__kernel_rem_pio2+0x42a>
 800aa24:	ed91 7b00 	vldr	d7, [r1]
 800aa28:	ed91 5b02 	vldr	d5, [r1, #8]
 800aa2c:	3801      	subs	r0, #1
 800aa2e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800aa32:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa36:	ed81 6b00 	vstr	d6, [r1]
 800aa3a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800aa3e:	ed81 7b02 	vstr	d7, [r1, #8]
 800aa42:	e798      	b.n	800a976 <__kernel_rem_pio2+0x3ce>
 800aa44:	ed92 7b00 	vldr	d7, [r2]
 800aa48:	ed92 5b02 	vldr	d5, [r2, #8]
 800aa4c:	3901      	subs	r1, #1
 800aa4e:	ee37 6b05 	vadd.f64	d6, d7, d5
 800aa52:	ee37 7b46 	vsub.f64	d7, d7, d6
 800aa56:	ed82 6b00 	vstr	d6, [r2]
 800aa5a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800aa5e:	ed82 7b02 	vstr	d7, [r2, #8]
 800aa62:	e78d      	b.n	800a980 <__kernel_rem_pio2+0x3d8>
 800aa64:	ed33 6b02 	vldmdb	r3!, {d6}
 800aa68:	3c01      	subs	r4, #1
 800aa6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800aa6e:	e78f      	b.n	800a990 <__kernel_rem_pio2+0x3e8>
 800aa70:	eeb1 5b45 	vneg.f64	d5, d5
 800aa74:	eeb1 6b46 	vneg.f64	d6, d6
 800aa78:	ed87 5b00 	vstr	d5, [r7]
 800aa7c:	eeb1 7b47 	vneg.f64	d7, d7
 800aa80:	ed87 6b02 	vstr	d6, [r7, #8]
 800aa84:	e790      	b.n	800a9a8 <__kernel_rem_pio2+0x400>
 800aa86:	bf00      	nop
 800aa88:	00000000 	.word	0x00000000
 800aa8c:	41700000 	.word	0x41700000
 800aa90:	00000000 	.word	0x00000000
 800aa94:	3e700000 	.word	0x3e700000
	...

0800aaa0 <scalbn>:
 800aaa0:	ee10 1a90 	vmov	r1, s1
 800aaa4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aaa8:	b98b      	cbnz	r3, 800aace <scalbn+0x2e>
 800aaaa:	ee10 3a10 	vmov	r3, s0
 800aaae:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800aab2:	4319      	orrs	r1, r3
 800aab4:	d00a      	beq.n	800aacc <scalbn+0x2c>
 800aab6:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800ab68 <scalbn+0xc8>
 800aaba:	4b37      	ldr	r3, [pc, #220]	@ (800ab98 <scalbn+0xf8>)
 800aabc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800aac0:	4298      	cmp	r0, r3
 800aac2:	da0b      	bge.n	800aadc <scalbn+0x3c>
 800aac4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ab70 <scalbn+0xd0>
 800aac8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800aacc:	4770      	bx	lr
 800aace:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d107      	bne.n	800aae6 <scalbn+0x46>
 800aad6:	ee30 0b00 	vadd.f64	d0, d0, d0
 800aada:	4770      	bx	lr
 800aadc:	ee10 1a90 	vmov	r1, s1
 800aae0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aae4:	3b36      	subs	r3, #54	@ 0x36
 800aae6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800aaea:	4290      	cmp	r0, r2
 800aaec:	dd0d      	ble.n	800ab0a <scalbn+0x6a>
 800aaee:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ab78 <scalbn+0xd8>
 800aaf2:	ee10 3a90 	vmov	r3, s1
 800aaf6:	eeb0 6b47 	vmov.f64	d6, d7
 800aafa:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 800ab80 <scalbn+0xe0>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	fe27 7b05 	vselge.f64	d7, d7, d5
 800ab04:	ee27 0b06 	vmul.f64	d0, d7, d6
 800ab08:	4770      	bx	lr
 800ab0a:	4418      	add	r0, r3
 800ab0c:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800ab10:	4298      	cmp	r0, r3
 800ab12:	dcec      	bgt.n	800aaee <scalbn+0x4e>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	dd0a      	ble.n	800ab2e <scalbn+0x8e>
 800ab18:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800ab1c:	ec53 2b10 	vmov	r2, r3, d0
 800ab20:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800ab24:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ab28:	ec43 2b10 	vmov	d0, r2, r3
 800ab2c:	4770      	bx	lr
 800ab2e:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800ab32:	da09      	bge.n	800ab48 <scalbn+0xa8>
 800ab34:	ed9f 7b0e 	vldr	d7, [pc, #56]	@ 800ab70 <scalbn+0xd0>
 800ab38:	ee10 3a90 	vmov	r3, s1
 800ab3c:	eeb0 6b47 	vmov.f64	d6, d7
 800ab40:	ed9f 5b11 	vldr	d5, [pc, #68]	@ 800ab88 <scalbn+0xe8>
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	e7db      	b.n	800ab00 <scalbn+0x60>
 800ab48:	f021 41ff 	bic.w	r1, r1, #2139095040	@ 0x7f800000
 800ab4c:	ec53 2b10 	vmov	r2, r3, d0
 800ab50:	3036      	adds	r0, #54	@ 0x36
 800ab52:	f421 01e0 	bic.w	r1, r1, #7340032	@ 0x700000
 800ab56:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800ab5a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ab90 <scalbn+0xf0>
 800ab5e:	ec43 2b10 	vmov	d0, r2, r3
 800ab62:	e7b1      	b.n	800aac8 <scalbn+0x28>
 800ab64:	f3af 8000 	nop.w
 800ab68:	00000000 	.word	0x00000000
 800ab6c:	43500000 	.word	0x43500000
 800ab70:	c2f8f359 	.word	0xc2f8f359
 800ab74:	01a56e1f 	.word	0x01a56e1f
 800ab78:	8800759c 	.word	0x8800759c
 800ab7c:	7e37e43c 	.word	0x7e37e43c
 800ab80:	8800759c 	.word	0x8800759c
 800ab84:	fe37e43c 	.word	0xfe37e43c
 800ab88:	c2f8f359 	.word	0xc2f8f359
 800ab8c:	81a56e1f 	.word	0x81a56e1f
 800ab90:	00000000 	.word	0x00000000
 800ab94:	3c900000 	.word	0x3c900000
 800ab98:	ffff3cb0 	.word	0xffff3cb0
 800ab9c:	00000000 	.word	0x00000000

0800aba0 <floor>:
 800aba0:	ee10 3a90 	vmov	r3, s1
 800aba4:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800aba8:	ee10 2a10 	vmov	r2, s0
 800abac:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800abb0:	2913      	cmp	r1, #19
 800abb2:	b530      	push	{r4, r5, lr}
 800abb4:	4615      	mov	r5, r2
 800abb6:	dc33      	bgt.n	800ac20 <floor+0x80>
 800abb8:	2900      	cmp	r1, #0
 800abba:	da18      	bge.n	800abee <floor+0x4e>
 800abbc:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800ac80 <floor+0xe0>
 800abc0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800abc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800abc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abcc:	dd0a      	ble.n	800abe4 <floor+0x44>
 800abce:	2b00      	cmp	r3, #0
 800abd0:	da50      	bge.n	800ac74 <floor+0xd4>
 800abd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abd6:	4313      	orrs	r3, r2
 800abd8:	2200      	movs	r2, #0
 800abda:	4293      	cmp	r3, r2
 800abdc:	4b2a      	ldr	r3, [pc, #168]	@ (800ac88 <floor+0xe8>)
 800abde:	bf08      	it	eq
 800abe0:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800abe4:	4619      	mov	r1, r3
 800abe6:	4610      	mov	r0, r2
 800abe8:	ec41 0b10 	vmov	d0, r0, r1
 800abec:	e01f      	b.n	800ac2e <floor+0x8e>
 800abee:	4827      	ldr	r0, [pc, #156]	@ (800ac8c <floor+0xec>)
 800abf0:	4108      	asrs	r0, r1
 800abf2:	ea03 0400 	and.w	r4, r3, r0
 800abf6:	4314      	orrs	r4, r2
 800abf8:	d019      	beq.n	800ac2e <floor+0x8e>
 800abfa:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ac80 <floor+0xe0>
 800abfe:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ac02:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac0a:	ddeb      	ble.n	800abe4 <floor+0x44>
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	bfbe      	ittt	lt
 800ac10:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800ac14:	410a      	asrlt	r2, r1
 800ac16:	189b      	addlt	r3, r3, r2
 800ac18:	ea23 0300 	bic.w	r3, r3, r0
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	e7e1      	b.n	800abe4 <floor+0x44>
 800ac20:	2933      	cmp	r1, #51	@ 0x33
 800ac22:	dd05      	ble.n	800ac30 <floor+0x90>
 800ac24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800ac28:	d101      	bne.n	800ac2e <floor+0x8e>
 800ac2a:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ac2e:	bd30      	pop	{r4, r5, pc}
 800ac30:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295
 800ac38:	40e0      	lsrs	r0, r4
 800ac3a:	4210      	tst	r0, r2
 800ac3c:	d0f7      	beq.n	800ac2e <floor+0x8e>
 800ac3e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800ac80 <floor+0xe0>
 800ac42:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ac46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ac4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4e:	ddc9      	ble.n	800abe4 <floor+0x44>
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	da02      	bge.n	800ac5a <floor+0xba>
 800ac54:	2914      	cmp	r1, #20
 800ac56:	d103      	bne.n	800ac60 <floor+0xc0>
 800ac58:	3301      	adds	r3, #1
 800ac5a:	ea22 0200 	bic.w	r2, r2, r0
 800ac5e:	e7c1      	b.n	800abe4 <floor+0x44>
 800ac60:	2401      	movs	r4, #1
 800ac62:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800ac66:	fa04 f101 	lsl.w	r1, r4, r1
 800ac6a:	440a      	add	r2, r1
 800ac6c:	42aa      	cmp	r2, r5
 800ac6e:	bf38      	it	cc
 800ac70:	191b      	addcc	r3, r3, r4
 800ac72:	e7f2      	b.n	800ac5a <floor+0xba>
 800ac74:	2200      	movs	r2, #0
 800ac76:	4613      	mov	r3, r2
 800ac78:	e7b4      	b.n	800abe4 <floor+0x44>
 800ac7a:	bf00      	nop
 800ac7c:	f3af 8000 	nop.w
 800ac80:	8800759c 	.word	0x8800759c
 800ac84:	7e37e43c 	.word	0x7e37e43c
 800ac88:	bff00000 	.word	0xbff00000
 800ac8c:	000fffff 	.word	0x000fffff

0800ac90 <_init>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	bf00      	nop
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr

0800ac9c <_fini>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr
